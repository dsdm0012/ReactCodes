{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar TrackPublication = require('./trackpublication');\n/**\n * A {@link RemoteTrackPublication} represents a {@link RemoteTrack} that has\n * been published to a {@link Room}.\n * @extends TrackPublication\n * @property {boolean} isSubscribed - whether the published {@link RemoteTrack}\n *   is subscribed to\n * @property {boolean} isTrackEnabled - whether the published\n *   {@link RemoteTrack} is enabled\n * @property {Track.Kind} kind - kind of the published {@link RemoteTrack}\n * @property {Track.Priority} publishPriority - the {@link Track.Priority} of the published\n *   {@link RemoteTrack} set by the {@link RemoteParticipant}\n * @property {?RemoteTrack} track - Unless you have subscribed to the\n *   {@link RemoteTrack}, this property is null\n * @emits RemoteTrackPublication#publishPriorityChanged\n * @emits RemoteTrackPublication#subscribed\n * @emits RemoteTrackPublication#subscriptionFailed\n * @emits RemoteTrackPublication#trackDisabled\n * @emits RemoteTrackPublication#trackEnabled\n * @emits RemoteTrackPublication#trackSwitchedOff\n * @emits RemoteTrackPublication#trackSwitchedOn\n * @emits RemoteTrackPublication#unsubscribed\n *\n */\n\n\nvar RemoteTrackPublication =\n/** @class */\nfunction (_super) {\n  __extends(RemoteTrackPublication, _super);\n  /**\n   * Construct a {@link RemoteTrackPublication}.\n   * @param {RemoteTrackPublicationSignaling} signaling - {@link RemoteTrackPublication} signaling\n   * @param {RemoteTrackPublicationOptions} options - {@link RemoteTrackPublication}\n   *   options\n   */\n\n\n  function RemoteTrackPublication(signaling, options) {\n    var _this = _super.call(this, signaling.name, signaling.sid, options) || this;\n\n    Object.defineProperties(_this, {\n      _signaling: {\n        value: signaling\n      },\n      _track: {\n        value: null,\n        writable: true\n      },\n      isSubscribed: {\n        enumerable: true,\n        get: function () {\n          return !!this._track;\n        }\n      },\n      isTrackEnabled: {\n        enumerable: true,\n        get: function () {\n          return signaling.isEnabled;\n        }\n      },\n      kind: {\n        enumerable: true,\n        value: signaling.kind\n      },\n      publishPriority: {\n        enumerable: true,\n        get: function () {\n          return signaling.priority;\n        }\n      },\n      track: {\n        enumerable: true,\n        get: function () {\n          return this._track;\n        }\n      }\n    }); // remember original state, and fire events only on change.\n\n    var error = signaling.error,\n        isEnabled = signaling.isEnabled,\n        isSwitchedOff = signaling.isSwitchedOff,\n        priority = signaling.priority;\n    signaling.on('updated', function () {\n      if (error !== signaling.error) {\n        error = signaling.error;\n\n        _this.emit('subscriptionFailed', signaling.error);\n\n        return;\n      }\n\n      if (isEnabled !== signaling.isEnabled) {\n        isEnabled = signaling.isEnabled;\n\n        if (_this.track) {\n          _this.track._setEnabled(signaling.isEnabled);\n        }\n\n        _this.emit(signaling.isEnabled ? 'trackEnabled' : 'trackDisabled');\n      }\n\n      if (isSwitchedOff !== signaling.isSwitchedOff) {\n        _this._log.debug(_this.trackSid + \": \" + (isSwitchedOff ? 'OFF' : 'ON') + \" => \" + (signaling.isSwitchedOff ? 'OFF' : 'ON'));\n\n        isSwitchedOff = signaling.isSwitchedOff;\n\n        if (_this.track) {\n          _this.track._setSwitchedOff(signaling.isSwitchedOff);\n\n          _this.emit(isSwitchedOff ? 'trackSwitchedOff' : 'trackSwitchedOn', _this.track);\n        } else if (isSwitchedOff) {\n          _this._log.warn('Track was not subscribed when switched Off.');\n        }\n      }\n\n      if (priority !== signaling.priority) {\n        priority = signaling.priority;\n\n        _this.emit('publishPriorityChanged', priority);\n      }\n    });\n    return _this;\n  }\n\n  RemoteTrackPublication.prototype.toString = function () {\n    return \"[RemoteTrackPublication #\" + this._instanceId + \": \" + this.trackSid + \"]\";\n  };\n  /**\n   * @private\n   * @param {RemoteTrack} track\n   */\n\n\n  RemoteTrackPublication.prototype._subscribed = function (track) {\n    if (!this._track && track) {\n      this._track = track;\n      this.emit('subscribed', track);\n    }\n  };\n  /**\n   * @private\n   */\n\n\n  RemoteTrackPublication.prototype._unsubscribe = function () {\n    if (this._track) {\n      var track = this._track;\n      this._track = null;\n      this.emit('unsubscribed', track);\n    }\n  };\n\n  return RemoteTrackPublication;\n}(TrackPublication);\n/**\n * The {@link RemoteTrack}'s publish {@link Track.Priority} was changed by the\n * {@link RemoteParticipant}.\n * @param {Track.Priority} priority - the {@link RemoteTrack}'s new publish\n *   {@link Track.Priority}; RemoteTrackPublication#publishPriority is also\n *   updated accordingly\n * @event RemoteTrackPublication#publishPriorityChanged\n */\n\n/**\n * Your {@link LocalParticipant} subscribed to the {@link RemoteTrack}.\n * @param {RemoteTrack} track - the {@link RemoteTrack} that was subscribed to\n * @event RemoteTrackPublication#subscribed\n */\n\n/**\n * Your {@link LocalParticipant} failed to subscribe to the {@link RemoteTrack}.\n * @param {TwilioError} error - the reason the {@link RemoteTrack} could not be\n *   subscribed to\n * @event RemoteTrackPublication#subscriptionFailed\n */\n\n/**\n * The {@link RemoteTrack} was disabled.\n * @event RemoteTrackPublication#trackDisabled\n */\n\n/**\n * The {@link RemoteTrack} was enabled.\n * @event RemoteTrackPublication#trackEnabled\n */\n\n/**\n * The {@link RemoteTrack} was switched off.\n * @param {RemoteTrack} track - the {@link RemoteTrack} that was switched off\n * @event RemoteTrackPublication#trackSwitchedOff\n */\n\n/**\n * The {@link RemoteTrack} was switched on.\n * @param {RemoteTrack} track - the {@link RemoteTrack} that was switched on\n * @event RemoteTrackPublication#trackSwitchedOn\n */\n\n/**\n * Your {@link LocalParticipant} unsubscribed from the {@link RemoteTrack}.\n * @param {RemoteTrack} track - the {@link RemoteTrack} that was unsubscribed from\n * @event RemoteTrackPublication#unsubscribed\n */\n\n/**\n * {@link RemoteTrackPublication} options\n * @typedef {object} RemoteTrackPublicationOptions\n * @property {LogLevel|LogLevels} logLevel - Log level for 'media' modules\n */\n\n\nmodule.exports = RemoteTrackPublication;","map":null,"metadata":{},"sourceType":"script"}