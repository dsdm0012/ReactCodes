{"ast":null,"code":"var _jsxFileName = \"/home/bibhu/EDRdevelopment/DevBranch/edresearchweb/src/allAppsStudent/Messages/VATChat/ChatWindow/ChatWindowTest.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport classes from \"./ChatWindow.module.css\";\nimport ChatUserInfoTopBar from \"./ChatUserInfoTopBar\";\nimport ChatScreen from \"./ChatScreen\";\nimport ChatInput from \"./ChatInput\";\nimport { w3cwebsocket as W3CWebSocket } from 'websocket';\nimport { Picker } from \"emoji-mart\";\nimport \"emoji-mart/css/emoji-mart.css\";\nimport Login from '../../../../CommonApps/Login';\nimport axiosInstance from '../../../../axios';\nimport { MdSend } from 'react-icons/md';\nimport { postchatcomment, getchatcomments } from '../../../../CommonApps/AllAPICalls';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction connect() {\n  let client;\n  let messageListeners = [];\n  let isConnected = false;\n  let componentMounted = false;\n  let reconnectOnClose = true;\n  let stateChangeListeners = [];\n\n  function mountInfo(value) {\n    componentMounted = value;\n  }\n\n  function on(fn) {\n    messageListeners.push(fn);\n  }\n\n  function off(fn) {\n    messageListeners = messageListeners.filter(l => l !== fn);\n  }\n\n  function onStateChange(fn) {\n    stateChangeListeners.push(fn);\n    return () => {\n      stateChangeListeners = stateChangeListeners.filter(l => l !== fn);\n    };\n  }\n\n  function start() {\n    client = new W3CWebSocket('ws://127.0.0.1:8000/ws/chat/class/'); //const close = client.close;\n    //client.close = () => {\n    //   reconnectOnClose = false;\n    //  close.call(client);\n    //}\n\n    if (client.readyState === client.CLOSED) {\n      setTimeout(start, 5000);\n    }\n\n    client.onclose = () => {\n      isConnected = false;\n      stateChangeListeners.forEach(fn => fn(false));\n      console.log('time 1'); //if(componentMounted){\t   \n      //setTimeout(start, 5000);\n      //}\n\n      console.log('time 2');\n    };\n\n    client.onopen = () => {\n      isConnected = true;\n      stateChangeListeners.forEach(fn => fn(true));\n    };\n\n    client.onmessage = event => {\n      const dataFromServer = JSON.parse(event.data);\n      messageListeners.forEach(fn => fn(dataFromServer.message));\n    };\n  }\n\n  start();\n  return {\n    on,\n    off,\n    onStateChange,\n    mountInfo,\n    getClient: () => client,\n    isConnected: () => isConnected,\n    close: () => client.close(),\n    start: () => start()\n  };\n}\n\nconst client = connect();\n\nfunction useMessages() {\n  _s();\n\n  const [messages, setMessages] = useState(['hi']);\n  useEffect(() => {\n    function handleMessage(message) {\n      setMessages([...messages, message]);\n    }\n\n    client.on(handleMessage);\n    return () => client.off(handleMessage);\n  }, [messages, setMessages]);\n  return messages;\n}\n\n_s(useMessages, \"Dmh3JeMLY1tRuztwGY1RXDaRvbs=\");\n\nconst ChatWindow = props => {\n  _s2();\n\n  const mountedRef = useRef(true);\n  let value = true;\n  client.mountInfo(value);\n  const [isConnected, setIsConnected] = useState(client.isConnected());\n  console.log('isConnected: ', isConnected);\n  const [commentObj, setChatCommentObj] = useState([{}]);\n  const [message, setMessage] = useState('');\n  const messages = useMessages();\n\n  const handleChange = e => {\n    setMessage(msg => e.target.value);\n  };\n\n  useEffect(() => {\n    if (!isConnected && mountedRef.current) {//window.location.reload();  \n    }\n\n    return () => {\n      mountedRef.current = false;\n      client.mountInfo(false);\n      client.close();\n    };\n  }, [isConnected]); //useEffect(() => {\n  //    return client.onStateChange(setIsConnected);\n  //}, [setIsConnected]);\n\n  function sendMessage(e) {\n    e.preventDefault();\n\n    if (message !== \"\") {\n      client.getClient().send(JSON.stringify({\n        type: \"message\",\n        message: message\n      }));\n    }\n\n    console.log('sending message', message);\n    setMessage('');\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.chatWindow,\n    children: [/*#__PURE__*/_jsxDEV(ChatUserInfoTopBar, {\n      clickedUserId: props.clickedUserId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(ChatScreen, {\n      messages: messages,\n      commentObj: commentObj\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.chatInput,\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        className: classes.addCommentForm,\n        onSubmit: sendMessage,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.chatInput,\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            className: classes.inputTextBox,\n            value: message,\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 23\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: classes.submit_button,\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: [/*#__PURE__*/_jsxDEV(MdSend, {\n              className: classes.sendButtonIcon\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 80\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 77\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 18\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 6\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 213,\n    columnNumber: 1\n  }, this);\n};\n\n_s2(ChatWindow, \"OB17jvAnXXZfVqWvqi6lsxGWbzM=\", false, function () {\n  return [useMessages];\n});\n\n_c = ChatWindow;\nexport default ChatWindow;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatWindow\");","map":{"version":3,"sources":["/home/bibhu/EDRdevelopment/DevBranch/edresearchweb/src/allAppsStudent/Messages/VATChat/ChatWindow/ChatWindowTest.js"],"names":["React","useState","useEffect","useRef","classes","ChatUserInfoTopBar","ChatScreen","ChatInput","w3cwebsocket","W3CWebSocket","Picker","Login","axiosInstance","MdSend","postchatcomment","getchatcomments","connect","client","messageListeners","isConnected","componentMounted","reconnectOnClose","stateChangeListeners","mountInfo","value","on","fn","push","off","filter","l","onStateChange","start","readyState","CLOSED","setTimeout","onclose","forEach","console","log","onopen","onmessage","event","dataFromServer","JSON","parse","data","message","getClient","close","useMessages","messages","setMessages","handleMessage","ChatWindow","props","mountedRef","setIsConnected","commentObj","setChatCommentObj","setMessage","handleChange","e","msg","target","current","sendMessage","preventDefault","send","stringify","type","chatWindow","clickedUserId","chatInput","addCommentForm","inputTextBox","submit_button","sendButtonIcon"],"mappings":"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","sourcesContent":["import React,{useState,useEffect,useRef} from \"react\";\nimport classes from \"./ChatWindow.module.css\"\nimport ChatUserInfoTopBar from \"./ChatUserInfoTopBar\";\nimport ChatScreen from \"./ChatScreen\";\nimport ChatInput from \"./ChatInput\";\nimport {w3cwebsocket as W3CWebSocket } from 'websocket';\nimport { Picker } from \"emoji-mart\";\nimport \"emoji-mart/css/emoji-mart.css\";\nimport Login from '../../../../CommonApps/Login';\nimport axiosInstance from '../../../../axios';\nimport {MdSend} from 'react-icons/md';\nimport {postchatcomment,getchatcomments} from '../../../../CommonApps/AllAPICalls';\n\n\n\n\nfunction connect (){\n\nlet client;\nlet messageListeners = [];\nlet isConnected = false;\nlet componentMounted = false;\n\nlet reconnectOnClose = true;\nlet stateChangeListeners = [];\n\n\nfunction mountInfo(value){\n\n  componentMounted = value;\n}\n\n\n\nfunction on(fn) {\n    messageListeners.push(fn);\n  }\n\n function off(fn) {\n    messageListeners = messageListeners.filter(l => l !== fn);\n  }\n\nfunction onStateChange(fn) {\n    stateChangeListeners.push(fn);\n    return () => {\n      stateChangeListeners = stateChangeListeners.filter(l => l !== fn);\n    };\n  }\n\n\n\n\n\n\n\n\nfunction start () {\n\nclient = new W3CWebSocket('ws://127.0.0.1:8000/ws/chat/class/');\n\n\n\n    //const close = client.close;\n\n    //client.close = () => {\n    //   reconnectOnClose = false;\n    //  close.call(client);\n    //}\n\n    if(client.readyState === client.CLOSED ){\n      setTimeout(start, 5000);\n\n    }\n\n\n\n\n\n   client.onclose = () => {\n     isConnected=false;\n     stateChangeListeners.forEach(fn => fn(false));\t   \n     console.log('time 1');\n     //if(componentMounted){\t   \n     //setTimeout(start, 5000);\n     //}\n     console.log('time 2');\n   }\n\n   client.onopen=()=>{\n     isConnected=true;\n     stateChangeListeners.forEach(fn => fn(true));\t   \n   }\n\n   client.onmessage = (event)=>{\n    const dataFromServer = JSON.parse(event.data);\t\n    messageListeners.forEach(fn => fn(dataFromServer.message));\n   }\n\n\n}\n\nstart();\n\nreturn {\n    on,\n    off,\n    onStateChange,\n    mountInfo,\t\n    getClient: () => client,\n    isConnected: () => isConnected,\n    close: () => client.close(),\n    start: () => start(),\t\n   }\n}\n\nconst client = connect();\n\n\n\nfunction useMessages() {\n  const [messages, setMessages] = useState(['hi']);\n\n  useEffect(() => {\n    function handleMessage(message) {\n      setMessages([...messages, message]);\n    }\n      client.on(handleMessage);\n     return () => client.off(handleMessage);\n  }, [messages, setMessages]);\n\n  return messages;\n}\n\n\n\n\n\n\n\nconst ChatWindow = (props) =>{\n\n\n   const mountedRef = useRef(true);\n   let value=true;\n   client.mountInfo(value);\n\n   const [isConnected, setIsConnected] = useState(client.isConnected());\n   \n   console.log('isConnected: ', isConnected);\t\n\n   const [commentObj,setChatCommentObj]=useState([{}]);\n\n   const [message, setMessage] = useState('');\n   \n\n   const messages = useMessages();  \n\n\n   const handleChange = (e) => {\n      setMessage(msg=>e.target.value);\n\n\n   };\n\n   useEffect(()=>{\n     \n\n      if(!isConnected && mountedRef.current ){\n\t   //window.location.reload();  \n       }\n      return ()=>{\n         mountedRef.current = false;\n\t client.mountInfo(false);     \n         client.close();\n       }\n     },[isConnected]);\n\n\n     //useEffect(() => {\n     //    return client.onStateChange(setIsConnected);\n     //}, [setIsConnected]);\n\n\n\n\n\n\n\n\n   function sendMessage(e) {\n    e.preventDefault();\n    if(message !== \"\"){\t   \n    client.getClient().send(JSON.stringify({\n      type: \"message\",\n      message: message,\n    }))\n    }\n    \t    \n    console.log('sending message', message);\t \n    setMessage('');\n   }\n\n\n\n\n\n\n\n\n\nreturn(\n\n<div className={classes.chatWindow}>\n\n<ChatUserInfoTopBar clickedUserId={props.clickedUserId} />\n\n<ChatScreen messages={messages}  commentObj={commentObj}/>\n\t\n<div className={classes.chatInput}>\n\n\n\n\n     <form className={classes.addCommentForm} onSubmit={sendMessage}>\n\n\n                  <div className={classes.chatInput} >\n\n                      <input className={classes.inputTextBox} value={message} onChange={handleChange} />\n\n\n                  </div>\n\n                 \n                 <button type=\"submit\"  className= {classes.submit_button} ><b><MdSend className={classes.sendButtonIcon}/> </b> </button>\n                  \n     </form>\n\n\n</div>\n\n\n\n\t\n</div>\n\n);\n\n}\n\nexport default ChatWindow;\n"]},"metadata":{},"sourceType":"module"}