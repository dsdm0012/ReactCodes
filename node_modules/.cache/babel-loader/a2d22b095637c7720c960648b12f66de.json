{"ast":null,"code":"/* eslint-disable camelcase */\n'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar getUserAgent = require('..').getUserAgent;\n\nvar MAX_RECONNECT_ATTEMPTS = 5;\nvar RECONNECT_INTERVAL_MS = 50;\nvar WS_CLOSE_NORMAL = 1000;\nvar toplevel = globalThis;\nvar WebSocket = toplevel.WebSocket ? toplevel.WebSocket : require('ws');\n\nvar _a = require('../constants'),\n    hardwareDevicePublisheriPad = _a.hardwareDevicePublisheriPad,\n    hardwareDevicePublisheriPhone = _a.hardwareDevicePublisheriPhone;\n\nvar util = require('../../util');\n\nvar browserdetection = require('../browserdetection');\n/**\n * Publish events to the Insights gateway.\n * @extends EventEmitter\n * @emits InsightsPublisher#connected\n * @emits InsightsPublisher#disconnected\n * @emits InsightsPublisher#reconnecting\n */\n\n\nvar InsightsPublisher =\n/** @class */\nfunction (_super) {\n  __extends(InsightsPublisher, _super);\n  /**\n   * @param {string} token - Insights gateway token\n   * @param {string} sdkName - Name of the SDK using the {@link InsightsPublisher}\n   * @param {string} sdkVersion - Version of the SDK using the {@link InsightsPublisher}\n   * @param {string} environment - One of 'dev', 'stage' or 'prod'\n   * @param {string} realm - Region identifier\n   * @param {InsightsPublisherOptions} options - Override default behavior\n   */\n\n\n  function InsightsPublisher(token, sdkName, sdkVersion, environment, realm, options) {\n    var _this = _super.call(this) || this;\n\n    options = Object.assign({\n      gateway: createGateway(environment, realm) + \"/v1/VideoEvents\",\n      maxReconnectAttempts: MAX_RECONNECT_ATTEMPTS,\n      reconnectIntervalMs: RECONNECT_INTERVAL_MS,\n      userAgent: getUserAgent(),\n      WebSocket: WebSocket\n    }, options);\n    Object.defineProperties(_this, {\n      _connectTimestamp: {\n        value: 0,\n        writable: true\n      },\n      _eventQueue: {\n        value: []\n      },\n      _readyToConnect: {\n        value: util.defer()\n      },\n      _reconnectAttemptsLeft: {\n        value: options.maxReconnectAttempts,\n        writable: true\n      },\n      _ws: {\n        value: null,\n        writable: true\n      },\n      _WebSocket: {\n        value: options.WebSocket\n      }\n    });\n\n    _this._readyToConnect.promise.then(function (_a) {\n      var roomSid = _a.roomSid,\n          participantSid = _a.participantSid;\n      var self = _this;\n\n      _this.on('disconnected', function maybeReconnect(error) {\n        self._session = null;\n\n        if (error && self._reconnectAttemptsLeft > 0) {\n          self.emit('reconnecting');\n          reconnect(self, token, sdkName, sdkVersion, roomSid, participantSid, options);\n          return;\n        }\n\n        self.removeListener('disconnected', maybeReconnect);\n      });\n\n      connect(_this, token, sdkName, sdkVersion, roomSid, participantSid, options);\n    }).catch(function () {// ignore failures to connect\n    });\n\n    return _this;\n  }\n  /**\n   * Start connecting to the Insights gateway.\n   * @param {string} roomSid\n   * @param {string} participantSid\n   * @returns {void}\n   */\n\n\n  InsightsPublisher.prototype.connect = function (roomSid, participantSid) {\n    this._readyToConnect.resolve({\n      roomSid: roomSid,\n      participantSid: participantSid\n    });\n  };\n  /**\n   * Publish an event to the Insights gateway.\n   * @private\n   * @param {*} event\n   */\n\n\n  InsightsPublisher.prototype._publish = function (event) {\n    event.session = this._session;\n\n    this._ws.send(JSON.stringify(event));\n  };\n  /**\n   * Disconnect from the Insights gateway.\n   * @returns {boolean} true if called when connecting/open, false if not\n   */\n\n\n  InsightsPublisher.prototype.disconnect = function () {\n    if (this._ws === null || this._ws.readyState === this._WebSocket.CLOSING || this._ws.readyState === this._WebSocket.CLOSED) {\n      return false;\n    }\n\n    try {\n      this._ws.close();\n    } catch (error) {// Do nothing.\n    }\n\n    this.emit('disconnected');\n    return true;\n  };\n  /**\n   * Publish (or queue, if not connected) an event to the Insights gateway.\n   * @param {string} groupName - Event group name\n   * @param {string} eventName - Event name\n   * @param {object} payload - Event payload\n   * @returns {boolean} true if queued or published, false if disconnect() called\n   */\n\n\n  InsightsPublisher.prototype.publish = function (groupName, eventName, payload) {\n    if (this._ws !== null && (this._ws.readyState === this._WebSocket.CLOSING || this._ws.readyState === this._WebSocket.CLOSED)) {\n      return false;\n    }\n\n    var publishOrEnqueue = typeof this._session === 'string' ? this._publish.bind(this) : this._eventQueue.push.bind(this._eventQueue);\n    publishOrEnqueue({\n      group: groupName,\n      name: eventName,\n      payload: payload,\n      timestamp: Date.now(),\n      type: 'event',\n      version: 1\n    });\n    return true;\n  };\n\n  return InsightsPublisher;\n}(EventEmitter);\n/**\n * Start connecting to the Insights gateway.\n * @private\n * @param {InsightsPublisher} publisher\n * @param {string} name\n * @param {string} token\n * @param {string} sdkName\n * @param {string} sdkVersion\n * @param {string} roomSid\n * @param {string} participantSid\n * @param {InsightsPublisherOptions} options\n */\n\n\nfunction connect(publisher, token, sdkName, sdkVersion, roomSid, participantSid, options) {\n  publisher._connectTimestamp = Date.now();\n  publisher._reconnectAttemptsLeft--;\n  publisher._ws = new options.WebSocket(options.gateway);\n  var ws = publisher._ws;\n  ws.addEventListener('close', function (event) {\n    if (event.code === WS_CLOSE_NORMAL) {\n      publisher.emit('disconnected');\n      return;\n    }\n\n    publisher.emit('disconnected', new Error(\"WebSocket Error \" + event.code + \": \" + event.reason));\n  });\n  ws.addEventListener('message', function (message) {\n    handleConnectResponse(publisher, JSON.parse(message.data), options);\n  });\n  ws.addEventListener('open', function () {\n    var connectRequest = {\n      type: 'connect',\n      token: token,\n      version: 1\n    };\n    connectRequest.publisher = {\n      name: sdkName,\n      sdkVersion: sdkVersion,\n      userAgent: options.userAgent,\n      participantSid: participantSid,\n      roomSid: roomSid\n    };\n\n    if (browserdetection.isIpad()) {\n      connectRequest.publisher = __assign(__assign({}, connectRequest.publisher), hardwareDevicePublisheriPad);\n    } else if (browserdetection.isIphone()) {\n      connectRequest.publisher = __assign(__assign({}, connectRequest.publisher), hardwareDevicePublisheriPhone);\n    }\n\n    ws.send(JSON.stringify(connectRequest));\n  });\n}\n/**\n * Create the Insights Websocket gateway URL.\n * @param {string} environment\n * @param {string} realm\n * @returns {string}\n */\n\n\nfunction createGateway(environment, realm) {\n  return environment === 'prod' ? \"wss://sdkgw.\" + realm + \".twilio.com\" : \"wss://sdkgw.\" + environment + \"-\" + realm + \".twilio.com\";\n}\n/**\n * Handle connect response from the Insights gateway.\n * @param {InsightsPublisher} publisher\n * @param {*} response\n * @param {InsightsPublisherOptions} options\n */\n\n\nfunction handleConnectResponse(publisher, response, options) {\n  switch (response.type) {\n    case 'connected':\n      publisher._session = response.session;\n      publisher._reconnectAttemptsLeft = options.maxReconnectAttempts;\n\n      publisher._eventQueue.splice(0).forEach(publisher._publish, publisher);\n\n      publisher.emit('connected');\n      break;\n\n    case 'error':\n      publisher._ws.close();\n\n      publisher.emit('disconnected', new Error(response.message));\n      break;\n  }\n}\n/**\n * Start re-connecting to the Insights gateway with an appropriate delay based\n * on InsightsPublisherOptions#reconnectIntervalMs.\n * @private\n * @param {InsightsPublisher} publisher\n * @param {string} token\n * @param {string} sdkName\n * @param {string} sdkVersion\n * @param {string} roomSid\n * @param {string} participantSid\n * @param {InsightsPublisherOptions} options\n */\n\n\nfunction reconnect(publisher, token, sdkName, sdkVersion, roomSid, participantSid, options) {\n  var connectInterval = Date.now() - publisher._connectTimestamp;\n\n  var timeToWait = options.reconnectIntervalMs - connectInterval;\n\n  if (timeToWait > 0) {\n    setTimeout(function () {\n      connect(publisher, token, sdkName, sdkVersion, roomSid, participantSid, options);\n    }, timeToWait);\n    return;\n  }\n\n  connect(publisher, token, sdkName, sdkVersion, roomSid, participantSid, options);\n}\n/**\n * The {@link InsightsPublisher} is connected to the gateway.\n * @event InsightsPublisher#connected\n */\n\n/**\n * The {@link InsightsPublisher} is disconnected from the gateway.\n * @event InsightsPublisher#disconnected\n * @param {Error} [error] - Optional error if disconnected unintentionally\n */\n\n/**\n * The {@link InsightsPublisher} is re-connecting to the gateway.\n * @event InsightsPublisher#reconnecting\n */\n\n/**\n * {@link InsightsPublisher} options.\n * @typedef {object} InsightsPublisherOptions\n * @property {string} [gateway=sdkgw.{environment}-{realm}.twilio.com] - Insights WebSocket gateway url\n * @property {number} [maxReconnectAttempts=5] - Max re-connect attempts\n * @property {number} [reconnectIntervalMs=50] - Re-connect interval in ms\n */\n\n\nmodule.exports = InsightsPublisher;","map":null,"metadata":{},"sourceType":"script"}