{"ast":null,"code":"import axios from 'axios';\nconst baseURL = 'http://127.0.0.1:8000/api/';\nconst axiosInstance = axios.create({\n  baseURL: baseURL,\n  timeout: 5000,\n  headers: {\n    Authorization: localStorage.getItem('access_token') ? 'JWT ' + localStorage.getItem('access_token') : null,\n    'Content-Type': 'application/json',\n    accept: 'application/json'\n  }\n});\naxiosInstance.interceptors.response.use(response => {\n  console.log(\"axios response: .......\", response.status);\n  return response;\n}, async function (error) {\n  const originalRequest = error.config;\n  console.log(\"axios error: \", error);\n\n  if (error.response.data.code === 'token_not_valid' && error.response.status === 401 && error.response.statusText === 'Unauthorized') {\n    console.log(\"401 status code hai mere bhai\");\n    const refreshToken = localStorage.getItem('refresh_token');\n\n    if (refreshToken) {} else {\n      console.log('Refresh token not available.');\n      window.location.href = '/login/';\n    }\n\n    return Promise.reject(error);\n  }\n\n  return Promise.reject(error);\n});\n{\n  /*\n  \n  axiosInstance.interceptors.response.use(\n  (response) => {\n  \treturn response;\n  },\n  async function (error) {\n  \tconst originalRequest = error.config;\n  \t\tif (typeof error.response === 'undefined') {\n  \t\talert(\n  \t\t\t'A server/network error occurred. ' +\n  \t\t\t\t'Looks like CORS might be the problem. ' +\n  \t\t\t\t'Sorry about this - we will get it fixed shortly.'\n  \t\t);\n  \t\treturn Promise.reject(error);\n  \t}\n  \t\tif (\n  \t\terror.response.status === 401 &&\n  \t\toriginalRequest.url === baseURL + 'token/refresh/'\n  \t) {\n  \t\twindow.location.href = '/login/';\n  \t\treturn Promise.reject(error);\n  \t}\n  \t\tif (\n  \t\terror.response.data.code === 'token_not_valid' &&\n  \t\terror.response.status === 401 &&\n  \t\terror.response.statusText === 'Unauthorized'\n  \t) {\n  \t\tconst refreshToken = localStorage.getItem('refresh_token');\n  \t\t\tif (refreshToken) {\n  \t\t\tconst tokenParts = JSON.parse(atob(refreshToken.split('.')[1]));\n  \t\t\t\t// exp date in token is expressed in seconds, while now() returns milliseconds:\n  \t\t\tconst now = Math.ceil(Date.now() / 1000);\n  \t\t\tconsole.log(\"now: \", now);\n  \t\t\tconsole.log(\"tokenParts.exp: \",tokenParts.exp);\n  \t\t\t\tif (tokenParts.exp > now) {\n  \t\t\t\treturn axiosInstance\n  \t\t\t\t\t.post('token/refresh/', { refresh: refreshToken })\n  \t\t\t\t\t.then((response) => {\n  \t\t\t\t\t\tlocalStorage.setItem('access_token', response.data.access);\n  \t\t\t\t\t\tlocalStorage.setItem('refresh_token', response.data.refresh);\n  \t\t\t\t\t\t\taxiosInstance.defaults.headers['Authorization'] =\n  \t\t\t\t\t\t\t'JWT ' + response.data.access;\n  \t\t\t\t\t\toriginalRequest.headers['Authorization'] =\n  \t\t\t\t\t\t\t'JWT ' + response.data.access;\n  \t\t\t\t\t\t\treturn axiosInstance(originalRequest);\n  \t\t\t\t\t})\n  \t\t\t\t\t.catch((err) => {\n  \t\t\t\t\t\tconsole.log(err);\n  \t\t\t\t\t});\n  \t\t\t} else {\n  \t\t\t\tconsole.log('Refresh token is expired', tokenParts.exp, now);\n  \t\t\t\twindow.location.href = '/login/';\n  \t\t\t}\n  \t\t} else {\n  \t\t\tconsole.log('Refresh token not available.');\n  \t\t\twindow.location.href = '/login/';\n  \t\t}\n  \t}\n  \t\t// specific error handling done elsewhere\n  \treturn Promise.reject(error);\n  }\n  );\n  */\n}\nexport default axiosInstance;","map":{"version":3,"sources":["/home/bibhu/Dropbox/myprojectdir_Django_DRF_React/edrUIreact/edrfront/src/axios.js"],"names":["axios","baseURL","axiosInstance","create","timeout","headers","Authorization","localStorage","getItem","accept","interceptors","response","use","console","log","status","error","originalRequest","config","data","code","statusText","refreshToken","window","location","href","Promise","reject"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,OAAO,GAAG,4BAAhB;AAGA,MAAMC,aAAa,GAAGF,KAAK,CAACG,MAAN,CAAa;AAClCF,EAAAA,OAAO,EAAEA,OADyB;AAElCG,EAAAA,OAAO,EAAE,IAFyB;AAGlCC,EAAAA,OAAO,EAAE;AACRC,IAAAA,aAAa,EAAEC,YAAY,CAACC,OAAb,CAAqB,cAArB,IACZ,SAASD,YAAY,CAACC,OAAb,CAAqB,cAArB,CADG,GAEZ,IAHK;AAIR,oBAAgB,kBAJR;AAKRC,IAAAA,MAAM,EAAE;AALA;AAHyB,CAAb,CAAtB;AAeAP,aAAa,CAACQ,YAAd,CAA2BC,QAA3B,CAAoCC,GAApC,CACED,QAAD,IAAY;AAEHE,EAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAsCH,QAAQ,CAACI,MAA/C;AACA,SAAOJ,QAAP;AAEL,CANL,EAQK,gBAAgBK,KAAhB,EAAuB;AACrB,QAAMC,eAAe,GAAGD,KAAK,CAACE,MAA9B;AACAL,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BE,KAA7B;;AACG,MAAKA,KAAK,CAACL,QAAN,CAAeQ,IAAf,CAAoBC,IAApB,KAA6B,iBAA7B,IACAJ,KAAK,CAACL,QAAN,CAAeI,MAAf,KAA0B,GAD1B,IAEAC,KAAK,CAACL,QAAN,CAAeU,UAAf,KAA8B,cAFnC,EAGN;AAEUR,IAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACA,UAAMQ,YAAY,GAAGf,YAAY,CAACC,OAAb,CAAqB,eAArB,CAArB;;AACA,QAAIc,YAAJ,EAAiB,CAGvB,CAHM,MAGD;AACOT,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACAS,MAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,SAAvB;AACL;;AAKR,WAAOC,OAAO,CAACC,MAAR,CAAeX,KAAf,CAAP;AAEI;;AAIJ,SAAOU,OAAO,CAACC,MAAR,CAAeX,KAAf,CAAP;AACD,CApCN;AA6CA;AAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAWG;AAEH,eAAgBd,aAAhB","sourcesContent":["import axios from 'axios';\n\nconst baseURL = 'http://127.0.0.1:8000/api/';\n\n\nconst axiosInstance = axios.create({\n\tbaseURL: baseURL,\n\ttimeout: 5000,\n\theaders: {\n\t\tAuthorization: localStorage.getItem('access_token')\n\t\t\t? 'JWT ' + localStorage.getItem('access_token')\n\t\t\t: null,\n\t\t'Content-Type': 'application/json',\n\t\taccept: 'application/json',\n\t}, \n});\n\n\n\n\naxiosInstance.interceptors.response.use(\n\t(response)=>{\n\n          console.log(\"axios response: .......\",response.status);\n          return response;\t\n\n    },\n\n     async function (error) {\n       const originalRequest = error.config;\n       console.log(\"axios error: \", error);\n          if(  error.response.data.code === 'token_not_valid' &&\n               error.response.status === 401 &&\n               error.response.statusText === 'Unauthorized'\n\t  ){\n\n              console.log(\"401 status code hai mere bhai\");\n              const refreshToken = localStorage.getItem('refresh_token');\n              if (refreshToken){\n\n\n\t      }else {\n                    console.log('Refresh token not available.');\n                    window.location.href = '/login/';\n              }\n\n\n\n\n\t      return Promise.reject(error);\t  \n\n          }\n\n\n\n       return Promise.reject(error);\n     }\n\n\n\n);\n\n\n\n\n{/*\n\n\n\naxiosInstance.interceptors.response.use(\n\t(response) => {\n\t\treturn response;\n\t},\n\tasync function (error) {\n\t\tconst originalRequest = error.config;\n\n\t\tif (typeof error.response === 'undefined') {\n\t\t\talert(\n\t\t\t\t'A server/network error occurred. ' +\n\t\t\t\t\t'Looks like CORS might be the problem. ' +\n\t\t\t\t\t'Sorry about this - we will get it fixed shortly.'\n\t\t\t);\n\t\t\treturn Promise.reject(error);\n\t\t}\n\n\t\tif (\n\t\t\terror.response.status === 401 &&\n\t\t\toriginalRequest.url === baseURL + 'token/refresh/'\n\t\t) {\n\t\t\twindow.location.href = '/login/';\n\t\t\treturn Promise.reject(error);\n\t\t}\n\n\t\tif (\n\t\t\terror.response.data.code === 'token_not_valid' &&\n\t\t\terror.response.status === 401 &&\n\t\t\terror.response.statusText === 'Unauthorized'\n\t\t) {\n\t\t\tconst refreshToken = localStorage.getItem('refresh_token');\n\n\t\t\tif (refreshToken) {\n\t\t\t\tconst tokenParts = JSON.parse(atob(refreshToken.split('.')[1]));\n\n\t\t\t\t// exp date in token is expressed in seconds, while now() returns milliseconds:\n\t\t\t\tconst now = Math.ceil(Date.now() / 1000);\n\t\t\t\tconsole.log(\"now: \", now);\n\t\t\t\tconsole.log(\"tokenParts.exp: \",tokenParts.exp);\n\n\t\t\t\tif (tokenParts.exp > now) {\n\t\t\t\t\treturn axiosInstance\n\t\t\t\t\t\t.post('token/refresh/', { refresh: refreshToken })\n\t\t\t\t\t\t.then((response) => {\n\t\t\t\t\t\t\tlocalStorage.setItem('access_token', response.data.access);\n\t\t\t\t\t\t\tlocalStorage.setItem('refresh_token', response.data.refresh);\n\n\t\t\t\t\t\t\taxiosInstance.defaults.headers['Authorization'] =\n\t\t\t\t\t\t\t\t'JWT ' + response.data.access;\n\t\t\t\t\t\t\toriginalRequest.headers['Authorization'] =\n\t\t\t\t\t\t\t\t'JWT ' + response.data.access;\n\n\t\t\t\t\t\t\treturn axiosInstance(originalRequest);\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch((err) => {\n\t\t\t\t\t\t\tconsole.log(err);\n\t\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log('Refresh token is expired', tokenParts.exp, now);\n\t\t\t\t\twindow.location.href = '/login/';\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.log('Refresh token not available.');\n\t\t\t\twindow.location.href = '/login/';\n\t\t\t}\n\t\t}\n\n\t\t// specific error handling done elsewhere\n\t\treturn Promise.reject(error);\n\t}\n);\n*/}\n\nexport default  axiosInstance;\n"]},"metadata":{},"sourceType":"module"}