{"ast":null,"code":"'use strict';\n\nvar getMediaSections = require('./').getMediaSections;\n/**\n * An {@link TrackMatcher} matches an RTCTrackEvent with a MediaStreamTrack\n * ID based on the MID of the underlying RTCRtpTransceiver.\n */\n\n\nvar TrackMatcher =\n/** @class */\nfunction () {\n  /**\n   * Construct an {@link TrackMatcher}.\n   */\n  function TrackMatcher() {\n    Object.defineProperties(this, {\n      _midsToTrackIds: {\n        value: new Map(),\n        writable: true\n      }\n    });\n  }\n  /**\n   * Match a given MediaStreamTrack with its ID.\n   * @param {RTCTrackEvent} event\n   * @returns {?Track.ID}\n   */\n\n\n  TrackMatcher.prototype.match = function (event) {\n    return this._midsToTrackIds.get(event.transceiver.mid) || null;\n  };\n  /**\n   * Update the {@link TrackMatcher} with a new SDP.\n   * @param {string} sdp\n   */\n\n\n  TrackMatcher.prototype.update = function (sdp) {\n    var sections = getMediaSections(sdp, '(audio|video)');\n    this._midsToTrackIds = sections.reduce(function (midsToTrackIds, section) {\n      var midMatches = section.match(/^a=mid:(.+)$/m) || [];\n      var trackIdMatches = section.match(/^a=msid:.+ (.+)$/m) || [];\n      var mid = midMatches[1];\n      var trackId = trackIdMatches[1];\n      return mid && trackId ? midsToTrackIds.set(mid, trackId) : midsToTrackIds;\n    }, this._midsToTrackIds);\n  };\n\n  return TrackMatcher;\n}();\n\nmodule.exports = TrackMatcher;","map":null,"metadata":{},"sourceType":"script"}