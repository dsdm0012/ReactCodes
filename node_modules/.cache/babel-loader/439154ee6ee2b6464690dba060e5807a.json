{"ast":null,"code":"'use strict';\n/**\n * A {@link Timeout} represents a resettable and clearable timeout.\n */\n\nvar Timeout =\n/** @class */\nfunction () {\n  /**\n   * Construct a {@link Timeout}.\n   * @param {function} fn - Function to call\n   * @param {number} delay - Delay in milliseconds\n   * @param {boolean} [autoStart=true] - If true, then start the {@link Timeout}.\n   */\n  function Timeout(fn, delay, autoStart) {\n    if (autoStart === void 0) {\n      autoStart = true;\n    }\n\n    Object.defineProperties(this, {\n      _delay: {\n        value: delay,\n        writable: true\n      },\n      _fn: {\n        value: fn\n      },\n      _timeout: {\n        value: null,\n        writable: true\n      }\n    });\n\n    if (autoStart) {\n      this.start();\n    }\n  }\n\n  Object.defineProperty(Timeout.prototype, \"delay\", {\n    /**\n     * The {@link Timeout} delay in milliseconds.\n     * @property {number}\n     */\n    get: function get() {\n      return this._delay;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Timeout.prototype, \"isSet\", {\n    /**\n     * Whether the {@link Timeout} is set.\n     * @property {boolean}\n     */\n    get: function get() {\n      return !!this._timeout;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Update the {@link Timeout} delay.\n   * @param {number} delay\n   * @returns {void}\n   */\n\n  Timeout.prototype.setDelay = function (delay) {\n    this._delay = delay;\n  };\n  /**\n   * Start the {@link Timeout}, if not already started.\n   * @returns {void}\n   */\n\n\n  Timeout.prototype.start = function () {\n    var _this = this;\n\n    if (!this.isSet) {\n      this._timeout = setTimeout(function () {\n        var fn = _this._fn;\n\n        _this.clear();\n\n        fn();\n      }, this._delay);\n    }\n  };\n  /**\n   * Clear the {@link Timeout}.\n   * @returns {void}\n   */\n\n\n  Timeout.prototype.clear = function () {\n    clearTimeout(this._timeout);\n    this._timeout = null;\n  };\n  /**\n   * Reset the {@link Timeout}.\n   * @returns {void}\n   */\n\n\n  Timeout.prototype.reset = function () {\n    this.clear();\n    this.start();\n  };\n\n  return Timeout;\n}();\n\nmodule.exports = Timeout;","map":null,"metadata":{},"sourceType":"script"}