{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.runPreflight = exports.PreflightTest = void 0;\n\nvar constants_1 = require(\"../util/constants\");\n\nvar timer_1 = require(\"./timer\");\n\nvar mos_1 = require(\"./mos\");\n\nvar getCombinedConnectionStats_1 = require(\"./getCombinedConnectionStats\");\n\nvar getturncredentials_1 = require(\"./getturncredentials\");\n\nvar makestat_1 = require(\"./makestat\");\n\nvar syntheticaudio_1 = require(\"./syntheticaudio\");\n\nvar syntheticvideo_1 = require(\"./syntheticvideo\");\n\nvar util_1 = require(\"../util\");\n\nvar WS_SERVER = require('../util/constants').WS_SERVER;\n\nvar Log = require('../util/log');\n\nvar EventEmitter = require('../eventemitter');\n\nvar MovingAverageDelta = require('../util/movingaveragedelta');\n\nvar EventObserver = require('../util/eventobserver');\n\nvar InsightsPublisher = require('../util/insightspublisher');\n\nvar _a = require('../util/sid'),\n    createSID = _a.createSID,\n    sessionSID = _a.sessionSID;\n\nvar _b = require('../util/twilio-video-errors'),\n    SignalingConnectionTimeoutError = _b.SignalingConnectionTimeoutError,\n    MediaConnectionError = _b.MediaConnectionError;\n\nvar SECOND = 1000;\nvar DEFAULT_TEST_DURATION = 10 * SECOND;\n/**\n * progress values that are sent by {@link PreflightTest#event:progress}\n * @enum {string}\n */\n\nvar PreflightProgress = {\n  /**\n   * {@link PreflightTest} has successfully generated synthetic tracks\n   */\n  mediaAcquired: 'mediaAcquired',\n\n  /**\n   * {@link PreflightTest} has successfully connected to twilio server and obtained turn credentials\n   */\n  connected: 'connected',\n\n  /**\n   * SubscriberParticipant successfully subscribed to media tracks.\n   */\n  mediaSubscribed: 'mediaSubscribed',\n\n  /**\n   * Media flow was detected.\n   */\n  mediaStarted: 'mediaStarted',\n\n  /**\n   * Established DTLS connection. This is measured from RTCDtlsTransport `connecting` to `connected` state.\n   * On Safari, Support for measuring this is missing, this event will be not be emitted on Safari.\n   */\n  dtlsConnected: 'dtlsConnected',\n\n  /**\n   * Established a PeerConnection, This is measured from PeerConnection `connecting` to `connected` state.\n   * On Firefox, Support for measuring this is missing, this event will be not be emitted on Firefox.\n   */\n  peerConnectionConnected: 'peerConnectionConnected',\n\n  /**\n   * Established ICE connection. This is measured from ICE connection `checking` to `connected` state.\n   */\n  iceConnected: 'iceConnected'\n};\n\nfunction notEmpty(value) {\n  return value !== null && typeof value !== 'undefined';\n}\n\nvar nInstances = 0;\n/**\n * A {@link PreflightTest} monitors progress of an ongoing preflight test.\n * <br><br>\n * Instance of {@link PreflightTest} is returned by calling {@link module:twilio-video.runPreflight}\n * @extends EventEmitter\n * @emits PreflightTest#completed\n * @emits PreflightTest#failed\n * @emits PreflightTest#progress\n */\n\nvar PreflightTest =\n/** @class */\nfunction (_super) {\n  __extends(PreflightTest, _super);\n  /**\n   * Constructs {@link PreflightTest}.\n   * @param {string} token\n   * @param {?PreflightOptions} [options]\n   */\n\n\n  function PreflightTest(token, options) {\n    var _this = _super.call(this) || this;\n\n    _this._testTiming = new timer_1.Timer();\n    _this._dtlsTiming = new timer_1.Timer();\n    _this._iceTiming = new timer_1.Timer();\n    _this._peerConnectionTiming = new timer_1.Timer();\n    _this._mediaTiming = new timer_1.Timer();\n    _this._connectTiming = new timer_1.Timer();\n    _this._sentBytesMovingAverage = new MovingAverageDelta();\n    _this._packetLossMovingAverage = new MovingAverageDelta();\n    _this._progressEvents = [];\n    _this._receivedBytesMovingAverage = new MovingAverageDelta();\n    var internalOptions = options;\n    var _a = internalOptions.environment,\n        environment = _a === void 0 ? 'prod' : _a,\n        _b = internalOptions.region,\n        region = _b === void 0 ? 'gll' : _b,\n        _c = internalOptions.duration,\n        duration = _c === void 0 ? DEFAULT_TEST_DURATION : _c; // eslint-disable-next-line new-cap\n\n    var wsServer = internalOptions.wsServer || WS_SERVER(environment, region);\n    _this._log = new Log('default', _this, constants_1.DEFAULT_LOG_LEVEL, constants_1.DEFAULT_LOGGER_NAME);\n    _this._testDuration = duration;\n    _this._instanceId = nInstances++;\n\n    _this._testTiming.start();\n\n    _this._runPreflightTest(token, environment, wsServer);\n\n    return _this;\n  }\n\n  PreflightTest.prototype.toString = function () {\n    return \"[Preflight #\" + this._instanceId + \"]\";\n  };\n  /**\n   * stops ongoing tests and emits error\n   */\n\n\n  PreflightTest.prototype.stop = function () {\n    this._stopped = true;\n  };\n\n  PreflightTest.prototype._generatePreflightReport = function (collectedStats) {\n    this._testTiming.stop();\n\n    return {\n      testTiming: this._testTiming.getTimeMeasurement(),\n      networkTiming: {\n        dtls: this._dtlsTiming.getTimeMeasurement(),\n        ice: this._iceTiming.getTimeMeasurement(),\n        peerConnection: this._peerConnectionTiming.getTimeMeasurement(),\n        connect: this._connectTiming.getTimeMeasurement(),\n        media: this._mediaTiming.getTimeMeasurement()\n      },\n      stats: {\n        jitter: makestat_1.makeStat(collectedStats === null || collectedStats === void 0 ? void 0 : collectedStats.jitter),\n        rtt: makestat_1.makeStat(collectedStats === null || collectedStats === void 0 ? void 0 : collectedStats.rtt),\n        packetLoss: makestat_1.makeStat(collectedStats === null || collectedStats === void 0 ? void 0 : collectedStats.packetLoss)\n      },\n      selectedIceCandidatePairStats: collectedStats ? collectedStats.selectedIceCandidatePairStats : null,\n      iceCandidateStats: collectedStats ? collectedStats.iceCandidateStats : [],\n      progressEvents: this._progressEvents,\n      // NOTE(mpatwardhan): internal properties.\n      mos: makestat_1.makeStat(collectedStats === null || collectedStats === void 0 ? void 0 : collectedStats.mos)\n    };\n  };\n\n  PreflightTest.prototype._executePreflightStep = function (stepName, step, timeoutError) {\n    return __awaiter(this, void 0, void 0, function () {\n      var MAX_STEP_DURATION, stepPromise, timer, timeoutPromise, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this._log.debug('Executing step: ', stepName);\n\n            MAX_STEP_DURATION = this._testDuration + 10 * SECOND;\n\n            if (this._stopped) {\n              throw new Error('stopped');\n            }\n\n            stepPromise = Promise.resolve().then(step);\n            timer = null;\n            timeoutPromise = new Promise(function (_resolve, reject) {\n              timer = setTimeout(function () {\n                reject(timeoutError || new Error(stepName + \" timeout.\"));\n              }, MAX_STEP_DURATION);\n            });\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1,, 3, 4]);\n\n            return [4\n            /*yield*/\n            , Promise.race([timeoutPromise, stepPromise])];\n\n          case 2:\n            result = _a.sent();\n            return [2\n            /*return*/\n            , result];\n\n          case 3:\n            if (timer !== null) {\n              clearTimeout(timer);\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  PreflightTest.prototype._collectNetworkTimings = function (pc) {\n    var _this = this;\n\n    return new Promise(function (resolve) {\n      var dtlsTransport;\n      pc.addEventListener('iceconnectionstatechange', function () {\n        if (pc.iceConnectionState === 'checking') {\n          _this._iceTiming.start();\n        }\n\n        if (pc.iceConnectionState === 'connected') {\n          _this._iceTiming.stop();\n\n          _this._updateProgress(PreflightProgress.iceConnected);\n\n          if (!dtlsTransport || dtlsTransport && dtlsTransport.state === 'connected') {\n            resolve();\n          }\n        }\n      }); // firefox does not support connectionstatechange.\n\n      pc.addEventListener('connectionstatechange', function () {\n        if (pc.connectionState === 'connecting') {\n          _this._peerConnectionTiming.start();\n        }\n\n        if (pc.connectionState === 'connected') {\n          _this._peerConnectionTiming.stop();\n\n          _this._updateProgress(PreflightProgress.peerConnectionConnected);\n        }\n      }); // Safari does not expose sender.transport.\n\n      var senders = pc.getSenders();\n      var transport = senders.map(function (sender) {\n        return sender.transport;\n      }).find(notEmpty);\n\n      if (typeof transport !== 'undefined') {\n        dtlsTransport = transport;\n        dtlsTransport.addEventListener('statechange', function () {\n          if (dtlsTransport.state === 'connecting') {\n            _this._dtlsTiming.start();\n          }\n\n          if (dtlsTransport.state === 'connected') {\n            _this._dtlsTiming.stop();\n\n            _this._updateProgress(PreflightProgress.dtlsConnected);\n\n            if (pc.iceConnectionState === 'connected') {\n              resolve();\n            }\n          }\n        });\n      }\n    });\n  };\n\n  PreflightTest.prototype._setupInsights = function (_a) {\n    var token = _a.token,\n        _b = _a.environment,\n        environment = _b === void 0 ? constants_1.DEFAULT_ENVIRONMENT : _b,\n        _c = _a.realm,\n        realm = _c === void 0 ? constants_1.DEFAULT_REALM : _c;\n    var eventPublisherOptions = {};\n    var eventPublisher = new InsightsPublisher(token, constants_1.SDK_NAME, constants_1.SDK_VERSION, environment, realm, eventPublisherOptions); // event publisher requires room sid/participant sid. supply fake ones.\n\n    eventPublisher.connect('PREFLIGHT_ROOM_SID', 'PREFLIGHT_PARTICIPANT');\n    var eventObserver = new EventObserver(eventPublisher, Date.now(), this._log); // eslint-disable-next-line no-undefined\n\n    var undefinedValue = undefined;\n    return {\n      reportToInsights: function (_a) {\n        var _b, _c;\n\n        var report = _a.report;\n        var jitterStats = report.stats.jitter || undefinedValue;\n        var rttStats = report.stats.rtt || undefinedValue;\n        var packetLossStats = report.stats.packetLoss || undefinedValue;\n        var mosStats = report.mos || undefinedValue; // stringify important info from ice candidates.\n\n        var candidateTypeToProtocols = new Map();\n        report.iceCandidateStats.forEach(function (candidateStats) {\n          if (candidateStats.candidateType && candidateStats.protocol) {\n            var protocols = candidateTypeToProtocols.get(candidateStats.candidateType) || [];\n\n            if (protocols.indexOf(candidateStats.protocol) < 0) {\n              protocols.push(candidateStats.protocol);\n            }\n\n            candidateTypeToProtocols.set(candidateStats.candidateType, protocols);\n          }\n        });\n        var iceCandidateStats = JSON.stringify(Object.fromEntries(candidateTypeToProtocols));\n        var insightsReport = {\n          name: 'report',\n          group: 'preflight',\n          level: report.error ? 'error' : 'info',\n          payload: {\n            sessionSID: sessionSID,\n            preflightSID: createSID('PF'),\n            progressEvents: JSON.stringify(report.progressEvents),\n            testTiming: report.testTiming,\n            dtlsTiming: report.networkTiming.dtls,\n            iceTiming: report.networkTiming.ice,\n            peerConnectionTiming: report.networkTiming.peerConnection,\n            connectTiming: report.networkTiming.connect,\n            mediaTiming: report.networkTiming.media,\n            selectedLocalCandidate: (_b = report.selectedIceCandidatePairStats) === null || _b === void 0 ? void 0 : _b.localCandidate,\n            selectedRemoteCandidate: (_c = report.selectedIceCandidatePairStats) === null || _c === void 0 ? void 0 : _c.remoteCandidate,\n            iceCandidateStats: iceCandidateStats,\n            jitterStats: jitterStats,\n            rttStats: rttStats,\n            packetLossStats: packetLossStats,\n            mosStats: mosStats,\n            error: report.error\n          }\n        };\n        eventObserver.emit('event', insightsReport);\n        setTimeout(function () {\n          return eventPublisher.disconnect();\n        }, 2000);\n      }\n    };\n  };\n\n  PreflightTest.prototype._runPreflightTest = function (token, environment, wsServer) {\n    return __awaiter(this, void 0, void 0, function () {\n      var localTracks, pcs, reportToInsights, elements_1, iceServers, senderPC_1, receiverPC_1, remoteTracks_1, collectedStats_1, report, error_1, preflightReport;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            localTracks = [];\n            pcs = [];\n            reportToInsights = this._setupInsights({\n              token: token,\n              environment: environment\n            }).reportToInsights;\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 8, 9, 10]);\n\n            elements_1 = [];\n            return [4\n            /*yield*/\n            , this._executePreflightStep('Acquire media', function () {\n              return [syntheticaudio_1.syntheticAudio(), syntheticvideo_1.syntheticVideo({\n                width: 640,\n                height: 480\n              })];\n            })];\n\n          case 2:\n            localTracks = _a.sent();\n\n            this._updateProgress(PreflightProgress.mediaAcquired);\n\n            this.emit('debug', {\n              localTracks: localTracks\n            });\n\n            this._connectTiming.start();\n\n            return [4\n            /*yield*/\n            , this._executePreflightStep('Get turn credentials', function () {\n              return getturncredentials_1.getTurnCredentials(token, wsServer);\n            }, new SignalingConnectionTimeoutError())];\n\n          case 3:\n            iceServers = _a.sent();\n\n            this._connectTiming.stop();\n\n            this._updateProgress(PreflightProgress.connected);\n\n            senderPC_1 = new RTCPeerConnection({\n              iceServers: iceServers,\n              iceTransportPolicy: 'relay',\n              bundlePolicy: 'max-bundle'\n            });\n            receiverPC_1 = new RTCPeerConnection({\n              iceServers: iceServers,\n              bundlePolicy: 'max-bundle'\n            });\n            pcs.push(senderPC_1);\n            pcs.push(receiverPC_1);\n\n            this._mediaTiming.start();\n\n            return [4\n            /*yield*/\n            , this._executePreflightStep('Setup Peer Connections', function () {\n              return __awaiter(_this, void 0, void 0, function () {\n                var remoteTracksPromise, offer, updatedOffer, answer;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      senderPC_1.addEventListener('icecandidate', function (event) {\n                        return event.candidate && receiverPC_1.addIceCandidate(event.candidate);\n                      });\n                      receiverPC_1.addEventListener('icecandidate', function (event) {\n                        return event.candidate && senderPC_1.addIceCandidate(event.candidate);\n                      });\n                      localTracks.forEach(function (track) {\n                        return senderPC_1.addTrack(track);\n                      });\n                      remoteTracksPromise = new Promise(function (resolve) {\n                        var remoteTracks = [];\n                        receiverPC_1.addEventListener('track', function (event) {\n                          remoteTracks.push(event.track);\n\n                          if (remoteTracks.length === localTracks.length) {\n                            resolve(remoteTracks);\n                          }\n                        });\n                      });\n                      return [4\n                      /*yield*/\n                      , senderPC_1.createOffer()];\n\n                    case 1:\n                      offer = _a.sent();\n                      updatedOffer = offer;\n                      return [4\n                      /*yield*/\n                      , senderPC_1.setLocalDescription(updatedOffer)];\n\n                    case 2:\n                      _a.sent();\n\n                      return [4\n                      /*yield*/\n                      , receiverPC_1.setRemoteDescription(updatedOffer)];\n\n                    case 3:\n                      _a.sent();\n\n                      return [4\n                      /*yield*/\n                      , receiverPC_1.createAnswer()];\n\n                    case 4:\n                      answer = _a.sent();\n                      return [4\n                      /*yield*/\n                      , receiverPC_1.setLocalDescription(answer)];\n\n                    case 5:\n                      _a.sent();\n\n                      return [4\n                      /*yield*/\n                      , senderPC_1.setRemoteDescription(answer)];\n\n                    case 6:\n                      _a.sent();\n\n                      return [4\n                      /*yield*/\n                      , this._collectNetworkTimings(senderPC_1)];\n\n                    case 7:\n                      _a.sent();\n\n                      return [2\n                      /*return*/\n                      , remoteTracksPromise];\n                  }\n                });\n              });\n            }, new MediaConnectionError())];\n\n          case 4:\n            remoteTracks_1 = _a.sent();\n            this.emit('debug', {\n              remoteTracks: remoteTracks_1\n            });\n            remoteTracks_1.forEach(function (track) {\n              track.addEventListener('ended', function () {\n                return _this._log.warn(track.kind + ':ended');\n              });\n              track.addEventListener('mute', function () {\n                return _this._log.warn(track.kind + ':muted');\n              });\n              track.addEventListener('unmute', function () {\n                return _this._log.warn(track.kind + ':unmuted');\n              });\n            });\n\n            this._updateProgress(PreflightProgress.mediaSubscribed);\n\n            return [4\n            /*yield*/\n            , this._executePreflightStep('Wait for tracks to start', function () {\n              return new Promise(function (resolve) {\n                var element = document.createElement('video');\n                element.autoplay = true;\n                element.playsInline = true;\n                element.muted = true;\n                element.srcObject = new MediaStream(remoteTracks_1);\n                elements_1.push(element);\n\n                _this.emit('debugElement', element);\n\n                element.oncanplay = resolve;\n              });\n            }, new MediaConnectionError())];\n\n          case 5:\n            _a.sent();\n\n            this._mediaTiming.stop();\n\n            this._updateProgress(PreflightProgress.mediaStarted);\n\n            return [4\n            /*yield*/\n            , this._executePreflightStep('Collect stats for duration', function () {\n              return _this._collectRTCStatsForDuration(_this._testDuration, initCollectedStats(), senderPC_1, receiverPC_1);\n            })];\n\n          case 6:\n            collectedStats_1 = _a.sent();\n            return [4\n            /*yield*/\n            , this._executePreflightStep('Generate report', function () {\n              return _this._generatePreflightReport(collectedStats_1);\n            })];\n\n          case 7:\n            report = _a.sent();\n            reportToInsights({\n              report: report\n            });\n            this.emit('completed', report);\n            return [3\n            /*break*/\n            , 10];\n\n          case 8:\n            error_1 = _a.sent();\n            preflightReport = this._generatePreflightReport();\n            reportToInsights({\n              report: __assign(__assign({}, preflightReport), {\n                error: error_1 === null || error_1 === void 0 ? void 0 : error_1.toString()\n              })\n            });\n            this.emit('failed', error_1, preflightReport);\n            return [3\n            /*break*/\n            , 10];\n\n          case 9:\n            pcs.forEach(function (pc) {\n              return pc.close();\n            });\n            localTracks.forEach(function (track) {\n              return track.stop();\n            });\n            return [7\n            /*endfinally*/\n            ];\n\n          case 10:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  PreflightTest.prototype._collectRTCStats = function (collectedStats, senderPC, receiverPC) {\n    return __awaiter(this, void 0, void 0, function () {\n      var combinedStats, timestamp, bytesSent, bytesReceived, packets, packetsLost, roundTripTime, jitter, selectedIceCandidatePairStats, iceCandidateStats, hasLastData, fractionPacketLost, percentPacketsLost, score;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , getCombinedConnectionStats_1.getCombinedConnectionStats({\n              publisher: senderPC,\n              subscriber: receiverPC\n            })];\n\n          case 1:\n            combinedStats = _a.sent();\n            timestamp = combinedStats.timestamp, bytesSent = combinedStats.bytesSent, bytesReceived = combinedStats.bytesReceived, packets = combinedStats.packets, packetsLost = combinedStats.packetsLost, roundTripTime = combinedStats.roundTripTime, jitter = combinedStats.jitter, selectedIceCandidatePairStats = combinedStats.selectedIceCandidatePairStats, iceCandidateStats = combinedStats.iceCandidateStats;\n            hasLastData = collectedStats.jitter.length > 0;\n            collectedStats.jitter.push(jitter);\n            collectedStats.rtt.push(roundTripTime);\n\n            this._sentBytesMovingAverage.putSample(bytesSent, timestamp);\n\n            this._receivedBytesMovingAverage.putSample(bytesReceived, timestamp);\n\n            this._packetLossMovingAverage.putSample(packetsLost, packets);\n\n            if (hasLastData) {\n              // convert BytesMovingAverage which is in bytes/millisecond to bits/second\n              collectedStats.outgoingBitrate.push(this._sentBytesMovingAverage.get() * 1000 * 8);\n              collectedStats.incomingBitrate.push(this._receivedBytesMovingAverage.get() * 1000 * 8);\n              fractionPacketLost = this._packetLossMovingAverage.get();\n              percentPacketsLost = Math.min(100, fractionPacketLost * 100);\n              collectedStats.packetLoss.push(percentPacketsLost);\n              score = mos_1.calculateMOS(roundTripTime, jitter, fractionPacketLost);\n              collectedStats.mos.push(score);\n            }\n\n            if (!collectedStats.selectedIceCandidatePairStats) {\n              collectedStats.selectedIceCandidatePairStats = selectedIceCandidatePairStats;\n            }\n\n            if (collectedStats.iceCandidateStats.length === 0) {\n              collectedStats.iceCandidateStats = iceCandidateStats;\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  PreflightTest.prototype._collectRTCStatsForDuration = function (duration, collectedStats, senderPC, receiverPC) {\n    return __awaiter(this, void 0, void 0, function () {\n      var startTime, STAT_INTERVAL, remainingDuration;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            startTime = Date.now();\n            STAT_INTERVAL = Math.min(1000, duration);\n            return [4\n            /*yield*/\n            , util_1.waitForSometime(STAT_INTERVAL)];\n\n          case 1:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this._collectRTCStats(collectedStats, senderPC, receiverPC)];\n\n          case 2:\n            _a.sent();\n\n            remainingDuration = duration - (Date.now() - startTime);\n            if (!(remainingDuration > 0)) return [3\n            /*break*/\n            , 4];\n            return [4\n            /*yield*/\n            , this._collectRTCStatsForDuration(remainingDuration, collectedStats, senderPC, receiverPC)];\n\n          case 3:\n            collectedStats = _a.sent();\n            _a.label = 4;\n\n          case 4:\n            return [2\n            /*return*/\n            , collectedStats];\n        }\n      });\n    });\n  };\n\n  PreflightTest.prototype._updateProgress = function (name) {\n    var duration = Date.now() - this._testTiming.getTimeMeasurement().start;\n\n    this._progressEvents.push({\n      duration: duration,\n      name: name\n    });\n\n    this.emit('progress', name);\n  };\n\n  return PreflightTest;\n}(EventEmitter);\n\nexports.PreflightTest = PreflightTest;\n\nfunction initCollectedStats() {\n  return {\n    mos: [],\n    jitter: [],\n    rtt: [],\n    outgoingBitrate: [],\n    incomingBitrate: [],\n    packetLoss: [],\n    selectedIceCandidatePairStats: null,\n    iceCandidateStats: []\n  };\n}\n/**\n * Represents network timing measurements captured during preflight test\n * @typedef {object} NetworkTiming\n * @property {TimeMeasurement} [connect] - Time to establish signaling connection and acquire turn credentials\n * @property {TimeMeasurement} [media] - Time to start media. This is measured from calling connect to remote media getting started.\n * @property {TimeMeasurement} [dtls] - Time to establish dtls connection. This is measured from RTCDtlsTransport `connecting` to `connected` state. (Not available on Safari)\n * @property {TimeMeasurement} [ice] - Time to establish ice connectivity. This is measured from ICE connection `checking` to `connected` state.\n * @property {TimeMeasurement} [peerConnection] - Time to establish peer connectivity. This is measured from PeerConnection `connecting` to `connected` state. (Not available on Firefox)\n */\n\n/**\n * Represents stats for a numerical metric.\n * @typedef {object} Stats\n * @property  {number} [average] - Average value observed.\n * @property  {number} [max] - Max value observed.\n * @property  {number} [min] - Min value observed.\n */\n\n/**\n * Represents stats for a numerical metric.\n * @typedef {object} SelectedIceCandidatePairStats\n * @property  {RTCIceCandidateStats} [localCandidate] - Selected local ice candidate\n * @property  {RTCIceCandidateStats} [remoteCandidate] - Selected local ice candidate\n */\n\n/**\n * Represents RTC related stats that were observed during preflight test\n * @typedef {object} PreflightReportStats\n * @property {Stats} [jitter] - Packet delay variation in seconds\n * @property {Stats} [rtt] - Round trip time, to the server back to the client in milliseconds.\n * @property {Stats} [packetLoss] - Packet loss as a percent of total packets sent.\n*/\n\n/**\n * A {@link PreflightProgress} event with timing information.\n * @typedef {object} ProgressEvent\n * @property {number} [duration] - The duration of the event, measured from the start of the test.\n * @property {string} [name] - The {@link PreflightProgress} event name.\n */\n\n/**\n * Represents report generated by {@link PreflightTest}.\n * @typedef {object} PreflightTestReport\n * @property {TimeMeasurement} [testTiming] - Time measurements of test run time.\n * @property {NetworkTiming} [networkTiming] - Network related time measurements.\n * @property {PreflightReportStats} [stats] - RTC related stats captured during the test.\n * @property {Array<RTCIceCandidateStats>} [iceCandidateStats] - List of gathered ice candidates.\n * @property {SelectedIceCandidatePairStats} selectedIceCandidatePairStats - Stats for the ice candidates that were used for the connection.\n * @property {Array<ProgressEvent>} [progressEvents] - {@link ProgressEvent} events detected during the test.\n * Use this information to determine which steps were completed and which ones were not.\n */\n\n/**\n * You may pass these options to {@link module:twilio-video.testPreflight} in order to override the\n * default behavior.\n * @typedef {object} PreflightOptions\n * @property {string} [region='gll'] - Preferred signaling region; By default, you will be connected to the\n *   nearest signaling server determined by latency based routing. Setting a value other\n *   than <code style=\"padding:0 0\">gll</code> bypasses routing and guarantees that signaling traffic will be\n *   terminated in the region that you prefer. Please refer to this <a href=\"https://www.twilio.com/docs/video/ip-address-whitelisting#signaling-communication\" target=\"_blank\">table</a>\n *   for the list of supported signaling regions.\n * @property {number} [duration=10000] - number of milliseconds to run test for.\n *   once connected test will run for this duration before generating the stats report.\n */\n\n/**\n * Preflight test has completed successfully.\n * @param {PreflightTestReport} report - Results of the test.\n * @event PreflightTest#completed\n */\n\n/**\n * Preflight test has encountered a failure and is now stopped.\n * @param {TwilioError|Error} error - A TwilioError or a DOMException.\n * Possible TwilioErrors include Signaling and Media related errors which can be found\n * <a href=\"https://www.twilio.com/docs/video/build-js-video-application-recommendations-and-best-practices#connection-errors\" target=\"_blank\">here</a>.\n * @param {PreflightTestReport} report - Partial results gathered during the test. Use this information to help determine the cause of failure.\n * @event PreflightTest#failed\n */\n\n/**\n * Emitted to indicate progress of the test\n * @param {PreflightProgress} progress - Indicates the status completed.\n * @event PreflightTest#progress\n */\n\n/**\n * @method\n * @name runPreflight\n * @description Run a preflight test. This method will start a test to check the quality of network connection.\n * @memberof module:twilio-video\n * @param {string} token - The Access Token string\n * @param {PreflightOptions} options - Options for the test\n * @returns {PreflightTest} preflightTest - An instance to be used to monitor progress of the test.\n * @example\n * var { runPreflight } = require('twilio-video');\n * var preflight = runPreflight(token, preflightOptions);\n * preflightTest.on('progress', progress => {\n *   console.log('preflight progress:', progress);\n * });\n *\n * preflightTest.on('failed', (error, report) => {\n *   console.error('preflight error:', error, report);\n * });\n *\n * preflightTest.on('completed', report => {\n *   console.log('preflight completed:', report));\n * });\n*/\n\n\nfunction runPreflight(token, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var preflight = new PreflightTest(token, options);\n  return preflight;\n}\n\nexports.runPreflight = runPreflight;","map":null,"metadata":{},"sourceType":"script"}