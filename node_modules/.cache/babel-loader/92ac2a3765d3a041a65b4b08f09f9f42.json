{"ast":null,"code":"'use strict';\n\nvar defer = require('./').defer;\n/**\n * This is a pair of Deferreds that are set whenever local media is muted and\n * resolved whenever local media is unmuted/ended and restarted if necessary.\n */\n\n\nvar LocalMediaRestartDeferreds =\n/** @class */\nfunction () {\n  /**\n   * Constructor.\n   */\n  function LocalMediaRestartDeferreds() {\n    Object.defineProperties(this, {\n      _audio: {\n        value: defer(),\n        writable: true\n      },\n      _video: {\n        value: defer(),\n        writable: true\n      }\n    }); // Initially, resolve both the Deferreds.\n\n    this._audio.resolve();\n\n    this._video.resolve();\n  }\n  /**\n   * Resolve the Deferred for audio or video.\n   * @param {'audio'|'video'} kind\n   */\n\n\n  LocalMediaRestartDeferreds.prototype.resolveDeferred = function (kind) {\n    if (kind === 'audio') {\n      this._audio.resolve();\n    } else {\n      this._video.resolve();\n    }\n  };\n  /**\n   * Start the Deferred for audio or video.\n   * @param {'audio' | 'video'} kind\n   */\n\n\n  LocalMediaRestartDeferreds.prototype.startDeferred = function (kind) {\n    if (kind === 'audio') {\n      this._audio = defer();\n    } else {\n      this._video = defer();\n    }\n  };\n  /**\n   * Wait until the Deferred for audio or video is resolved.\n   * @param {'audio'|'video'} kind\n   * @returns {Promise<void>}\n   */\n\n\n  LocalMediaRestartDeferreds.prototype.whenResolved = function (kind) {\n    return kind === 'audio' ? this._audio.promise : this._video.promise;\n  };\n\n  return LocalMediaRestartDeferreds;\n}();\n\nmodule.exports = new LocalMediaRestartDeferreds();","map":null,"metadata":{},"sourceType":"script"}