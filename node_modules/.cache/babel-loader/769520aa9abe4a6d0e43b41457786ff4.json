{"ast":null,"code":"'use strict';\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {\n    to[j] = from[i];\n  }\n\n  return to;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createLocalTracks = void 0;\n\nvar _a = require('./util'),\n    asLocalTrack = _a.asLocalTrack,\n    buildLogLevels = _a.buildLogLevels;\n\nvar _b = require('./webrtc'),\n    getUserMedia = _b.getUserMedia,\n    MediaStreamTrack = _b.MediaStreamTrack;\n\nvar _c = require('./media/track/es5'),\n    LocalAudioTrack = _c.LocalAudioTrack,\n    LocalDataTrack = _c.LocalDataTrack,\n    LocalVideoTrack = _c.LocalVideoTrack;\n\nvar Log = require('./util/log');\n\nvar _d = require('./util/constants'),\n    DEFAULT_LOG_LEVEL = _d.DEFAULT_LOG_LEVEL,\n    DEFAULT_LOGGER_NAME = _d.DEFAULT_LOGGER_NAME;\n\nvar workaround180748 = require('./webaudio/workaround180748'); // This is used to make out which createLocalTracks() call a particular Log\n// statement belongs to. Each call to createLocalTracks() increments this\n// counter.\n\n\nvar createLocalTrackCalls = 0;\n;\n/**\n * Request {@link LocalTrack}s. By default, it requests a\n * {@link LocalAudioTrack} and a {@link LocalVideoTrack}.\n * Note that on mobile browsers, the camera can be reserved by only one {@link LocalVideoTrack}\n * at any given time. If you attempt to create a second {@link LocalVideoTrack}, video frames\n * will no longer be supplied to the first {@link LocalVideoTrack}.\n * @alias module:twilio-video.createLocalTracks\n * @param {CreateLocalTracksOptions} [options]\n * @returns {Promise<Array<LocalTrack>>}\n * @example\n * var Video = require('twilio-video');\n * // Request audio and video tracks\n * Video.createLocalTracks().then(function(localTracks) {\n *   var localMediaContainer = document.getElementById('local-media-container-id');\n *   localTracks.forEach(function(track) {\n *     localMediaContainer.appendChild(track.attach());\n *   });\n * });\n * @example\n * var Video = require('twilio-video');\n * // Request just the default audio track\n * Video.createLocalTracks({ audio: true }).then(function(localTracks) {\n *   return Video.connect('my-token', {\n *     name: 'my-cool-room',\n *     tracks: localTracks\n *   });\n * });\n * @example\n * var Video = require('twilio-video');\n * // Request the audio and video tracks with custom names\n * Video.createLocalTracks({\n *   audio: { name: 'microphone' },\n *   video: { name: 'camera' }\n * }).then(function(localTracks) {\n *   localTracks.forEach(function(localTrack) {\n *     console.log(localTrack.name);\n *   });\n * });\n *\n * @example\n * var Video = require('twilio-video');\n * var localTracks;\n *\n * // Pre-acquire tracks to display camera preview.\n * Video.createLocalTracks().then(function(tracks) {\n *  localTracks = tracks;\n *  var localVideoTrack = localTracks.find(track => track.kind === 'video');\n *  divContainer.appendChild(localVideoTrack.attach());\n * })\n *\n * // Later, join the Room with the pre-acquired LocalTracks.\n * Video.connect('token', {\n *   name: 'my-cool-room',\n *   tracks: localTracks\n * });\n *\n */\n\nfunction createLocalTracks(options) {\n  return __awaiter(this, void 0, void 0, function () {\n    var isAudioVideoAbsent, fullOptions, logComponentName, logLevels, log, localTrackOptions, extraLocalTrackOptions, mediaStreamConstraints, workaroundWebKitBug180748, mediaStream, mediaStreamTracks, error_1;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          isAudioVideoAbsent = !(options && ('audio' in options || 'video' in options));\n          fullOptions = __assign({\n            audio: isAudioVideoAbsent,\n            getUserMedia: getUserMedia,\n            loggerName: DEFAULT_LOGGER_NAME,\n            logLevel: DEFAULT_LOG_LEVEL,\n            LocalAudioTrack: LocalAudioTrack,\n            LocalDataTrack: LocalDataTrack,\n            LocalVideoTrack: LocalVideoTrack,\n            MediaStreamTrack: MediaStreamTrack,\n            Log: Log,\n            video: isAudioVideoAbsent\n          }, options);\n          logComponentName = \"[createLocalTracks #\" + ++createLocalTrackCalls + \"]\";\n          logLevels = buildLogLevels(fullOptions.logLevel);\n          log = new fullOptions.Log('default', logComponentName, logLevels, fullOptions.loggerName);\n          localTrackOptions = Object.assign({\n            log: log\n          }, fullOptions); // NOTE(mmalavalli): The Room \"name\" in \"options\" was being used\n          // as the LocalTrack name in asLocalTrack(). So we pass a copy of\n          // \"options\" without the \"name\".\n          // NOTE(joma): CreateLocalTracksOptions type does not really have a \"name\" property when used publicly by customers.\n          // But we are passing this property when used internally by other JS files.\n          // We can update this \"any\" type once those JS files are converted to TS.\n\n          delete localTrackOptions.name;\n\n          if (fullOptions.audio === false && fullOptions.video === false) {\n            log.info('Neither audio nor video requested, so returning empty LocalTracks');\n            return [2\n            /*return*/\n            , []];\n          }\n\n          if (fullOptions.tracks) {\n            log.info('Adding user-provided LocalTracks');\n            log.debug('LocalTracks:', fullOptions.tracks);\n            return [2\n            /*return*/\n            , fullOptions.tracks];\n          }\n\n          extraLocalTrackOptions = {\n            audio: typeof fullOptions.audio === 'object' && fullOptions.audio.name ? {\n              name: fullOptions.audio.name\n            } : {},\n            video: typeof fullOptions.video === 'object' && fullOptions.video.name ? {\n              name: fullOptions.video.name\n            } : {}\n          };\n          extraLocalTrackOptions.audio.isCreatedByCreateLocalTracks = true;\n          extraLocalTrackOptions.video.isCreatedByCreateLocalTracks = true;\n\n          if (typeof fullOptions.audio === 'object' && typeof fullOptions.audio.workaroundWebKitBug1208516 === 'boolean') {\n            extraLocalTrackOptions.audio.workaroundWebKitBug1208516 = fullOptions.audio.workaroundWebKitBug1208516;\n          }\n\n          if (typeof fullOptions.video === 'object' && typeof fullOptions.video.workaroundWebKitBug1208516 === 'boolean') {\n            extraLocalTrackOptions.video.workaroundWebKitBug1208516 = fullOptions.video.workaroundWebKitBug1208516;\n          }\n\n          if (typeof fullOptions.audio === 'object') {\n            delete fullOptions.audio.name;\n          }\n\n          if (typeof fullOptions.video === 'object') {\n            delete fullOptions.video.name;\n          }\n\n          mediaStreamConstraints = {\n            audio: fullOptions.audio,\n            video: fullOptions.video\n          };\n          workaroundWebKitBug180748 = typeof fullOptions.audio === 'object' && fullOptions.audio.workaroundWebKitBug180748;\n          _a.label = 1;\n\n        case 1:\n          _a.trys.push([1, 3,, 4]);\n\n          return [4\n          /*yield*/\n          , workaroundWebKitBug180748 ? workaround180748(log, fullOptions.getUserMedia, mediaStreamConstraints) : fullOptions.getUserMedia(mediaStreamConstraints)];\n\n        case 2:\n          mediaStream = _a.sent();\n          mediaStreamTracks = __spreadArray(__spreadArray([], __read(mediaStream.getAudioTracks())), __read(mediaStream.getVideoTracks()));\n          log.info('Call to getUserMedia successful; got MediaStreamTracks:', mediaStreamTracks);\n          return [2\n          /*return*/\n          , mediaStreamTracks.map(function (mediaStreamTrack) {\n            return asLocalTrack(mediaStreamTrack, __assign(__assign({}, extraLocalTrackOptions[mediaStreamTrack.kind]), localTrackOptions));\n          })];\n\n        case 3:\n          error_1 = _a.sent();\n          log.warn('Call to getUserMedia failed:', error_1);\n          throw error_1;\n\n        case 4:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n\nexports.createLocalTracks = createLocalTracks;","map":null,"metadata":{},"sourceType":"script"}