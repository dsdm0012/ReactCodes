{"ast":null,"code":"'use strict';\n/**\n * RTCRtpSender shim.\n * @param {MediaStreamTrack} track\n * @property {MediaStreamTrack} track\n */\n\nfunction RTCRtpSenderShim(track) {\n  Object.defineProperties(this, {\n    track: {\n      enumerable: true,\n      value: track,\n      writable: true\n    }\n  });\n} // NOTE(mmalavalli): Because of the way we will be using this shim, there\n// are a couple of use cases that will not be covered:\n//\n// /* Case 1 */\n// const sender = pc.addTrack(track);\n// assert.equal(sender.track, track);\n// pc.removeTrack(sender);\n// assert.equal(sender.track, null); /* Error */\n//\n// /* Case 2 */\n// const sender = pc.addTrack(track);\n// const senders1 = new Set(pc.getSenders());\n// assert(senders1.has(sender));\n// pc.removeTrack(track);\n// const senders2 = new Set(pc.getSenders());\n// assert(senders2.has(sender)); /* Error */\n//\n// For now, since we only use senders for passing them to RTCPeerConnection#removeTrack(),\n// we will omit handling these use cases for now, and revisit them when we start\n// using the RTCRtpSender APIs.\n\n\nmodule.exports = RTCRtpSenderShim;","map":{"version":3,"sources":["../../lib/webrtc/rtcrtpsender.js"],"names":[],"mappings":"AAAA;AAEA;;;;AAIG;;AACH,SAAS,gBAAT,CAA0B,KAA1B,EAA+B;AAC7B,EAAA,MAAM,CAAC,gBAAP,CAAwB,IAAxB,EAA8B;AAC5B,IAAA,KAAK,EAAE;AACL,MAAA,UAAU,EAAE,IADP;AAEL,MAAA,KAAK,EAAE,KAFF;AAGL,MAAA,QAAQ,EAAE;AAHL;AADqB,GAA9B;AAOD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAM,CAAC,OAAP,GAAiB,gBAAjB","sourceRoot":"","sourcesContent":["'use strict';\n/**\n * RTCRtpSender shim.\n * @param {MediaStreamTrack} track\n * @property {MediaStreamTrack} track\n */\nfunction RTCRtpSenderShim(track) {\n    Object.defineProperties(this, {\n        track: {\n            enumerable: true,\n            value: track,\n            writable: true\n        }\n    });\n}\n// NOTE(mmalavalli): Because of the way we will be using this shim, there\n// are a couple of use cases that will not be covered:\n//\n// /* Case 1 */\n// const sender = pc.addTrack(track);\n// assert.equal(sender.track, track);\n// pc.removeTrack(sender);\n// assert.equal(sender.track, null); /* Error */\n//\n// /* Case 2 */\n// const sender = pc.addTrack(track);\n// const senders1 = new Set(pc.getSenders());\n// assert(senders1.has(sender));\n// pc.removeTrack(track);\n// const senders2 = new Set(pc.getSenders());\n// assert(senders2.has(sender)); /* Error */\n//\n// For now, since we only use senders for passing them to RTCPeerConnection#removeTrack(),\n// we will omit handling these use cases for now, and revisit them when we start\n// using the RTCRtpSender APIs.\nmodule.exports = RTCRtpSenderShim;\n//# sourceMappingURL=rtcrtpsender.js.map"]},"metadata":{},"sourceType":"script"}