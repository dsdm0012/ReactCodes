{"ast":null,"code":"var _jsxFileName = \"/home/bibhu/EDRdevelopment/DevBranch/edresearchweb/src/MainApps/Dashboard/General/NoticeBoard/NoticeBoxContainer.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport classes from './NoticeBoxContainer.module.css';\nimport NoticeBox from './NoticeBox';\nimport NoticeBoardToolBar from './NoticeBoardToolBar'; //import {getdashboardnotice} from '../../../../CommonApps/AllAPICalls';\n//getuser, getnotice,getnoticebyId\n\nimport { putnoticeIddash } from '../../../../CommonApps/AllAPICalls';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction containsObject(obj, list) {\n  var i;\n\n  for (i = 0; i < list.length; i++) {\n    if (list[i].id === obj.id) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nconst NoticeBoxContainer = props => {\n  _s();\n\n  console.log(\"NoticeBox Container rendering. . .\");\n  const isMounted = useRef(false);\n  useEffect(() => {\n    isMounted.current = true;\n    props.passMountInfo(true);\n    return () => {\n      isMounted.current = false;\n      props.passMountInfo(false);\n    };\n  }, [props]);\n\n  const markAsReadHandler = noticeId => {\n    console.log(\"mark as read\", noticeId);\n    putnoticeIddash({\n      noticeId\n    });\n    window.location.reload(false);\n  };\n  /*\n  useEffect(()=>{\n  \n  \n     //getnotice({getNoticeData});\n          let noticeIdArray=[];\n  \tlet propsCourseData = props.courseData;\n  \t   propsCourseData.forEach((course, index)=>{\n                         //console.log(\"noticeobjects\",course.noticeobjects[0])\n                         course.noticeobjects.forEach((noticeId, indexI)=>{  \n  \t\t\t      // console.log('noticeId: ', noticeId)\n                               if ( noticeIdArray.indexOf(noticeId) < 0){noticeIdArray.push(noticeId)}\n  \n  \t\t       })\n  \t\t                                                    \n  \n  \n  \n  \t          }\n  \t    );   \n          \n  \n      getNoticeIds(noticeIds=>noticeIdArray);\t\n  \n   return ()=>{\n    getNoticeIds(noticeIds=>[]);\n  \n   }\n  \n  \n  },[ props.courseData]);\n  \n  \n  \n  \n  useEffect(()=>{\n  \n     noticeIds.forEach((noticeid, index)=>{\n  \n        getnoticebyId({noticeid, getNoticeData});\n  \n     });\n  \n    return ()=>{\n             getNoticeData(noticeData=>[]);\n         }\n  \n  },[noticeIds]);\n  \n  \n  */\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.noticeBoxContainer,\n    children: [/*#__PURE__*/_jsxDEV(NoticeBoardToolBar, {\n      closeNoticeBoard: props.closeNoticeBoard,\n      courseData: props.courseData,\n      socketObj: props.socketObj,\n      userData: props.userData,\n      rerender: props.rerender\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 4\n    }, this), props.dashboardNotice !== null && props.dashboardNotice.dashnotices !== null && props.dashboardNotice.dashnotices.map((notice, index) => {\n      let list = props.userData.noticeids;\n      let isRead = containsObject(notice, list);\n      let noticeId = notice.id;\n      return /*#__PURE__*/_jsxDEV(NoticeBox, {\n        read: !isRead,\n        Notice: notice,\n        markAsRead: () => markAsReadHandler(noticeId)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 18\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 1\n  }, this);\n};\n\n_s(NoticeBoxContainer, \"SkOohDVuXBk0DO6XXkvUZnCZ6So=\");\n\n_c = NoticeBoxContainer;\nexport default NoticeBoxContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"NoticeBoxContainer\");","map":{"version":3,"sources":["/home/bibhu/EDRdevelopment/DevBranch/edresearchweb/src/MainApps/Dashboard/General/NoticeBoard/NoticeBoxContainer.js"],"names":["React","classes","NoticeBox","NoticeBoardToolBar","putnoticeIddash","containsObject","obj","list","i","length","id","NoticeBoxContainer","props","console","log","isMounted","useRef","useEffect","current","passMountInfo","markAsReadHandler","noticeId","window","location","reload","noticeBoxContainer","closeNoticeBoard","courseData","socketObj","userData","rerender","dashboardNotice","dashnotices","map","notice","index","noticeids","isRead"],"mappings":"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","sourcesContent":["import React from 'react';\nimport classes from './NoticeBoxContainer.module.css';\nimport NoticeBox from './NoticeBox';\nimport NoticeBoardToolBar from './NoticeBoardToolBar';\n//import {getdashboardnotice} from '../../../../CommonApps/AllAPICalls';\n//getuser, getnotice,getnoticebyId\n\n\nimport {putnoticeIddash} from '../../../../CommonApps/AllAPICalls';\n\nfunction containsObject(obj, list) {\n\n\n    var i;\n    for (i = 0; i < list.length; i++) {\n        if (list[i].id === obj.id) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n\n\n\n\n\nconst NoticeBoxContainer =(props)=>{\n\n\n   console.log(\"NoticeBox Container rendering. . .\");\n\n\n   const isMounted = useRef(false);\n\n    useEffect(() => {\n    isMounted.current = true;\n    props.passMountInfo(true);\n    return () => {\n            isMounted.current = false\n            props.passMountInfo(false);\n    }\n   }, [props]);\n\n\n\n\n\n\n\n   const markAsReadHandler=(noticeId)=>{\n          console.log(\"mark as read\", noticeId);     \t   \n\t   putnoticeIddash({noticeId});\t  \n\t   window.location.reload(false);\n   }\n\n\n\n\n\n\n\n\n\n\n/*\nuseEffect(()=>{\n\n\n   //getnotice({getNoticeData});\n        let noticeIdArray=[];\n\tlet propsCourseData = props.courseData;\n\t   propsCourseData.forEach((course, index)=>{\n                       //console.log(\"noticeobjects\",course.noticeobjects[0])\n                       course.noticeobjects.forEach((noticeId, indexI)=>{  \n\t\t\t      // console.log('noticeId: ', noticeId)\n                             if ( noticeIdArray.indexOf(noticeId) < 0){noticeIdArray.push(noticeId)}\n\n\t\t       })\n\t\t                                                    \n\n\n\n\t          }\n\t    );   \n        \n\n    getNoticeIds(noticeIds=>noticeIdArray);\t\n\n return ()=>{\n  getNoticeIds(noticeIds=>[]);\n\n }\n\n\n},[ props.courseData]);\n\n\n\n\nuseEffect(()=>{\n\n   noticeIds.forEach((noticeid, index)=>{\n\n      getnoticebyId({noticeid, getNoticeData});\n\n   });\n\n  return ()=>{\n           getNoticeData(noticeData=>[]);\n       }\n\n},[noticeIds]);\n\n\n*/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nreturn (\n\n<div className={classes.noticeBoxContainer}>\n\n\n   <NoticeBoardToolBar closeNoticeBoard={props.closeNoticeBoard} \n\t               courseData = {props.courseData}\n\t               socketObj = {props.socketObj}\n\t               userData = {props.userData}\n\t               rerender = {props.rerender}\n\t/>\n\n\n\n   { props.dashboardNotice !==null && props.dashboardNotice.dashnotices !==null &&  props.dashboardNotice.dashnotices.map((notice, index)=>{\n\n           let list = props.userData.noticeids;\n\t   let isRead = containsObject(notice, list);\n           let noticeId = notice.id;\n          return <NoticeBox read={!isRead} \n\t                    Notice={notice} \n\t                    key={index}\n                            markAsRead={()=>markAsReadHandler(noticeId)}\n\n\t\t   />\n\n      })\n   }\n\n\n\n\n</div>\n\n);\n\n}\n\n\nexport default NoticeBoxContainer;\n"]},"metadata":{},"sourceType":"module"}