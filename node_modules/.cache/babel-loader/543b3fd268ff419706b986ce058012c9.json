{"ast":null,"code":"\"use strict\";\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n\n  return to;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.makeStat = void 0;\n/**\n * Computes min, max, average for given array.\n * @param {Array<number>} values\n * @returns {{min: number, max: number: average: number}|null}\n */\n\nfunction makeStat(values) {\n  if (values && values.length) {\n    var min = Math.min.apply(Math, __spreadArray([], __read(values)));\n    var max = Math.max.apply(Math, __spreadArray([], __read(values)));\n    var average = values.reduce(function (total, value) {\n      return total + value;\n    }, 0) / values.length;\n    return {\n      min: min,\n      max: max,\n      average: average\n    };\n  }\n\n  return null;\n}\n\nexports.makeStat = makeStat;","map":null,"metadata":{},"sourceType":"script"}