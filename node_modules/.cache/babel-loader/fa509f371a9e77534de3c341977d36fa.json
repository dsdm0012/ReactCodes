{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar StateMachine = require('../statemachine');\n\nvar NetworkQualityStats = require('../stats/networkqualitystats');\n/*\nParticipantSignaling States\n----------------------\n\n    +------------+     +-----------+     +--------------+\n    |            |     |           |     |              |\n    | connecting |---->| connected |---->| disconnected |\n    |            |     |           |     |              |\n    +------------+     +-----------+     +--------------+\n                           | ^                    ^\n                           | |  +--------------+  |\n                           | |--|              |  |\n                           |--->| reconnecting |--|\n                                |              |\n                                +--------------+\n*/\n\n\nvar states = {\n  connecting: ['connected'],\n  connected: ['disconnected', 'reconnecting'],\n  reconnecting: ['connected', 'disconnected'],\n  disconnected: []\n};\n/**\n * A {@link Participant} implementation\n * @extends StateMachine\n * @property {?string} identity\n * @property {?Participant.SID} sid\n * @property {string} state - \"connecting\", \"connected\", or \"disconnected\"\n * @property {Map<Track.ID | Track.SID, TrackSignaling>} tracks\n * @emits ParticipantSignaling#networkQualityLevelChanged\n * @emits ParticipantSignaling#trackAdded\n * @emits ParticipantSignaling#trackRemoved\n */\n\nvar ParticipantSignaling =\n/** @class */\nfunction (_super) {\n  __extends(ParticipantSignaling, _super);\n  /**\n   * Construct a {@link ParticipantSignaling}.\n   */\n\n\n  function ParticipantSignaling() {\n    var _this = _super.call(this, 'connecting', states) || this;\n\n    Object.defineProperties(_this, {\n      _identity: {\n        writable: true,\n        value: null\n      },\n      _networkQualityLevel: {\n        value: null,\n        writable: true\n      },\n      _networkQualityStats: {\n        value: null,\n        writable: true\n      },\n      _sid: {\n        writable: true,\n        value: null\n      },\n      identity: {\n        enumerable: true,\n        get: function () {\n          return this._identity;\n        }\n      },\n      sid: {\n        enumerable: true,\n        get: function () {\n          return this._sid;\n        }\n      },\n      tracks: {\n        enumerable: true,\n        value: new Map()\n      }\n    });\n    return _this;\n  }\n\n  Object.defineProperty(ParticipantSignaling.prototype, \"networkQualityLevel\", {\n    /**\n     * Get the current {@link NetworkQualityLevel}, if any.\n     * @returns {?NetworkQualityLevel} networkQualityLevel - initially null\n     */\n    get: function () {\n      return this._networkQualityLevel;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ParticipantSignaling.prototype, \"networkQualityStats\", {\n    /**\n     * Get the current {@link NetworkQualityStats}\n     * @returns {?NetworkQualityStats} networkQualityStats - initially null\n     */\n    get: function () {\n      return this._networkQualityStats;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Add the {@link TrackSignaling}, MediaStreamTrack, or\n   * {@link DataTrackSender} to the {@link ParticipantSignaling}.\n   * @param {TrackSignaling|DataTrackSender|MediaTrackSender} track\n   * @returns {this}\n   * @fires ParticipantSignaling#trackAdded\n   */\n\n  ParticipantSignaling.prototype.addTrack = function (track) {\n    this.tracks.set(track.id || track.sid, track);\n    this.emit('trackAdded', track);\n    return this;\n  };\n  /**\n   * Disconnect the {@link ParticipantSignaling}.\n   * @returns {boolean}\n   */\n\n\n  ParticipantSignaling.prototype.disconnect = function () {\n    if (this.state !== 'disconnected') {\n      this.preempt('disconnected');\n      return true;\n    }\n\n    return false;\n  };\n  /**\n   * Remove the {@link TrackSignaling}, MediaStreamTrack, or\n   * {@link DataTrackSender} from the {@link ParticipantSignaling}.\n   * @param {TrackSignaling|DataTrackSender|MediaTrackSender} track\n   * @returns {?TrackSignaling}\n   * @fires ParticipantSignaling#trackRemoved\n   */\n\n\n  ParticipantSignaling.prototype.removeTrack = function (track) {\n    var signaling = this.tracks.get(track.id || track.sid);\n    this.tracks.delete(track.id || track.sid);\n\n    if (signaling) {\n      this.emit('trackRemoved', track);\n    }\n\n    return signaling || null;\n  };\n  /**\n   * @param {NetworkQualityLevel} networkQualityLevel\n   * @param {?NetworkQualityLevels} [networkQualityLevels=null]\n   * @returns {void}\n   */\n\n\n  ParticipantSignaling.prototype.setNetworkQualityLevel = function (networkQualityLevel, networkQualityLevels) {\n    if (this._networkQualityLevel !== networkQualityLevel) {\n      this._networkQualityLevel = networkQualityLevel;\n      this._networkQualityStats = networkQualityLevels && (networkQualityLevels.audio || networkQualityLevels.video) ? new NetworkQualityStats(networkQualityLevels) : null;\n      this.emit('networkQualityLevelChanged');\n    }\n  };\n  /**\n   * Connect the {@link ParticipantSignaling}.\n   * @param {Participant.SID} sid\n   * @param {string} identity\n   * @returns {boolean}\n   */\n\n\n  ParticipantSignaling.prototype.connect = function (sid, identity) {\n    if (this.state === 'connecting' || this.state === 'reconnecting') {\n      if (!this._sid) {\n        this._sid = sid;\n      }\n\n      if (!this._identity) {\n        this._identity = identity;\n      }\n\n      this.preempt('connected');\n      return true;\n    }\n\n    return false;\n  };\n  /**\n   * Transition to \"reconnecting\" state.\n   * @returns {boolean}\n   */\n\n\n  ParticipantSignaling.prototype.reconnecting = function () {\n    if (this.state === 'connecting' || this.state === 'connected') {\n      this.preempt('reconnecting');\n      return true;\n    }\n\n    return false;\n  };\n\n  return ParticipantSignaling;\n}(StateMachine);\n/**\n * @event ParticipantSignaling#event:networkQualityLevelChanged\n */\n\n/**\n * {@link TrackSignaling} was added to the {@link ParticipantSignaling}.\n * @event ParticipantSignaling#trackAdded\n * @param {TrackSignaling} track\n */\n\n/**\n * {@link TrackSignaling} was removed from the {@link ParticipantSignaling}.\n * @event ParticipantSignaling#trackRemoved\n * @param {TrackSignaling} track\n */\n\n\nmodule.exports = ParticipantSignaling;","map":null,"metadata":{},"sourceType":"script"}