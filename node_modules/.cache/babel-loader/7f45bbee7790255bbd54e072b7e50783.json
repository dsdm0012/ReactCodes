{"ast":null,"code":"var _jsxFileName = \"/home/bibhu/EDRdevelopment/DevBranch/edresearchweb/src/allAppsStudent/Messages/VATChat/ChatWindow/ChatWindow.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport classes from \"./ChatWindow.module.css\";\nimport ChatUserInfoTopBar from \"./ChatUserInfoTopBar\";\nimport ChatScreen from \"./ChatScreen\";\nimport ChatInput from \"./ChatInput\";\nimport { w3cwebsocket as W3CWebSocket } from 'websocket';\nimport { Picker } from \"emoji-mart\";\nimport \"emoji-mart/css/emoji-mart.css\";\nimport Login from '../../../../CommonApps/Login';\nimport axiosInstance from '../../../../axios';\nimport { MdSend } from 'react-icons/md';\nimport { client } from \"./WebSocket\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChatWindow = props => {\n  _s();\n\n  console.log('NNNN: ', props.clickedUserId);\n  console.log('NNNN: ', props.data.id);\n  const [loggedIn, setLoggedIn] = useState(false);\n  useEffect(() => {\n    axiosInstance.get().then(res => {\n      setLoggedIn(loggedIn => true); // console.log(res.data);\n    });\n  }, []);\n  let roomname = 'class';\n  const mountedRef = useRef(true);\n  const textInput = useRef();\n\n  const clearInput = () => textInput.current.value = \"\";\n\n  const initialFormData = Object.freeze({\n    comment: \"\"\n  });\n  const [formData, updateFormData] = useState(initialFormData);\n\n  const handleChange = e => {\n    updateFormData({ ...formData,\n      [e.target.name]: e.target.value.trim()\n    });\n  };\n\n  const [state, setState] = useState({\n    messages: ['hello'],\n    value: ''\n  });\n\n  const handleSubmit = e => {\n    if (!loggedIn) {\n      return /*#__PURE__*/_jsxDEV(Login, {\n        setLoggedIn: setLoggedIn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 29\n      }, this);\n    }\n\n    if (typeof client !== 'undefined') {\n      if (client.readyState === client.CLOSED) {\n        //console.log(\"websocket CLOSED\");\n        window.location.reload();\n      }\n\n      if (formData.comment !== '') {\n        client.send(JSON.stringify({\n          type: \"message\",\n          message: formData.comment\n        }));\n      }\n\n      clearInput();\n      state.value = '';\n      formData.comment = '';\n    }\n\n    e.preventDefault();\n  };\n\n  useEffect(() => {\n    client.onopen = () => {//console.log(\"web socket client connected\");\n    };\n\n    client.onmessage = message => {\n      const dataFromServer = JSON.parse(message.data); //console.log('got reply! ', dataFromServer.message);\n\n      if (dataFromServer !== \"\" && mountedRef.current) {\n        setState(state => ({\n          messages: [...state.messages, dataFromServer.message],\n          value: 'jai ganesh'\n        }));\n      }\n    };\n\n    return () => {\n      mountedRef.current = false;\n      client.close();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.chatWindow,\n    children: [/*#__PURE__*/_jsxDEV(ChatUserInfoTopBar, {\n      clickedUserId: props.clickedUserId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(ChatScreen, {\n      messages: state.messages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.chatInput,\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        className: classes.addCommentForm,\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.chatInput,\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            ref: textInput,\n            type: \"text\",\n            onChange: handleChange,\n            name: \"comment\",\n            className: classes.inputTextBox,\n            placeholder: \"Write your comment\",\n            defaultValue: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 27\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: classes.submit_button,\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: [/*#__PURE__*/_jsxDEV(MdSend, {\n              className: classes.sendButtonIcon\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 80\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 77\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 18\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 6\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 1\n  }, this);\n};\n\n_s(ChatWindow, \"rPfr9tadzW63kIWSfhniKgTVjEc=\");\n\n_c = ChatWindow;\nexport default ChatWindow;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatWindow\");","map":{"version":3,"sources":["/home/bibhu/EDRdevelopment/DevBranch/edresearchweb/src/allAppsStudent/Messages/VATChat/ChatWindow/ChatWindow.js"],"names":["React","useState","useEffect","useRef","classes","ChatUserInfoTopBar","ChatScreen","ChatInput","w3cwebsocket","W3CWebSocket","Picker","Login","axiosInstance","MdSend","client","ChatWindow","props","console","log","clickedUserId","data","id","loggedIn","setLoggedIn","get","then","res","roomname","mountedRef","textInput","clearInput","current","value","initialFormData","Object","freeze","comment","formData","updateFormData","handleChange","e","target","name","trim","state","setState","messages","handleSubmit","readyState","CLOSED","window","location","reload","send","JSON","stringify","type","message","preventDefault","onopen","onmessage","dataFromServer","parse","close","chatWindow","chatInput","addCommentForm","inputTextBox","submit_button","sendButtonIcon"],"mappings":"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","sourcesContent":["import React,{useState,useEffect,useRef} from \"react\";\nimport classes from \"./ChatWindow.module.css\"\nimport ChatUserInfoTopBar from \"./ChatUserInfoTopBar\";\nimport ChatScreen from \"./ChatScreen\";\nimport ChatInput from \"./ChatInput\";\nimport {w3cwebsocket as W3CWebSocket } from 'websocket';\nimport { Picker } from \"emoji-mart\";\nimport \"emoji-mart/css/emoji-mart.css\";\nimport Login from '../../../../CommonApps/Login';\nimport axiosInstance from '../../../../axios';\nimport {MdSend} from 'react-icons/md';\n\n\nimport {client} from \"./WebSocket\";\n\n\n\nconst ChatWindow = (props) =>{\n\n\n\n  console.log('NNNN: ',props.clickedUserId);\n  console.log('NNNN: ',props.data.id);\t\n\n\n\n  const [loggedIn, setLoggedIn] = useState(false);\n\n  useEffect( ()=>{\n  axiosInstance.get().then((res) => {\n                        setLoggedIn(loggedIn=>true);\n                       // console.log(res.data);\n                });\n             },[]);\n\n\n\n\n  let roomname='class'\n\n\n  const mountedRef = useRef(true);\n  const textInput = useRef();\n\n  const clearInput = () => (textInput.current.value = \"\");\t\n\n\n  const initialFormData = Object.freeze(\n\n     {\n         comment: \"\",\n     }\n  );\n\n\n\n  const [formData, updateFormData] = useState(initialFormData)\n\n  const handleChange = (e) => {\n                updateFormData({\n                        ...formData,\n                        [e.target.name]: e.target.value.trim(),\n                });\n        };\n\n\n\n\n\n  const [state, setState] = useState(\n\n    {\n       messages: ['hello'],\n       value: '',\n    }\n );\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n  const handleSubmit = (e) => {\n\n\n     if (!loggedIn){ return <Login setLoggedIn={setLoggedIn}/>}\n\n    if (typeof client !== 'undefined') {\t  \n\n    if (client.readyState === client.CLOSED){\n       //console.log(\"websocket CLOSED\");\n       window.location.reload();\t    \n    }\n\n\n\n    if(formData.comment !==''){\n      client.send(JSON.stringify({\n      type: \"message\",\n      message: formData.comment,\n    }))\n       }\n\n\n    clearInput();\t  \n    state.value = '';\n    formData.comment='';\t    \n    \t \n    }\n\n    e.preventDefault();\n  }\n\n\n\n\n\n\nuseEffect(()=>{\n\n\n    client.onopen=()=>{\n    //console.log(\"web socket client connected\");\n   };\n\n\n    client.onmessage = (message) => {\n    const dataFromServer = JSON.parse(message.data);\n    //console.log('got reply! ', dataFromServer.message);\n\n    if (dataFromServer !== \"\"  && mountedRef.current){\n   \n                     setState((state)=>({     \n                              messages: [...state.messages,dataFromServer.message],\n                              value: 'jai ganesh',\n                                        }));\n\n                              }}\n\n    return () => { \n     mountedRef.current = false;\n     client.close();\t     \n    }\n\n\t         \n},[]);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nreturn(\n\n<div className={classes.chatWindow}>\n\n<ChatUserInfoTopBar clickedUserId={props.clickedUserId} />\n\n<ChatScreen messages={state.messages}/>\n\t\n<div className={classes.chatInput}>\n\n\n{/*e => {  setState({ value: e.target.value });\n                              }*/}\n\n     <form className={classes.addCommentForm} onSubmit={handleSubmit}>\n                   {/*\n                   <div className={classes.inputTextBox} >\n                          <textarea\n                             type=\"text\"\n                             name=\"comment\"\n\t                     value={state.value}\n                             className={classes.inputText_field}\n                             placeholder=\"Write your comment\"\n\t                     onChange={e => {  setState({ value: e.target.value });\n                              }}\n\n                          />\n                    </div>\n                    */}\n\n\n                  <div className={classes.chatInput} >\n                          <input\n                             ref={textInput}\n                             type=\"text\"\n                             onChange={handleChange}\n                             name=\"comment\"\n                             className={classes.inputTextBox}\n                             placeholder=\"Write your comment\"\n                             defaultValue=\"\"\n                          />\n                  </div>\n\n                 \n                 <button type=\"submit\"  className= {classes.submit_button} ><b><MdSend className={classes.sendButtonIcon}/> </b> </button>\n                  \n\t</form>\n\n\t{/*\n   <Picker onSelect={addEmoji} />\n        */}\n\n</div>\n\n\n\n\t\n</div>\n\n);\n\n}\n\nexport default ChatWindow;\n"]},"metadata":{},"sourceType":"module"}