{"ast":null,"code":"var _jsxFileName = \"/home/bibhu/EDRdevelopment/DevBranch/edresearchweb/src/MainApps/Messages/VATChat/ChatWindow/ChatScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from \"react\";\nimport classes from \"./ChatScreen.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChatScreen = props => {\n  _s();\n\n  const messages = props.messages;\n  const messagesEndRef = useRef(null);\n\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const commentTime = ({\n    datetime\n  }) => {\n    let Datetime = datetime;\n    var Datetime_ = new Date('6/29/2011 4:52:48 PM UTC');\n    console.log(\"Datetime: \", Datetime);\n    let date = datetime.split(\"T\").at(0);\n    let timehour = datetime.split(\"T\").at(1).split(\":\").at(0);\n    let timemin = datetime.split(\"T\").at(1).split(\":\").at(1);\n    let ampm;\n\n    if (timehour < 12) {\n      ampm = \"am\";\n    }\n\n    if (timehour > 12) {\n      timehour = timehour - 12;\n      ampm = \"pm\";\n    }\n\n    let time = String(timehour) + \":\" + String(timemin) + String(ampm);\n    return time;\n  };\n\n  const currentTime = () => {\n    var now = new Date();\n    let timeInfo = String(now); //\"Sun Jul 24 2022 00:23:04 GMT-0700 (Pacific Daylight Time)\";\n    //console.log(\"Now time : \", ttime.split(\" \").at(0));\n\n    let time = timeInfo.split(\" \").at(4);\n    let timehour = time.split(\":\").at(0);\n    let timemin = time.split(\":\").at(1);\n    let ampm;\n\n    if (timehour < 12) {\n      ampm = \"am\";\n    }\n\n    if (timehour > 12) {\n      timehour = timehour - 12;\n      ampm = \"pm\";\n    }\n\n    let finaltime = String(timehour) + \":\" + String(timemin) + String(ampm);\n    return finaltime;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.chatScreen,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.dummyDiv1,\n      children: \"  Bibhuprasad   \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 6\n    }, this), props.commentObj.map((comment, index) => {\n      let datetime = comment.commenttime;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.comment,\n        children: [comment.commenter === props.currentUser && /*#__PURE__*/_jsxDEV(\"i\", {\n          className: classes.commentText,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\" \", comment.commenttext]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: classes.chatTime,\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: classes.timeText,\n              children: [\"  \", commentTime({\n                datetime\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 12\n        }, this), comment.commenter !== props.currentUser && /*#__PURE__*/_jsxDEV(\"i\", {\n          className: classes.commentText,\n          style: {\n            backgroundColor: 'white',\n            float: 'left',\n            marginLeft: '100px',\n            boxShadow: 'rgba(99, 99, 99, 0.2) 0px 2px 8px 0px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\" \", comment.commenttext]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 30\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: classes.chatTime,\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: classes.timeText,\n              children: [\"  \", commentTime({\n                datetime\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 34\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 30\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 24\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 23\n      }, this);\n    }), messages.map((message, index) => {\n      let allMsg = message.split(\" \");\n      let userId = allMsg[allMsg.length - 2];\n      let fullMsg = allMsg;\n      let Msg1 = fullMsg.splice(allMsg.length - 1, 1);\n      let Msg2 = fullMsg.splice(allMsg.length - 1, 1); //let displayMsg1 = allMsg.pop();\n      //let displayMsg2 = allMsg.pop(); \n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.comment,\n        children: [Number(userId) === props.currentUser && /*#__PURE__*/_jsxDEV(\"i\", {\n          className: classes.commentText,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\" \", fullMsg.join(\" \")]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 31\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: classes.chatTime,\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: classes.timeText,\n              children: [\"  \", currentTime()]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 34\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 31\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 27\n        }, this), Number(userId) !== props.currentUser && /*#__PURE__*/_jsxDEV(\"i\", {\n          className: classes.commentText,\n          style: {\n            backgroundColor: 'white',\n            float: 'left',\n            marginLeft: '100px',\n            boxShadow: 'rgba(99, 99, 99, 0.2) 0px 2px 8px 0px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\" \", fullMsg.join(\" \")]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 30\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: classes.chatTime,\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: classes.timeText,\n              children: [\"  \", currentTime()]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 34\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 30\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 27\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 23\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.dummyDiv,\n      ref: messagesEndRef,\n      children: \"   \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 6\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 1\n  }, this);\n};\n\n_s(ChatScreen, \"0epSoi03NVSoD0I0FiLK4iVNXOA=\");\n\n_c = ChatScreen;\nexport default ChatScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatScreen\");","map":{"version":3,"sources":["/home/bibhu/EDRdevelopment/DevBranch/edresearchweb/src/MainApps/Messages/VATChat/ChatWindow/ChatScreen.js"],"names":["React","useRef","useEffect","classes","ChatScreen","props","messages","messagesEndRef","scrollToBottom","current","scrollIntoView","behavior","commentTime","datetime","Datetime","Datetime_","Date","console","log","date","split","at","timehour","timemin","ampm","time","String","currentTime","now","timeInfo","finaltime","chatScreen","dummyDiv1","commentObj","map","comment","index","commenttime","commenter","currentUser","commentText","commenttext","chatTime","timeText","backgroundColor","float","marginLeft","boxShadow","message","allMsg","userId","length","fullMsg","Msg1","splice","Msg2","Number","join","dummyDiv"],"mappings":"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","sourcesContent":["import React,{useRef,useEffect} from \"react\";\nimport classes from \"./ChatScreen.module.css\";\n\n\nconst ChatScreen=(props)=>{\n\n\nconst messages=props.messages;\n\n    const messagesEndRef = useRef(null);\n\n    const scrollToBottom = () => {\n       messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" })\n    }\n\n\n\n    useEffect(() => {\n      scrollToBottom();\n    }, [messages]);\n\n\n   const commentTime=({datetime})=>{\n     let Datetime=datetime;\n\n     var Datetime_ = new Date('6/29/2011 4:52:48 PM UTC');\n\n     console.log(\"Datetime: \", Datetime);\n\n     let date= datetime.split(\"T\").at(0);\n     let timehour=datetime.split(\"T\").at(1).split(\":\").at(0);\t   \n     let timemin=datetime.split(\"T\").at(1).split(\":\").at(1);\n     let ampm;\n     if(timehour < 12){\n      ampm=\"am\";\n     }\t   \n     if(timehour > 12){\n       timehour=timehour-12;\n       ampm=\"pm\"\t     \n     }\n\n     let time=String(timehour)+\":\"+String(timemin)+String(ampm);\n     return time;\n\n   }\n\n   const currentTime=()=>{\n   var now = new Date();\n\n   let timeInfo=String(now);\n   //\"Sun Jul 24 2022 00:23:04 GMT-0700 (Pacific Daylight Time)\";\n\n   //console.log(\"Now time : \", ttime.split(\" \").at(0));\n   \n   let time=timeInfo.split(\" \").at(4);\n   let timehour = time.split(\":\").at(0);\n   let timemin = time.split(\":\").at(1);\t\n   let ampm;\n   if(timehour < 12){\n      ampm=\"am\";\n     }\n     if(timehour > 12){\n       timehour=timehour-12;\n       ampm=\"pm\"\n     }\n\n     let finaltime=String(timehour)+\":\"+String(timemin)+String(ampm);\n     return finaltime;\t   \n   \n\n   }\t\n\n\n\n\n\n\n\n\n\n\n\nreturn(\n\n<div className={classes.chatScreen}>\n\n\n     <div className={classes.dummyDiv1}>  Bibhuprasad   </div>\n\n\n      {props.commentObj.map((comment,index)=>{\n\n               let datetime=comment.commenttime;\n\n               return <div  key={index} className={classes.comment} >  \n\t\t      \n\t\t      {comment.commenter === props.currentUser &&\n\t\t         <i className={classes.commentText}>\n\t\t\t     <span> {comment.commenttext}</span>\n\t\t\t     <span className={classes.chatTime}> \n\t\t\t         <span className={classes.timeText}>  {commentTime({datetime})}</span>\n\t\t\t     </span>\n\t\t\t</i> \n                      }\n\n                      {comment.commenter !== props.currentUser &&\n\n                       <i className={classes.commentText} style={{backgroundColor: 'white', float: 'left',marginLeft: '100px',boxShadow: 'rgba(99, 99, 99, 0.2) 0px 2px 8px 0px'}}>\n\n\t\t\t\t     \n\n                             <span> {comment.commenttext}</span>\n                             <span className={classes.chatTime}>\n                                 <span className={classes.timeText}>  {commentTime({datetime})}</span>\n                             </span>\n\n\n\n\t\t       </i>\n\n                      }\n\n\t\t      </div>\n                \n\n\n\n           }\n\n        )}\n\n\n\n\n\n\n         { messages.map((message,index)=>{\n\n               let allMsg = message.split(\" \");\n\t\t\n\n\t       let userId = allMsg[allMsg.length-2];\t\n\n               let fullMsg=allMsg;\n\n               let Msg1 = fullMsg.splice(allMsg.length-1, 1);\n\t       let Msg2 = fullMsg.splice(allMsg.length-1, 1);\t \n\n\t       //let displayMsg1 = allMsg.pop();\n\t       //let displayMsg2 = allMsg.pop(); \n\n               return <div key={index} className={classes.comment}>   \n\n\n                     { Number(userId) === props.currentUser &&\n\n                          <i className={classes.commentText}>  \n\t\t\t     \n                              <span> {fullMsg.join(\" \")}</span>\n                              <span className={classes.chatTime}>\n                                 <span className={classes.timeText}>  {currentTime()}</span>\n                              </span>\n\n\n\t\t\t  </i>\n\n                     }\n\n\n                     { Number(userId) !== props.currentUser &&\n\n                          <i className={classes.commentText} style={{backgroundColor: 'white', float: 'left',marginLeft: '100px',boxShadow: 'rgba(99, 99, 99, 0.2) 0px 2px 8px 0px'}}>  \n\t\t\t\t      \n\n                             <span> {fullMsg.join(\" \")}</span>\n                             <span className={classes.chatTime}>\n                                 <span className={classes.timeText}>  {currentTime()}</span>\n                             </span>\n\n\n\n\n\n\n\n\t\t\t   </i>\n\n                     }\n\n\n\n\n\n\n\t\t      </div>\n\n           }\n\n        ) \n      } \n   \n\n\n     <div className={classes.dummyDiv} ref={messagesEndRef}>   </div>\t\n\n\n\n\n\n\n\n\n\n</div>\t\n);\n\n\n}\n\n\nexport default ChatScreen;\n"]},"metadata":{},"sourceType":"module"}