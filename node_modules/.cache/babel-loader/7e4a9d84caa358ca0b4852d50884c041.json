{"ast":null,"code":"/* eslint callback-return:0 */\n'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar MediaSignaling = require('./mediasignaling');\n\nvar Timeout = require('../../util/timeout');\n\nvar isDeepEqual = require('../../util').isDeepEqual;\n\nvar RENDER_HINT_RESPONSE_TIME_MS = 2000; // time to wait for server response (before resending all hints.)\n\nvar messageId = 1;\n\nvar RenderHintsSignaling =\n/** @class */\nfunction (_super) {\n  __extends(RenderHintsSignaling, _super);\n  /**\n   * Construct a {@link RenderHintsSignaling}.\n   */\n\n\n  function RenderHintsSignaling(getReceiver, options) {\n    var _this = _super.call(this, getReceiver, 'render_hints', options) || this;\n\n    Object.defineProperties(_this, {\n      _trackSidsToRenderHints: {\n        value: new Map()\n      },\n      _responseTimer: {\n        value: new Timeout(function () {\n          _this._sendAllHints(); // once timer fires, for next round double the delay.\n\n\n          _this._responseTimer.setDelay(_this._responseTimer.delay * 2);\n        }, RENDER_HINT_RESPONSE_TIME_MS, false)\n      }\n    });\n\n    _this.on('ready', function (transport) {\n      transport.on('message', function (message) {\n        _this._log.debug('Incoming: ', message);\n\n        switch (message.type) {\n          case 'render_hints':\n            _this._processHintResults(message && message.subscriber && message.subscriber.hints || []);\n\n            break;\n\n          default:\n            _this._log.warn('Unknown message type: ', message.type);\n\n            break;\n        }\n      }); // NOTE(mpatwardhan): When transport is set (either 1st time of after vms failover)\n      // resend all track states.\n\n      _this._sendAllHints();\n    });\n\n    return _this;\n  }\n\n  RenderHintsSignaling.prototype._sendAllHints = function () {\n    var _this = this; // to force sending all hints simply mark all tracks as dirty.\n\n\n    Array.from(this._trackSidsToRenderHints.keys()).forEach(function (trackSid) {\n      var trackState = _this._trackSidsToRenderHints.get(trackSid);\n\n      if (trackState.renderDimensions) {\n        trackState.isDimensionDirty = true;\n      }\n\n      if ('enabled' in trackState) {\n        trackState.isEnabledDirty = true;\n      }\n    });\n\n    this._sendHints();\n  };\n\n  RenderHintsSignaling.prototype._processHintResults = function (hintResults) {\n    var _this = this;\n\n    this._responseTimer.clear();\n\n    this._responseTimer.setDelay(RENDER_HINT_RESPONSE_TIME_MS);\n\n    hintResults.forEach(function (hintResult) {\n      if (hintResult.result !== 'OK') {\n        _this._log.debug('Server error processing hint:', hintResult);\n      }\n    });\n\n    this._sendHints();\n  };\n\n  RenderHintsSignaling.prototype._sendHints = function () {\n    var _this = this;\n\n    if (!this._transport || this._responseTimer.isSet) {\n      return;\n    }\n\n    var hints = [];\n    Array.from(this._trackSidsToRenderHints.keys()).forEach(function (trackSid) {\n      var trackState = _this._trackSidsToRenderHints.get(trackSid);\n\n      if (trackState.isEnabledDirty || trackState.isDimensionDirty) {\n        var mspHint = {\n          'track': trackSid\n        };\n\n        if (trackState.isEnabledDirty) {\n          mspHint.enabled = trackState.enabled;\n          trackState.isEnabledDirty = false;\n        }\n\n        if (trackState.isDimensionDirty) {\n          // eslint-disable-next-line camelcase\n          mspHint.render_dimensions = trackState.renderDimensions;\n          trackState.isDimensionDirty = false;\n        }\n\n        hints.push(mspHint);\n      }\n    });\n\n    if (hints.length > 0) {\n      var payLoad = {\n        type: 'render_hints',\n        subscriber: {\n          id: messageId++,\n          hints: hints\n        }\n      };\n\n      this._log.debug('Outgoing: ', payLoad);\n\n      this._transport.publish(payLoad);\n\n      this._responseTimer.start();\n    }\n  };\n  /**\n   * @param {Track.SID} trackSid\n   * @param {ClientRenderHint} renderHint\n   */\n\n\n  RenderHintsSignaling.prototype.setTrackHint = function (trackSid, renderHint) {\n    var trackState = this._trackSidsToRenderHints.get(trackSid) || {\n      isEnabledDirty: false,\n      isDimensionDirty: false\n    };\n\n    if ('enabled' in renderHint && trackState.enabled !== renderHint.enabled) {\n      trackState.enabled = !!renderHint.enabled;\n      trackState.isEnabledDirty = true;\n    }\n\n    if (renderHint.renderDimensions && !isDeepEqual(renderHint.renderDimensions, trackState.renderDimensions)) {\n      // eslint-disable-next-line camelcase\n      trackState.renderDimensions = renderHint.renderDimensions;\n      trackState.isDimensionDirty = true;\n    }\n\n    this._trackSidsToRenderHints.set(trackSid, trackState);\n\n    this._sendHints();\n  };\n  /**\n   * must be called when track is unsubscribed.\n   * @param {Track.SID} trackSid\n   */\n\n\n  RenderHintsSignaling.prototype.clearTrackHint = function (trackSid) {\n    this._trackSidsToRenderHints.delete(trackSid);\n  };\n\n  return RenderHintsSignaling;\n}(MediaSignaling);\n\nmodule.exports = RenderHintsSignaling;","map":null,"metadata":{},"sourceType":"script"}