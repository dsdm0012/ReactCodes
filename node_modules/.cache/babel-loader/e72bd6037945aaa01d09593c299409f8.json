{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar DEFAULT_VIDEO_PROCESSOR_STATS_INTERVAL_MS = require('../../util/constants').DEFAULT_VIDEO_PROCESSOR_STATS_INTERVAL_MS;\n/**\n * VideoProcessorEventObserver listens to {@link VideoProcessor} related events\n * and re-emits them as a generic event with some additional information.\n * @extends EventEmitter\n * @emits VideoProcessorEventObserver#event\n */\n\n\nvar VideoProcessorEventObserver =\n/** @class */\nfunction (_super) {\n  __extends(VideoProcessorEventObserver, _super);\n  /**\n   * Constructor.\n   * @param {Log} log\n   */\n\n\n  function VideoProcessorEventObserver(log) {\n    var _this = _super.call(this) || this;\n\n    Object.defineProperties(_this, {\n      _lastStatsSaveTime: {\n        value: null,\n        writable: true\n      },\n      _lastStatsPublishTime: {\n        value: null,\n        writable: true\n      },\n      _log: {\n        value: log\n      },\n      _processorInfo: {\n        value: null,\n        writable: true\n      },\n      _stats: {\n        value: null,\n        writable: true\n      }\n    });\n\n    _this.on('add', function (info) {\n      _this._lastStatsSaveTime = Date.now();\n      _this._lastStatsPublishTime = Date.now();\n      _this._processorInfo = info;\n      _this._stats = [];\n\n      _this._reemitEvent('add', _this._getEventData());\n    });\n\n    _this.on('remove', function () {\n      var data = _this._getEventData();\n\n      _this._lastStatsSaveTime = null;\n      _this._lastStatsPublishTime = null;\n      _this._processorInfo = null;\n      _this._stats = null;\n\n      _this._reemitEvent('remove', data);\n    });\n\n    _this.on('start', function () {\n      _this._reemitEvent('start', _this._getEventData());\n    });\n\n    _this.on('stop', function (message) {\n      _this._reemitEvent('stop', Object.assign({\n        message: message\n      }, _this._getEventData()));\n    });\n\n    _this.on('stats', function () {\n      return _this._maybeEmitStats();\n    });\n\n    return _this;\n  }\n  /**\n   * @private\n   */\n\n\n  VideoProcessorEventObserver.prototype._getEventData = function () {\n    if (!this._processorInfo) {\n      return {};\n    }\n\n    var _a = this._processorInfo,\n        processor = _a.processor,\n        captureHeight = _a.captureHeight,\n        captureWidth = _a.captureWidth,\n        inputFrameRate = _a.inputFrameRate,\n        isRemoteVideoTrack = _a.isRemoteVideoTrack;\n    var data = {\n      captureHeight: captureHeight,\n      captureWidth: captureWidth,\n      inputFrameRate: inputFrameRate,\n      isRemoteVideoTrack: isRemoteVideoTrack\n    };\n    data.name = processor._name || 'VideoProcessor';\n    ['assetsPath', 'blurFilterRadius', 'fitType', 'isSimdEnabled', 'maskBlurRadius', 'version'].forEach(function (prop) {\n      var val = processor[\"_\" + prop];\n\n      if (typeof val !== 'undefined') {\n        data[prop] = val;\n      }\n    });\n    Object.keys(data).forEach(function (prop) {\n      var val = data[prop];\n\n      if (typeof val === 'boolean') {\n        data[prop] = val ? 'true' : 'false';\n      }\n    });\n    return data;\n  };\n  /**\n   * Save stats every second. If a specific time interval has elapsed,\n   * the stats event will be emitted\n   * @private\n   */\n\n\n  VideoProcessorEventObserver.prototype._maybeEmitStats = function () {\n    if (!this._stats || !this._processorInfo) {\n      return;\n    }\n\n    var benchmark = this._processorInfo.processor._benchmark;\n\n    if (!benchmark) {\n      return;\n    }\n\n    var now = Date.now();\n\n    if (now - this._lastStatsSaveTime < 1000) {\n      return;\n    }\n\n    var entry = {\n      outputFrameRate: benchmark.getRate('totalProcessingDelay')\n    };\n    ['captureFrameDelay', 'imageCompositionDelay', 'inputImageResizeDelay', 'processFrameDelay', 'segmentationDelay'].forEach(function (name) {\n      entry[name] = benchmark.getAverageDelay(name);\n    });\n    this._lastStatsSaveTime = now;\n\n    this._stats.push(entry);\n\n    if (now - this._lastStatsPublishTime < DEFAULT_VIDEO_PROCESSOR_STATS_INTERVAL_MS) {\n      return;\n    }\n\n    this._lastStatsPublishTime = now;\n\n    var stats = this._stats.splice(0);\n\n    var averages = stats.reduce(function (averages, current, n) {\n      Object.keys(entry).forEach(function (name) {\n        if (!averages[name]) {\n          averages[name] = 0;\n        }\n\n        averages[name] = (averages[name] * n + current[name]) / (n + 1);\n      });\n      return averages;\n    }, {});\n    Object.keys(averages).forEach(function (name) {\n      averages[name] = parseFloat(averages[name].toFixed(2));\n    });\n\n    this._reemitEvent('stats', Object.assign({}, averages, this._getEventData()));\n  };\n  /**\n   * @private\n   */\n\n\n  VideoProcessorEventObserver.prototype._reemitEvent = function (name, data) {\n    this._log.debug(\"VideoProcessor:\" + name, data);\n\n    this.emit('event', {\n      name: name,\n      data: data\n    });\n  };\n\n  return VideoProcessorEventObserver;\n}(EventEmitter);\n\nmodule.exports = VideoProcessorEventObserver;","map":null,"metadata":{},"sourceType":"script"}