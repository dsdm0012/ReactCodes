{"ast":null,"code":"var _jsxFileName = \"/home/bibhu/EDRdevelopment/DevBranch/edresearchweb/src/allAppsStudent/Messages/VATChat/ChatWindow/ChatWindowTest.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport classes from \"./ChatWindow.module.css\";\nimport ChatUserInfoTopBar from \"./ChatUserInfoTopBar\";\nimport ChatScreen from \"./ChatScreen\";\nimport ChatInput from \"./ChatInput\";\nimport { w3cwebsocket as W3CWebSocket } from 'websocket';\nimport { Picker } from \"emoji-mart\";\nimport \"emoji-mart/css/emoji-mart.css\";\nimport Login from '../../../../CommonApps/Login';\nimport axiosInstance from '../../../../axios';\nimport { MdSend } from 'react-icons/md';\nimport { postchatcomment, getchatcomments } from '../../../../CommonApps/AllAPICalls';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Connect() {\n  let client;\n  let messageListeners = [];\n  let isConnected = false;\n  let componentMounted = false;\n  let reconnectOnClose = true;\n  let stateChangeListeners = [];\n\n  function mountInfo(value) {\n    componentMounted = value;\n  }\n\n  function on(fn) {\n    messageListeners.push(fn);\n  }\n\n  function off(fn) {\n    messageListeners = messageListeners.filter(l => l !== fn);\n  }\n\n  function onStateChange(fn) {\n    stateChangeListeners.push(fn);\n    return () => {\n      stateChangeListeners = stateChangeListeners.filter(l => l !== fn);\n    };\n  }\n\n  function start() {\n    client = new W3CWebSocket('ws://127.0.0.1:8000/ws/chat/class/'); //const close = client.close;\n    //client.close = () => {\n    //   reconnectOnClose = false;\n    //  close.call(client);\n    //}\n    // if(client.readyState === client.CLOSED ){\n    //   setTimeout(start, 5000);\n    //}\n\n    client.onclose = () => {\n      isConnected = false;\n      stateChangeListeners.forEach(fn => fn(false));\n      console.log('time 1');\n\n      if (componentMounted) {\n        setTimeout(start, 5000);\n      }\n\n      console.log('time 2');\n    };\n\n    client.onopen = () => {\n      isConnected = true;\n      stateChangeListeners.forEach(fn => fn(true));\n    };\n\n    client.onmessage = event => {\n      const dataFromServer = JSON.parse(event.data);\n      messageListeners.forEach(fn => fn(dataFromServer.message));\n    };\n  }\n\n  start();\n  return {\n    on,\n    off,\n    onStateChange,\n    mountInfo,\n    componentMounted: () => componentMounted,\n    getClient: () => client,\n    isConnected: () => isConnected,\n    close: () => client.close()\n  };\n}\n\n_c = Connect;\nconst client = Connect();\n\nfunction useMessages() {\n  _s();\n\n  const [messages, setMessages] = useState(['']);\n  useEffect(() => {\n    function handleMessage(message) {\n      setMessages([...messages, message]);\n    }\n\n    client.on(handleMessage);\n    return () => client.off(handleMessage);\n  }, [messages, setMessages]);\n  return messages;\n}\n\n_s(useMessages, \"r89NeTPJIQ79kkdpfOCrTLYulmw=\");\n\nconst ChatWindow = props => {\n  _s2();\n\n  const mountedRef = useRef(true);\n  let value = true;\n  client.mountInfo(value);\n  const [isConnected, setIsConnected] = useState(client.isConnected());\n  console.log('isConnected: ', isConnected);\n  const [commentObj, setChatCommentObj] = useState([{}]);\n  const [message, setMessage] = useState('');\n  const messages = useMessages();\n  console.log('last elelt: ', messages.at(-1).split(\" \").at(-1));\n  let commentGroupId = messages.at(-1).split(\" \").at(-1);\n  const displayMessage = [];\n  console.log(commentGroupId, '---', props.clickedGroupId);\n\n  if (commentGroupId == props.clickedGroupId) {\n    displayMessage = messages;\n  }\n\n  const handleChange = e => {\n    setMessage(msg => e.target.value);\n  };\n\n  useEffect(() => {\n    if (!isConnected && mountedRef.current) {\n      window.location.reload(false);\n    }\n\n    return () => {\n      mountedRef.current = false;\n      client.mountInfo(false);\n      client.close();\n    };\n  }, [isConnected]); // useEffect(() => {\n  //     return client.onStateChange(setIsConnected);\n  // }, [setIsConnected]);\n\n  useEffect(() => {\n    const groupId = props.clickedGroupId;\n    getchatcomments({\n      setChatCommentObj,\n      groupId\n    });\n  }, [props.clickedGroupId, props.data.id]);\n\n  function sendMessage(e) {\n    e.preventDefault();\n\n    if (message !== \"\") {\n      client.getClient().send(JSON.stringify({\n        type: \"message\",\n        message: message + \" \" + props.clickedGroupId\n      }));\n      const comment = message;\n      const userId = props.data.id;\n      const groupId = props.clickedGroupId;\n      postchatcomment({\n        groupId,\n        userId,\n        comment\n      });\n    }\n\n    setMessage('');\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.chatWindow,\n    children: [/*#__PURE__*/_jsxDEV(ChatUserInfoTopBar, {\n      clickedUserId: props.clickedUserId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(ChatScreen, {\n      messages: displayMessage,\n      commentObj: commentObj\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.chatInput,\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        className: classes.addCommentForm,\n        onSubmit: sendMessage,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.chatInput,\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            className: classes.inputTextBox,\n            value: message,\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 23\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: classes.submit_button,\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: [/*#__PURE__*/_jsxDEV(MdSend, {\n              className: classes.sendButtonIcon\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 80\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 77\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 18\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 6\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 256,\n    columnNumber: 1\n  }, this);\n};\n\n_s2(ChatWindow, \"X/CwZk43N5qTcv1HPmWgjkf/4/U=\", false, function () {\n  return [useMessages];\n});\n\n_c2 = ChatWindow;\nexport default ChatWindow;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Connect\");\n$RefreshReg$(_c2, \"ChatWindow\");","map":{"version":3,"sources":["/home/bibhu/EDRdevelopment/DevBranch/edresearchweb/src/allAppsStudent/Messages/VATChat/ChatWindow/ChatWindowTest.js"],"names":["React","useState","useEffect","useRef","classes","ChatUserInfoTopBar","ChatScreen","ChatInput","w3cwebsocket","W3CWebSocket","Picker","Login","axiosInstance","MdSend","postchatcomment","getchatcomments","Connect","client","messageListeners","isConnected","componentMounted","reconnectOnClose","stateChangeListeners","mountInfo","value","on","fn","push","off","filter","l","onStateChange","start","onclose","forEach","console","log","setTimeout","onopen","onmessage","event","dataFromServer","JSON","parse","data","message","getClient","close","useMessages","messages","setMessages","handleMessage","ChatWindow","props","mountedRef","setIsConnected","commentObj","setChatCommentObj","setMessage","at","split","commentGroupId","displayMessage","clickedGroupId","handleChange","e","msg","target","current","window","location","reload","groupId","id","sendMessage","preventDefault","send","stringify","type","comment","userId","chatWindow","clickedUserId","chatInput","addCommentForm","inputTextBox","submit_button","sendButtonIcon"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAcC,QAAd,EAAuBC,SAAvB,EAAiCC,MAAjC,QAA8C,OAA9C;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAAQC,YAAY,IAAIC,YAAxB,QAA4C,WAA5C;AACA,SAASC,MAAT,QAAuB,YAAvB;AACA,OAAO,+BAAP;AACA,OAAOC,KAAP,MAAkB,8BAAlB;AACA,OAAOC,aAAP,MAA0B,mBAA1B;AACA,SAAQC,MAAR,QAAqB,gBAArB;AACA,SAAQC,eAAR,EAAwBC,eAAxB,QAA8C,oCAA9C;;;AAKA,SAASC,OAAT,GAAmB;AAEnB,MAAIC,MAAJ;AACA,MAAIC,gBAAgB,GAAG,EAAvB;AACA,MAAIC,WAAW,GAAG,KAAlB;AACA,MAAIC,gBAAgB,GAAG,KAAvB;AAEA,MAAIC,gBAAgB,GAAG,IAAvB;AACA,MAAIC,oBAAoB,GAAG,EAA3B;;AAGA,WAASC,SAAT,CAAmBC,KAAnB,EAAyB;AAEvBJ,IAAAA,gBAAgB,GAAGI,KAAnB;AACD;;AAID,WAASC,EAAT,CAAYC,EAAZ,EAAgB;AACZR,IAAAA,gBAAgB,CAACS,IAAjB,CAAsBD,EAAtB;AACD;;AAEF,WAASE,GAAT,CAAaF,EAAb,EAAiB;AACdR,IAAAA,gBAAgB,GAAGA,gBAAgB,CAACW,MAAjB,CAAwBC,CAAC,IAAIA,CAAC,KAAKJ,EAAnC,CAAnB;AACD;;AAEH,WAASK,aAAT,CAAuBL,EAAvB,EAA2B;AACvBJ,IAAAA,oBAAoB,CAACK,IAArB,CAA0BD,EAA1B;AACA,WAAO,MAAM;AACXJ,MAAAA,oBAAoB,GAAGA,oBAAoB,CAACO,MAArB,CAA4BC,CAAC,IAAIA,CAAC,KAAKJ,EAAvC,CAAvB;AACD,KAFD;AAGD;;AASH,WAASM,KAAT,GAAkB;AAElBf,IAAAA,MAAM,GAAG,IAAIR,YAAJ,CAAiB,oCAAjB,CAAT,CAFkB,CAMd;AAEA;AACA;AACA;AACA;AAED;AACA;AACC;;AAMDQ,IAAAA,MAAM,CAACgB,OAAP,GAAiB,MAAM;AACrBd,MAAAA,WAAW,GAAC,KAAZ;AACAG,MAAAA,oBAAoB,CAACY,OAArB,CAA6BR,EAAE,IAAIA,EAAE,CAAC,KAAD,CAArC;AACAS,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;;AACA,UAAGhB,gBAAH,EAAoB;AAClBiB,QAAAA,UAAU,CAACL,KAAD,EAAQ,IAAR,CAAV;AACD;;AACDG,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACD,KARD;;AAUAnB,IAAAA,MAAM,CAACqB,MAAP,GAAc,MAAI;AAChBnB,MAAAA,WAAW,GAAC,IAAZ;AACAG,MAAAA,oBAAoB,CAACY,OAArB,CAA6BR,EAAE,IAAIA,EAAE,CAAC,IAAD,CAArC;AACD,KAHD;;AAKAT,IAAAA,MAAM,CAACsB,SAAP,GAAoBC,KAAD,IAAS;AAC3B,YAAMC,cAAc,GAAGC,IAAI,CAACC,KAAL,CAAWH,KAAK,CAACI,IAAjB,CAAvB;AACA1B,MAAAA,gBAAgB,CAACgB,OAAjB,CAAyBR,EAAE,IAAIA,EAAE,CAACe,cAAc,CAACI,OAAhB,CAAjC;AACA,KAHD;AAMF;;AAEDb,EAAAA,KAAK;AAQL,SAAO;AACHP,IAAAA,EADG;AAEHG,IAAAA,GAFG;AAGHG,IAAAA,aAHG;AAIHR,IAAAA,SAJG;AAKHH,IAAAA,gBAAgB,EAAE,MAAIA,gBALnB;AAMH0B,IAAAA,SAAS,EAAE,MAAM7B,MANd;AAOHE,IAAAA,WAAW,EAAE,MAAMA,WAPhB;AAQH4B,IAAAA,KAAK,EAAE,MAAM9B,MAAM,CAAC8B,KAAP;AARV,GAAP;AAUC;;KAtGQ/B,O;AAwGT,MAAMC,MAAM,GAAGD,OAAO,EAAtB;;AAIA,SAASgC,WAAT,GAAuB;AAAA;;AACrB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BjD,QAAQ,CAAC,CAAC,EAAD,CAAD,CAAxC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,aAASiD,aAAT,CAAuBN,OAAvB,EAAgC;AAC9BK,MAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,EAAcJ,OAAd,CAAD,CAAX;AACD;;AACC5B,IAAAA,MAAM,CAACQ,EAAP,CAAU0B,aAAV;AACD,WAAO,MAAMlC,MAAM,CAACW,GAAP,CAAWuB,aAAX,CAAb;AACF,GANQ,EAMN,CAACF,QAAD,EAAWC,WAAX,CANM,CAAT;AAQA,SAAOD,QAAP;AACD;;GAZQD,W;;AAoBT,MAAMI,UAAU,GAAIC,KAAD,IAAU;AAAA;;AAI1B,QAAMC,UAAU,GAAGnD,MAAM,CAAC,IAAD,CAAzB;AACA,MAAIqB,KAAK,GAAC,IAAV;AACAP,EAAAA,MAAM,CAACM,SAAP,CAAiBC,KAAjB;AAEA,QAAM,CAACL,WAAD,EAAcoC,cAAd,IAAgCtD,QAAQ,CAACgB,MAAM,CAACE,WAAP,EAAD,CAA9C;AAEAgB,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BjB,WAA7B;AAKA,QAAM,CAACqC,UAAD,EAAYC,iBAAZ,IAA+BxD,QAAQ,CAAC,CAAC,EAAD,CAAD,CAA7C;AAEA,QAAM,CAAC4C,OAAD,EAAUa,UAAV,IAAwBzD,QAAQ,CAAC,EAAD,CAAtC;AAGA,QAAMgD,QAAQ,GAAGD,WAAW,EAA5B;AAEAb,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA2Ba,QAAQ,CAACU,EAAT,CAAY,CAAC,CAAb,EAAgBC,KAAhB,CAAsB,GAAtB,EAA2BD,EAA3B,CAA8B,CAAC,CAA/B,CAA3B;AAEA,MAAIE,cAAc,GAAEZ,QAAQ,CAACU,EAAT,CAAY,CAAC,CAAb,EAAgBC,KAAhB,CAAsB,GAAtB,EAA2BD,EAA3B,CAA8B,CAAC,CAA/B,CAApB;AAGA,QAAMG,cAAc,GAAC,EAArB;AACA3B,EAAAA,OAAO,CAACC,GAAR,CAAYyB,cAAZ,EAA2B,KAA3B,EAAiCR,KAAK,CAACU,cAAvC;;AACA,MAAIF,cAAc,IAAIR,KAAK,CAACU,cAA5B,EAA2C;AAC3CD,IAAAA,cAAc,GAACb,QAAf;AACC;;AAED,QAAMe,YAAY,GAAIC,CAAD,IAAO;AACzBP,IAAAA,UAAU,CAACQ,GAAG,IAAED,CAAC,CAACE,MAAF,CAAS3C,KAAf,CAAV;AAGF,GAJD;;AAMAtB,EAAAA,SAAS,CAAC,MAAI;AAGX,QAAG,CAACiB,WAAD,IAAgBmC,UAAU,CAACc,OAA9B,EAAuC;AACzCC,MAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,KAAvB;AACI;;AACF,WAAO,MAAI;AACRjB,MAAAA,UAAU,CAACc,OAAX,GAAqB,KAArB;AACPnD,MAAAA,MAAM,CAACM,SAAP,CAAiB,KAAjB;AACON,MAAAA,MAAM,CAAC8B,KAAP;AACD,KAJF;AAKA,GAXM,EAWL,CAAC5B,WAAD,CAXK,CAAT,CAvC0B,CAqDzB;AACA;AACA;;AAGDjB,EAAAA,SAAS,CAAC,MAAI;AACd,UAAMsE,OAAO,GAACnB,KAAK,CAACU,cAApB;AAGAhD,IAAAA,eAAe,CAAC;AAAC0C,MAAAA,iBAAD;AAAoBe,MAAAA;AAApB,KAAD,CAAf;AAEC,GANQ,EAMP,CAACnB,KAAK,CAACU,cAAP,EAAuBV,KAAK,CAACT,IAAN,CAAW6B,EAAlC,CANO,CAAT;;AAmBA,WAASC,WAAT,CAAqBT,CAArB,EAAwB;AACvBA,IAAAA,CAAC,CAACU,cAAF;;AACA,QAAG9B,OAAO,KAAK,EAAf,EAAkB;AAClB5B,MAAAA,MAAM,CAAC6B,SAAP,GAAmB8B,IAAnB,CAAwBlC,IAAI,CAACmC,SAAL,CAAe;AACrCC,QAAAA,IAAI,EAAE,SAD+B;AAErCjC,QAAAA,OAAO,EAAEA,OAAO,GAAC,GAAR,GAAYQ,KAAK,CAACU;AAFU,OAAf,CAAxB;AAMC,YAAMgB,OAAO,GAAGlC,OAAhB;AACA,YAAMmC,MAAM,GAAG3B,KAAK,CAACT,IAAN,CAAW6B,EAA1B;AAEA,YAAMD,OAAO,GAACnB,KAAK,CAACU,cAApB;AACAjD,MAAAA,eAAe,CAAC;AAAC0D,QAAAA,OAAD;AAASQ,QAAAA,MAAT;AAAgBD,QAAAA;AAAhB,OAAD,CAAf;AAMA;;AAEDrB,IAAAA,UAAU,CAAC,EAAD,CAAV;AACA;;AAUJ,sBAEA;AAAK,IAAA,SAAS,EAAEtD,OAAO,CAAC6E,UAAxB;AAAA,4BAEA,QAAC,kBAAD;AAAoB,MAAA,aAAa,EAAE5B,KAAK,CAAC6B;AAAzC;AAAA;AAAA;AAAA;AAAA,YAFA,eAIA,QAAC,UAAD;AAAY,MAAA,QAAQ,EAAEpB,cAAtB;AAAuC,MAAA,UAAU,EAAEN;AAAnD;AAAA;AAAA;AAAA;AAAA,YAJA,eAMA;AAAK,MAAA,SAAS,EAAEpD,OAAO,CAAC+E,SAAxB;AAAA,6BAKK;AAAM,QAAA,SAAS,EAAE/E,OAAO,CAACgF,cAAzB;AAAyC,QAAA,QAAQ,EAAEV,WAAnD;AAAA,gCAGa;AAAK,UAAA,SAAS,EAAEtE,OAAO,CAAC+E,SAAxB;AAAA,iCAEI;AAAO,YAAA,SAAS,EAAE/E,OAAO,CAACiF,YAA1B;AAAwC,YAAA,KAAK,EAAExC,OAA/C;AAAwD,YAAA,QAAQ,EAAEmB;AAAlE;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,gBAHb,eAWY;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAuB,UAAA,SAAS,EAAG5D,OAAO,CAACkF,aAA3C;AAAA,kCAA2D;AAAA,oCAAG,QAAC,MAAD;AAAQ,cAAA,SAAS,EAAElF,OAAO,CAACmF;AAA3B;AAAA;AAAA;AAAA;AAAA,oBAAH;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA3D;AAAA;AAAA;AAAA;AAAA;AAAA,gBAXZ;AAAA;AAAA;AAAA;AAAA;AAAA;AALL;AAAA;AAAA;AAAA;AAAA,YANA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFA;AAsCC,CAnJD;;IAAMnC,U;UAoBcJ,W;;;MApBdI,U;AAqJN,eAAeA,UAAf","sourcesContent":["import React,{useState,useEffect,useRef} from \"react\";\nimport classes from \"./ChatWindow.module.css\"\nimport ChatUserInfoTopBar from \"./ChatUserInfoTopBar\";\nimport ChatScreen from \"./ChatScreen\";\nimport ChatInput from \"./ChatInput\";\nimport {w3cwebsocket as W3CWebSocket } from 'websocket';\nimport { Picker } from \"emoji-mart\";\nimport \"emoji-mart/css/emoji-mart.css\";\nimport Login from '../../../../CommonApps/Login';\nimport axiosInstance from '../../../../axios';\nimport {MdSend} from 'react-icons/md';\nimport {postchatcomment,getchatcomments} from '../../../../CommonApps/AllAPICalls';\n\n\n\n\nfunction Connect (){\n\nlet client;\nlet messageListeners = [];\nlet isConnected = false;\nlet componentMounted = false;\n\nlet reconnectOnClose = true;\nlet stateChangeListeners = [];\n\n\nfunction mountInfo(value){\n\n  componentMounted = value;\n}\n\n\n\nfunction on(fn) {\n    messageListeners.push(fn);\n  }\n\n function off(fn) {\n    messageListeners = messageListeners.filter(l => l !== fn);\n  }\n\nfunction onStateChange(fn) {\n    stateChangeListeners.push(fn);\n    return () => {\n      stateChangeListeners = stateChangeListeners.filter(l => l !== fn);\n    };\n  }\n\n\n\n\n\n\n\n\nfunction start () {\n\nclient = new W3CWebSocket('ws://127.0.0.1:8000/ws/chat/class/');\n\n\n\n    //const close = client.close;\n\n    //client.close = () => {\n    //   reconnectOnClose = false;\n    //  close.call(client);\n    //}\n\n   // if(client.readyState === client.CLOSED ){\n   //   setTimeout(start, 5000);\n    //}\n\n\n\n\n\n   client.onclose = () => {\n     isConnected=false;\n     stateChangeListeners.forEach(fn => fn(false));\t   \n     console.log('time 1');\n     if(componentMounted){\t   \n       setTimeout(start, 5000);\n     }\n     console.log('time 2');\n   }\n\n   client.onopen=()=>{\n     isConnected=true;\n     stateChangeListeners.forEach(fn => fn(true));\t   \n   }\n\n   client.onmessage = (event)=>{\n    const dataFromServer = JSON.parse(event.data);\t\n    messageListeners.forEach(fn => fn(dataFromServer.message));\n   }\n\n\n}\n\nstart();\n\n\n\n\n\n\n\nreturn {\n    on,\n    off,\n    onStateChange,\n    mountInfo,\n    componentMounted: ()=>componentMounted,\t\n    getClient: () => client,\n    isConnected: () => isConnected,\n    close: () => client.close(),\n   }\n}\n\nconst client = Connect();\n\n\n\nfunction useMessages() {\n  const [messages, setMessages] = useState(['']);\n\n  useEffect(() => {\n    function handleMessage(message) {\n      setMessages([...messages, message]);\n    }\n      client.on(handleMessage);\n     return () => client.off(handleMessage);\n  }, [messages, setMessages]);\n\n  return messages;\n}\n\n\n\n\n\n\n\nconst ChatWindow = (props) =>{\n\n\n\n   const mountedRef = useRef(true);\n   let value=true;\n   client.mountInfo(value);\n\n   const [isConnected, setIsConnected] = useState(client.isConnected());\n   \n   console.log('isConnected: ', isConnected);\t\n\n\n\n\n   const [commentObj,setChatCommentObj]=useState([{}]);\n\n   const [message, setMessage] = useState('');\n   \n\n   const messages = useMessages();  \n\n   console.log('last elelt: ',messages.at(-1).split(\" \").at(-1))\n\n   let commentGroupId= messages.at(-1).split(\" \").at(-1);\t\n\n\n   const displayMessage=[];\n   console.log(commentGroupId,'---',props.clickedGroupId);\t\n   if (commentGroupId == props.clickedGroupId){\n   displayMessage=messages;\n   }\t\n\n   const handleChange = (e) => {\n      setMessage(msg=>e.target.value);\n\n\n   };\n\n   useEffect(()=>{\n     \n\n      if(!isConnected && mountedRef.current ){\n\t   window.location.reload(false);  \n       }\n      return ()=>{\n         mountedRef.current = false;\n\t client.mountInfo(false);    \n         client.close();\n       }\n     },[isConnected]);\n\n\n    // useEffect(() => {\n    //     return client.onStateChange(setIsConnected);\n    // }, [setIsConnected]);\n\n\n   useEffect(()=>{\n   const groupId=props.clickedGroupId;\n\n\n   getchatcomments({setChatCommentObj, groupId});\n\n   },[props.clickedGroupId, props.data.id]);\n\n\n\n\n\n\n\n\n\n\n\n\n   function sendMessage(e) {\n    e.preventDefault();\n    if(message !== \"\"){\t   \n    client.getClient().send(JSON.stringify({\n      type: \"message\",\n      message: message+\" \"+props.clickedGroupId,\n    }))\n\n\n     const comment = message;\n     const userId = props.data.id;\n\n     const groupId=props.clickedGroupId;\n     postchatcomment({groupId,userId,comment});\n\n\n\n\n\n    }\n    \t    \n    setMessage('');\n   }\n\n\n\n\n\n\n\n\n\nreturn(\n\n<div className={classes.chatWindow}>\n\n<ChatUserInfoTopBar clickedUserId={props.clickedUserId} />\n\n<ChatScreen messages={displayMessage}  commentObj={commentObj}/>\n\t\n<div className={classes.chatInput}>\n\n\n\n\n     <form className={classes.addCommentForm} onSubmit={sendMessage}>\n\n\n                  <div className={classes.chatInput} >\n\n                      <input className={classes.inputTextBox} value={message} onChange={handleChange} />\n\n\n                  </div>\n\n                 \n                 <button type=\"submit\"  className= {classes.submit_button} ><b><MdSend className={classes.sendButtonIcon}/> </b> </button>\n                  \n     </form>\n\n\n</div>\n\n\n\n\t\n</div>\n\n);\n\n}\n\nexport default ChatWindow;\n"]},"metadata":{},"sourceType":"module"}