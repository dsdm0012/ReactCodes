{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mosToScore = exports.calculateMOS = void 0;\nvar r0 = 94.768; // Constant used in computing \"rFactor\".\n// copied from https://code.hq.twilio.com/client/sdk-frd/blob/master/voice/voice-mos-calculation.md\n\nfunction calculateMOS(rtt, jitter, fractionLost) {\n  // Compute the effective latency.\n  var effectiveLatency = rtt + jitter * 2 + 10; // Compute the initial \"rFactor\" from effective latency.\n\n  var rFactor = 0;\n\n  switch (true) {\n    case effectiveLatency < 160:\n      rFactor = r0 - effectiveLatency / 40;\n      break;\n\n    case effectiveLatency < 1000:\n      rFactor = r0 - (effectiveLatency - 120) / 10;\n      break;\n  } // Adjust \"rFactor\" with the fraction of packets lost.\n\n\n  switch (true) {\n    case fractionLost <= rFactor / 2.5:\n      rFactor = Math.max(rFactor - fractionLost * 2.5, 6.52);\n      break;\n\n    default:\n      rFactor = 0;\n      break;\n  } // Compute MOS from \"rFactor\".\n\n\n  var mos = 1 + 0.035 * rFactor + 0.000007 * rFactor * (rFactor - 60) * (100 - rFactor);\n  return mos;\n}\n\nexports.calculateMOS = calculateMOS;\n\nfunction mosToScore(mosValue) {\n  var score = 0;\n\n  if (!mosValue) {\n    score = 0;\n  } else if (mosValue > 4.2) {\n    score = 5;\n  } else if (mosValue > 4.0) {\n    score = 4;\n  } else if (mosValue > 3.6) {\n    score = 3;\n  } else if (mosValue > 3) {\n    score = 2;\n  } else {\n    score = 1;\n  }\n\n  return score;\n}\n\nexports.mosToScore = mosToScore;","map":null,"metadata":{},"sourceType":"script"}