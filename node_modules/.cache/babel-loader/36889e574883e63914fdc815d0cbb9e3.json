{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar DataTrackTransceiver = require('./transceiver');\n\nvar makeUUID = require('../util').makeUUID;\n/**\n * A {@link DataTrackSender} represents a {@link DataTrackTransceiver} over\n * which data can be sent. Internally, it uses a collection of RTCDataChannels\n * to send data.\n * @extends DataTrackTransceiver\n */\n\n\nvar DataTrackSender =\n/** @class */\nfunction (_super) {\n  __extends(DataTrackSender, _super);\n  /**\n   * Construct a {@link DataTrackSender}.\n   * @param {?number} maxPacketLifeTime\n   * @param {?number} maxRetransmits\n   * @param {boolean} ordered\n   */\n\n\n  function DataTrackSender(maxPacketLifeTime, maxRetransmtis, ordered) {\n    var _this = _super.call(this, makeUUID(), maxPacketLifeTime, maxRetransmtis, ordered) || this;\n\n    Object.defineProperties(_this, {\n      _clones: {\n        value: new Set()\n      },\n      _dataChannels: {\n        value: new Set()\n      }\n    });\n    return _this;\n  }\n  /**\n   * Add a cloned {@link DataTrackSender}.\n   * @private\n   * @returns {void}\n   */\n\n\n  DataTrackSender.prototype._addClone = function (clone) {\n    this._clones.add(clone);\n  };\n  /**\n   * Remove a cloned {@link DataTrackSender}.\n   * @returns {void}\n   */\n\n\n  DataTrackSender.prototype.removeClone = function (clone) {\n    this._clones.delete(clone);\n  };\n  /**\n   * Add an RTCDataChannel to the {@link DataTrackSender}.\n   * @param {RTCDataChannel} dataChannel\n   * @returns {this}\n   */\n\n\n  DataTrackSender.prototype.addDataChannel = function (dataChannel) {\n    this._dataChannels.add(dataChannel);\n\n    return this;\n  };\n  /**\n   * Return a new {@link DataTrackSender}. Any message sent over this\n   * {@link DataTrackSender} will also be sent over the clone. Whenever this\n   * {@link DataTrackSender} is stopped, so to will the clone.\n   * @returns {DataTrackSender}\n   */\n\n\n  DataTrackSender.prototype.clone = function () {\n    var _this = this;\n\n    var clone = new DataTrackSender(this.maxPacketLifeTime, this.maxRetransmits, this.ordered);\n\n    this._addClone(clone);\n\n    clone.once('stopped', function () {\n      return _this.removeClone(clone);\n    });\n    return clone;\n  };\n  /**\n   * Remove an RTCDataChannel from the {@link DataTrackSender}.\n   * @param {RTCDataChannel} dataChannel\n   * @returns {this}\n   */\n\n\n  DataTrackSender.prototype.removeDataChannel = function (dataChannel) {\n    this._dataChannels.delete(dataChannel);\n\n    return this;\n  };\n  /**\n   * Send data over the {@link DataTrackSender}. Internally, this calls\n   * <code>send</code> over each of the underlying RTCDataChannels.\n   * @param {string|Blob|ArrayBuffer|ArrayBufferView} data\n   * @returns {this}\n   */\n\n\n  DataTrackSender.prototype.send = function (data) {\n    this._dataChannels.forEach(function (dataChannel) {\n      try {\n        dataChannel.send(data);\n      } catch (error) {// Do nothing.\n      }\n    });\n\n    this._clones.forEach(function (clone) {\n      try {\n        clone.send(data);\n      } catch (error) {// Do nothing.\n      }\n    });\n\n    return this;\n  };\n\n  DataTrackSender.prototype.stop = function () {\n    this._dataChannels.forEach(function (dataChannel) {\n      return dataChannel.close();\n    });\n\n    this._clones.forEach(function (clone) {\n      return clone.stop();\n    });\n\n    _super.prototype.stop.call(this);\n  };\n\n  return DataTrackSender;\n}(DataTrackTransceiver);\n\nmodule.exports = DataTrackSender;","map":null,"metadata":{},"sourceType":"script"}