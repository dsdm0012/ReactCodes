{"ast":null,"code":"/* eslint callback-return:0 */\n'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar EventEmitter = require('events');\n\nvar nInstances = 0;\n\nvar MediaSignaling =\n/** @class */\nfunction (_super) {\n  __extends(MediaSignaling, _super);\n  /**\n   * Construct a {@link MediaSignaling}.\n   * @param {Promise<DataTrackReceiver>} getReceive\n   * @param {string} channel\n   */\n\n\n  function MediaSignaling(getReceiver, channel, options) {\n    var _this = _super.call(this) || this;\n\n    Object.defineProperties(_this, {\n      _instanceId: {\n        value: nInstances++\n      },\n      channel: {\n        value: channel\n      },\n      _log: {\n        value: options.log.createLog('default', _this)\n      },\n      _getReceiver: {\n        value: getReceiver\n      },\n      _receiverPromise: {\n        value: null,\n        writable: true\n      },\n      _transport: {\n        value: null,\n        writable: true\n      }\n    });\n    return _this;\n  }\n\n  Object.defineProperty(MediaSignaling.prototype, \"isSetup\", {\n    get: function get() {\n      return !!this._receiverPromise;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  MediaSignaling.prototype.toString = function () {\n    return \"[MediaSignaling #\" + this._instanceId + \":\" + this.channel + \"]\";\n  };\n\n  MediaSignaling.prototype.setup = function (id) {\n    var _this = this;\n\n    this._teardown();\n\n    this._log.info('setting up msp transport for id:', id);\n\n    var receiverPromise = this._getReceiver(id).then(function (receiver) {\n      if (receiver.kind !== 'data') {\n        _this._log.error('Expected a DataTrackReceiver');\n      }\n\n      if (_this._receiverPromise !== receiverPromise) {\n        return;\n      }\n\n      try {\n        _this._transport = receiver.toDataTransport();\n\n        _this.emit('ready', _this._transport);\n      } catch (ex) {\n        _this._log.error(\"Failed to toDataTransport: \" + ex.message);\n      }\n\n      receiver.once('close', function () {\n        return _this._teardown();\n      });\n    });\n\n    this._receiverPromise = receiverPromise;\n  };\n\n  MediaSignaling.prototype._teardown = function () {\n    if (this._transport) {\n      this._log.info('Tearing down');\n\n      this._transport = null;\n      this._receiverPromise = null;\n      this.emit('teardown');\n    }\n  };\n\n  return MediaSignaling;\n}(EventEmitter);\n\nmodule.exports = MediaSignaling;","map":null,"metadata":{},"sourceType":"script"}