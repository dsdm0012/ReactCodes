{"ast":null,"code":"var _jsxFileName = \"/home/bibhu/EDRdevelopment/DevBranch/edresearchweb/src/allAppsStudent/Messages/VATChat/ChatWindow/StackOverflowCode.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst URL = 'ws://127.0.0.1:8000/ws/chat/class/';\n\nfunction reconnectingSocket(url) {\n  let client;\n  let isConnected = false;\n  let reconnectOnClose = true;\n  let messageListeners = [];\n  let stateChangeListeners = [];\n\n  function on(fn) {\n    messageListeners.push(fn);\n  }\n\n  function off(fn) {\n    messageListeners = messageListeners.filter(l => l !== fn);\n  }\n\n  function onStateChange(fn) {\n    stateChangeListeners.push(fn);\n    return () => {\n      stateChangeListeners = stateChangeListeners.filter(l => l !== fn);\n    };\n  }\n\n  function start() {\n    client = new WebSocket(URL);\n\n    client.onopen = () => {\n      isConnected = true;\n      stateChangeListeners.forEach(fn => fn(true));\n    }; //const close = client.close;\n    //Close without reconnecting;\n    // client.close = () => {\n    //   reconnectOnClose = false;\n    //  close.call(client);\n    // }\n\n\n    client.onmessage = event => {\n      messageListeners.forEach(fn => fn(event.data));\n    };\n\n    client.onerror = e => console.error(e);\n\n    client.onclose = () => {\n      isConnected = false;\n      stateChangeListeners.forEach(fn => fn(false));\n\n      if (!reconnectOnClose) {\n        console.log('ws closed by app');\n        return;\n      }\n\n      console.log('ws closed by server'); //setTimeout(start, 3000);\n    };\n  }\n\n  start();\n  return {\n    on,\n    off,\n    onStateChange,\n    //close: () => client.close(),\n    getClient: () => client,\n    isConnected: () => isConnected\n  };\n}\n\nconst client = reconnectingSocket(URL);\n\nfunction useMessages() {\n  _s();\n\n  const [messages, setMessages] = useState(['hey you']);\n  useEffect(() => {\n    function handleMessage(message) {\n      setMessages([...messages, message]);\n    }\n\n    client.on(handleMessage);\n    return () => client.off(handleMessage);\n  }, [messages, setMessages]);\n  return messages;\n}\n\n_s(useMessages, \"AI1f8hRx7Kr1jE9xSSARsGGImSQ=\");\n\nexport default function App() {\n  _s2();\n\n  const [message, setMessage] = useState('');\n  const messages = useMessages();\n  const [isConnected, setIsConnected] = useState(client.isConnected());\n  useEffect(() => {\n    return client.onStateChange(setIsConnected);\n  }, [setIsConnected]);\n  useEffect(() => {\n    if (isConnected) {\n      client.getClient().send('hi');\n    }\n  }, [isConnected]);\n\n  function sendMessage(e) {\n    e.preventDefault();\n    client.getClient().send(message);\n    setMessage('');\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Websocket \", isConnected ? 'Connected' : 'Disconnected']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: sendMessage,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: message,\n        onChange: e => setMessage(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), messages.map(m => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: JSON.stringify(m, null, 2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 26\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(App, \"6EDgwYn7WJsPYGC+ynIaCqleEK8=\", false, function () {\n  return [useMessages];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/bibhu/EDRdevelopment/DevBranch/edresearchweb/src/allAppsStudent/Messages/VATChat/ChatWindow/StackOverflowCode.js"],"names":["React","useRef","useState","useEffect","URL","reconnectingSocket","url","client","isConnected","reconnectOnClose","messageListeners","stateChangeListeners","on","fn","push","off","filter","l","onStateChange","start","WebSocket","onopen","forEach","onmessage","event","data","onerror","e","console","error","onclose","log","getClient","useMessages","messages","setMessages","handleMessage","message","App","setMessage","setIsConnected","send","sendMessage","preventDefault","target","value","map","m","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\n\nconst URL = 'ws://127.0.0.1:8000/ws/chat/class/';\n\n\nfunction reconnectingSocket(url) {\n  let client;\n  let isConnected = false;\n  let reconnectOnClose = true;\n  let messageListeners = [];\n  let stateChangeListeners = [];\n\n  function on(fn) {\n    messageListeners.push(fn);\n  }\n\n  function off(fn) {\n    messageListeners = messageListeners.filter(l => l !== fn);\n  }\n\n  function onStateChange(fn) {\n    stateChangeListeners.push(fn);\n    return () => {\n      stateChangeListeners = stateChangeListeners.filter(l => l !== fn);\n    };\n  }\n\n  function start() {\n    client = new WebSocket(URL);\n\n    client.onopen = () => {\n      isConnected = true;\n      stateChangeListeners.forEach(fn => fn(true));\n    }\n\n    //const close = client.close;\n\n     //Close without reconnecting;\n    // client.close = () => {\n    //   reconnectOnClose = false;\n    //  close.call(client);\n   // }\n\n    client.onmessage = (event) => {\n      messageListeners.forEach(fn => fn(event.data));\n    }\n\n    client.onerror = (e) => console.error(e);\n\n    client.onclose = () => {\n\n      isConnected = false;\n      stateChangeListeners.forEach(fn => fn(false));\n\n      if (!reconnectOnClose) {\n        console.log('ws closed by app');\n        return;\n      }\n\n      console.log('ws closed by server');\n\n      //setTimeout(start, 3000);\n    }\n  }\n\n  start();\n\n\n  return {\n    on,\n    off,\n    onStateChange,\n    //close: () => client.close(),\n    getClient: () => client,\n    isConnected: () => isConnected,\n  };\n}\n\n\nconst client = reconnectingSocket(URL);\n\n\nfunction useMessages() {\n  const [messages, setMessages] = useState(['hey you']);\n\n  useEffect(() => {\n    function handleMessage(message) {\n      setMessages([...messages, message]);\n    }\n    client.on(handleMessage);\n    return () => client.off(handleMessage);\n  }, [messages, setMessages]);\n\n  return messages;\n}\n\n\n\nexport default function App() {\n\n  const [message, setMessage] = useState('');\n  const messages = useMessages();\n  const [isConnected, setIsConnected] = useState(client.isConnected());\n\n  useEffect(() => {\n    return client.onStateChange(setIsConnected);\n  }, [setIsConnected]);\n\n  useEffect(() => {\n    if (isConnected) {\n      client.getClient().send('hi');\n    }\n  }, [isConnected]);\n\n  function sendMessage(e) {\n    e.preventDefault();\n    client.getClient().send(message);\n    setMessage('');\n  }\n\n  return (\n    <div>\n      <h1>Websocket {isConnected ? 'Connected' : 'Disconnected'}</h1>\n\n      <form onSubmit={sendMessage}>\n        <input value={message} onChange={e => setMessage(e.target.value)} />\n        <button type=\"submit\">Send</button>\n      </form>\n\n      {messages.map(m => <p >{JSON.stringify(m, null, 2)}</p>)}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}