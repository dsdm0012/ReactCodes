{"ast":null,"code":"'use strict';\n/**\n * Monitor the network connection status to detect interruptions and handoffs.\n */\n\nvar NetworkMonitor =\n/** @class */\nfunction () {\n  /**\n   * Construct a {@link NetworkMonitor}.\n   * @param {function} onNetworkChanged\n   * @param {*} [options]\n   */\n  function NetworkMonitor(onNetworkChanged, options) {\n    var _this = this;\n\n    options = Object.assign({\n      navigator: navigator,\n      window: window\n    }, options);\n    var nav = options.navigator;\n    var connection = nav.connection || {\n      type: null\n    };\n    var type = connection.type;\n\n    var _a = connection.type ? {\n      _events: {\n        value: ['change', 'typechange']\n      },\n      _listener: {\n        value: function () {\n          var networkChanged = type !== _this.type && _this.isOnline;\n          type = _this.type;\n\n          if (networkChanged) {\n            onNetworkChanged();\n          }\n        }\n      },\n      _target: {\n        value: connection\n      }\n    } : {\n      _events: {\n        value: ['online']\n      },\n      _listener: {\n        value: onNetworkChanged\n      },\n      _target: {\n        value: options.window\n      }\n    },\n        _events = _a._events,\n        _listener = _a._listener,\n        _target = _a._target;\n\n    Object.defineProperties(this, {\n      isOnline: {\n        enumerable: true,\n        get: function () {\n          return typeof nav.onLine === 'boolean' ? nav.onLine : true;\n        }\n      },\n      type: {\n        enumerable: true,\n        get: function () {\n          return connection.type || null;\n        }\n      },\n      _listener: _listener,\n      _events: _events,\n      _target: _target\n    });\n  }\n  /**\n   * Start the {@link NetworkMonitor}.\n   */\n\n\n  NetworkMonitor.prototype.start = function () {\n    var _this = this;\n\n    this._events.forEach(function (event) {\n      _this._target.addEventListener(event, _this._listener);\n    });\n  };\n  /**\n   * Stop the {@link NetworkMonitor}.\n   */\n\n\n  NetworkMonitor.prototype.stop = function () {\n    var _this = this;\n\n    this._events.forEach(function (event) {\n      _this._target.removeEventListener(event, _this._listener);\n    });\n  };\n\n  return NetworkMonitor;\n}();\n\nmodule.exports = NetworkMonitor;","map":null,"metadata":{},"sourceType":"script"}