{"ast":null,"code":"var _jsxFileName = \"/home/bibhu/EDRdevelopment/DevBranch/edresearchweb/src/MainApps/Messages/VATChat/ChatWindow/ChatWindowTest.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport classes from \"./ChatWindow.module.css\";\nimport ChatUserInfoTopBar from \"./ChatUserInfoTopBar\";\nimport ChatScreen from \"./ChatScreen\";\nimport ChatInput from \"./ChatInput\";\nimport { w3cwebsocket as W3CWebSocket } from 'websocket';\nimport { Picker } from \"emoji-mart\";\nimport \"emoji-mart/css/emoji-mart.css\";\nimport Login from '../../../../CommonApps/Login';\nimport axiosInstance from '../../../../axios';\nimport { MdSend } from 'react-icons/md';\nimport { postchatcomment, getchatcomments } from '../../../../CommonApps/AllAPICalls';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Connect() {\n  let client;\n  let messageListeners = [];\n  let isConnected = false;\n  let componentMounted = false;\n  let reconnectOnClose = true;\n  let stateChangeListeners = [];\n\n  function mountInfo(value) {\n    componentMounted = value;\n  }\n\n  function on(fn) {\n    messageListeners.push(fn);\n  }\n\n  function off(fn) {\n    messageListeners = messageListeners.filter(l => l !== fn);\n  }\n\n  function onStateChange(fn) {\n    stateChangeListeners.push(fn);\n    return () => {\n      stateChangeListeners = stateChangeListeners.filter(l => l !== fn);\n    };\n  }\n\n  function start() {\n    if (window.location.host === 'localhost:3000') {\n      client = new W3CWebSocket('ws://127.0.0.1:8000/ws/chat/class/');\n    }\n\n    if (window.location.host === '127.0.0.1:8000') {\n      client = new W3CWebSocket('ws://127.0.0.1:8000/ws/chat/class/');\n    }\n\n    if (window.location.host === 'edresearch.co.in') {\n      client = new W3CWebSocket('wss://edresearch.co.in:8001/ws/chat/class/');\n    } //const close = client.close;\n    //client.close = () => {\n    //   reconnectOnClose = false;\n    //  close.call(client);\n    //}\n    // if(client.readyState === client.CLOSED ){\n    //   setTimeout(start, 5000);\n    //}\n\n\n    client.onclose = () => {\n      isConnected = false;\n      stateChangeListeners.forEach(fn => fn(false));\n\n      if (componentMounted) {\n        setTimeout(start, 5000);\n      }\n    };\n\n    client.onopen = () => {\n      isConnected = true;\n      stateChangeListeners.forEach(fn => fn(true));\n    };\n\n    client.onmessage = event => {\n      const dataFromServer = JSON.parse(event.data);\n      messageListeners.forEach(fn => fn(dataFromServer.message));\n    };\n  }\n\n  start();\n  return {\n    on,\n    off,\n    onStateChange,\n    mountInfo,\n    componentMounted: () => componentMounted,\n    getClient: () => client,\n    isConnected: () => isConnected,\n    close: () => client.close()\n  };\n}\n\n_c = Connect;\nconst client = Connect();\n\nfunction useMessages() {\n  _s();\n\n  const [messages, setMessages] = useState(['']);\n  useEffect(() => {\n    function handleMessage(message) {\n      setMessages([...messages, message]);\n    }\n\n    client.on(handleMessage);\n    return () => client.off(handleMessage);\n  }, [messages, setMessages]);\n  return messages;\n}\n\n_s(useMessages, \"r89NeTPJIQ79kkdpfOCrTLYulmw=\");\n\nconst ChatWindow = props => {\n  _s2();\n\n  const mountedRef = useRef(true);\n  let value = true;\n  client.mountInfo(value);\n  const [isConnected, setIsConnected] = useState(client.isConnected());\n  console.log('isConnected: ', isConnected);\n  const [commentObj, setChatCommentObj] = useState([{}]);\n  const [message, setMessage] = useState('');\n  const messages = useMessages();\n  console.log(\"messages : \", messages);\n  const commentGroupId = Number(messages.at(-1).split(\" \").at(-1));\n  const clickedGroupIdT = props.clickedGroupId;\n  let displayMessage = [];\n\n  if (commentGroupId === clickedGroupIdT) {\n    displayMessage = messages;\n  }\n\n  const handleChange = e => {\n    setMessage(msg => e.target.value);\n  };\n\n  useEffect(() => {\n    //if(!isConnected && mountedRef.current ){\n    //\t   window.location.reload(false);  \n    // }\n    console.log('connection status changed:', isConnected);\n    return () => {\n      mountedRef.current = false;\n      client.mountInfo(false); // client.close();\n    };\n  }, [isConnected]); // useEffect(() => {\n  //     return client.onStateChange(setIsConnected);\n  // }, [setIsConnected]);\n\n  useEffect(() => {\n    const groupId = props.clickedGroupId;\n    getchatcomments({\n      setChatCommentObj,\n      groupId\n    });\n  }, [props.clickedGroupId, props.data.id]);\n\n  function sendMessage(e) {\n    e.preventDefault();\n\n    if (message !== \"\") {\n      client.getClient().send(JSON.stringify({\n        type: \"message\",\n        message: message + \" \" + props.clickedGroupId + \" \" + props.data.id\n      }));\n      const comment = message;\n      const userId = props.data.id;\n      const groupId = props.clickedGroupId;\n      postchatcomment({\n        groupId,\n        userId,\n        comment\n      });\n    }\n\n    setMessage('');\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.chatWindow,\n    children: [clickedGroupIdT === Number(0) && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.noGroupSelectDiv,\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"Please select a chat to continue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 80\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 37\n    }, this), clickedGroupIdT !== Number(0) && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ChatUserInfoTopBar, {\n        clickedUserId: props.clickedUserId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(ChatScreen, {\n        messages: displayMessage,\n        commentObj: commentObj,\n        currentUser: props.data.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.chatInput,\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          className: classes.addCommentForm,\n          onSubmit: sendMessage,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.chatInput,\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              className: classes.inputTextBox,\n              value: message,\n              onChange: handleChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 305,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: classes.submit_button,\n            children: [/*#__PURE__*/_jsxDEV(\"b\", {\n              children: [/*#__PURE__*/_jsxDEV(MdSend, {\n                className: classes.sendButtonIcon\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 311,\n                columnNumber: 80\n              }, this), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 311,\n              columnNumber: 77\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 18\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 281,\n    columnNumber: 1\n  }, this);\n};\n\n_s2(ChatWindow, \"X/CwZk43N5qTcv1HPmWgjkf/4/U=\", false, function () {\n  return [useMessages];\n});\n\n_c2 = ChatWindow;\nexport default ChatWindow;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Connect\");\n$RefreshReg$(_c2, \"ChatWindow\");","map":{"version":3,"sources":["/home/bibhu/EDRdevelopment/DevBranch/edresearchweb/src/MainApps/Messages/VATChat/ChatWindow/ChatWindowTest.js"],"names":["React","useState","useEffect","useRef","classes","ChatUserInfoTopBar","ChatScreen","ChatInput","w3cwebsocket","W3CWebSocket","Picker","Login","axiosInstance","MdSend","postchatcomment","getchatcomments","Connect","client","messageListeners","isConnected","componentMounted","reconnectOnClose","stateChangeListeners","mountInfo","value","on","fn","push","off","filter","l","onStateChange","start","window","location","host","onclose","forEach","setTimeout","onopen","onmessage","event","dataFromServer","JSON","parse","data","message","getClient","close","useMessages","messages","setMessages","handleMessage","ChatWindow","props","mountedRef","setIsConnected","console","log","commentObj","setChatCommentObj","setMessage","commentGroupId","Number","at","split","clickedGroupIdT","clickedGroupId","displayMessage","handleChange","e","msg","target","current","groupId","id","sendMessage","preventDefault","send","stringify","type","comment","userId","chatWindow","noGroupSelectDiv","clickedUserId","chatInput","addCommentForm","inputTextBox","submit_button","sendButtonIcon"],"mappings":"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","sourcesContent":["import React,{useState,useEffect,useRef} from \"react\";\nimport classes from \"./ChatWindow.module.css\"\nimport ChatUserInfoTopBar from \"./ChatUserInfoTopBar\";\nimport ChatScreen from \"./ChatScreen\";\nimport ChatInput from \"./ChatInput\";\nimport {w3cwebsocket as W3CWebSocket } from 'websocket';\nimport { Picker } from \"emoji-mart\";\nimport \"emoji-mart/css/emoji-mart.css\";\nimport Login from '../../../../CommonApps/Login';\nimport axiosInstance from '../../../../axios';\nimport {MdSend} from 'react-icons/md';\nimport {postchatcomment,getchatcomments} from '../../../../CommonApps/AllAPICalls';\n\n\n\n\nfunction Connect (){\n\nlet client;\nlet messageListeners = [];\nlet isConnected = false;\nlet componentMounted = false;\n\nlet reconnectOnClose = true;\nlet stateChangeListeners = [];\n\n\nfunction mountInfo(value){\n\n  componentMounted = value;\n}\n\n\n\nfunction on(fn) {\n    messageListeners.push(fn);\n  }\n\n function off(fn) {\n    messageListeners = messageListeners.filter(l => l !== fn);\n  }\n\nfunction onStateChange(fn) {\n    stateChangeListeners.push(fn);\n    return () => {\n      stateChangeListeners = stateChangeListeners.filter(l => l !== fn);\n    };\n  }\n\n\n\n\n\n\n\n\nfunction start () {\n \n  if (window.location.host === 'localhost:3000'){\t\n      client = new W3CWebSocket('ws://127.0.0.1:8000/ws/chat/class/');\n     }\n\n  if (window.location.host === '127.0.0.1:8000'){ \n      client = new W3CWebSocket('ws://127.0.0.1:8000/ws/chat/class/');\n     }\n\n  if (window.location.host === 'edresearch.co.in'){ \n      client = new W3CWebSocket('wss://edresearch.co.in:8001/ws/chat/class/');\n     }\n \n\n\n\n\n\n\n\n    //const close = client.close;\n\n    //client.close = () => {\n    //   reconnectOnClose = false;\n    //  close.call(client);\n    //}\n\n   // if(client.readyState === client.CLOSED ){\n   //   setTimeout(start, 5000);\n    //}\n\n\n\n\n\n   client.onclose = () => {\n     isConnected=false;\n     stateChangeListeners.forEach(fn => fn(false));\t   \n     if(componentMounted){\t   \n       setTimeout(start, 5000);\n     }\n   }\n\n   client.onopen=()=>{\n     isConnected=true;\n     stateChangeListeners.forEach(fn => fn(true));\t   \n   }\n\n   client.onmessage = (event)=>{\n    const dataFromServer = JSON.parse(event.data);\t\n    messageListeners.forEach(fn => fn(dataFromServer.message));\n   }\n\n\n}\n\nstart();\n\n\n\n\n\n\n\nreturn {\n    on,\n    off,\n    onStateChange,\n    mountInfo,\n    componentMounted: ()=>componentMounted,\t\n    getClient: () => client,\n    isConnected: () => isConnected,\n    close: () => client.close(),\n   }\n}\n\nconst client = Connect();\n\n\n\nfunction useMessages() {\n  const [messages, setMessages] = useState(['']);\n\n  useEffect(() => {\n    function handleMessage(message) {\n      setMessages([...messages, message]);\n    }\n      client.on(handleMessage);\n     return () => client.off(handleMessage);\n  }, [messages, setMessages]);\n\n  return messages;\n}\n\n\n\n\n\n\n\nconst ChatWindow = (props) =>{\n\n\n\n   const mountedRef = useRef(true);\n   let value=true;\n   client.mountInfo(value);\n\n   const [isConnected, setIsConnected] = useState(client.isConnected());\n   \n   console.log('isConnected: ', isConnected);\t\n\n\n\n   const [commentObj,setChatCommentObj]=useState([{}]);\n\n   const [message, setMessage] = useState('');\n   \n\n   const messages = useMessages();  \n\n   console.log(\"messages : \", messages);\n\n   const commentGroupId= Number(messages.at(-1).split(\" \").at(-1));\t\n\n   const clickedGroupIdT= props.clickedGroupId;\n\n\n\n\n\n   let displayMessage=[];\n  \n   if ( commentGroupId === clickedGroupIdT){\n      \n      displayMessage=messages;\t  \n\n     }\t\n\n   const handleChange = (e) => {\n      setMessage(msg=>e.target.value);\n\n\n   };\n\n   useEffect(()=>{\n     \n\n      //if(!isConnected && mountedRef.current ){\n      //\t   window.location.reload(false);  \n      // }\n\n      console.log('connection status changed:', isConnected)\n\n      return ()=>{\n         mountedRef.current = false;\n\t client.mountInfo(false);    \n        // client.close();\n       }\n     },[isConnected]);\n\n\n    // useEffect(() => {\n    //     return client.onStateChange(setIsConnected);\n    // }, [setIsConnected]);\n\n\n   useEffect(()=>{\n   const groupId=props.clickedGroupId;\n\n\n   getchatcomments({setChatCommentObj, groupId});\n\n   },[props.clickedGroupId, props.data.id]);\n\n\n\n\n\n\n\n\n\n\n\n\n   function sendMessage(e) {\n    e.preventDefault();\n    if(message !== \"\"){\t   \n    client.getClient().send(JSON.stringify({\n      type: \"message\",\n      message: message+\" \"+props.clickedGroupId+\" \"+props.data.id,\n    }))\n\n\n     const comment = message;\n     const userId = props.data.id;\n\n     const groupId=props.clickedGroupId;\n     postchatcomment({groupId,userId,comment});\n\n\n\n\n\n    }\n    \t    \n    setMessage('');\n   }\n\n\n\n\n\n\n\n\n\nreturn(\n\n\n\n\n<div className={classes.chatWindow}>\n\n\n\n  {clickedGroupIdT === Number(0) && <div className={classes.noGroupSelectDiv}> <b>Please select a chat to continue</b> </div>}\n\n\n\n { clickedGroupIdT !== Number(0) &&  <>\n\n<ChatUserInfoTopBar clickedUserId={props.clickedUserId} />\n\n<ChatScreen messages={displayMessage}  commentObj={commentObj} currentUser={props.data.id}/>\n\t\n<div className={classes.chatInput}>\n\n\n\n\n     <form className={classes.addCommentForm} onSubmit={sendMessage}>\n\n\n                  <div className={classes.chatInput} >\n\n                      <input className={classes.inputTextBox} value={message} onChange={handleChange} />\n\n\n                  </div>\n\n                 \n                 <button type=\"submit\"  className= {classes.submit_button} ><b><MdSend className={classes.sendButtonIcon}/> </b> </button>\n                  \n     </form>\n\n\n</div>\n\n</>\n\n }\n\t\n</div>\n\n\n \n\n\n);\n\n}\n\nexport default ChatWindow;\n"]},"metadata":{},"sourceType":"module"}