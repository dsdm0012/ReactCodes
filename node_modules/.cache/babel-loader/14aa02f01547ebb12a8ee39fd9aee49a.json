{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar MediaSignaling = require('./mediasignaling');\n\nvar TrackPrioritySignaling =\n/** @class */\nfunction (_super) {\n  __extends(TrackPrioritySignaling, _super);\n  /**\n   * Construct a {@link TrackPrioritySignaling}.\n   * @param {Promise<DataTrackReceiver>} getReceiver\n   */\n\n\n  function TrackPrioritySignaling(getReceiver, options) {\n    var _this = _super.call(this, getReceiver, 'track_priority', options) || this;\n\n    Object.defineProperties(_this, {\n      _enqueuedPriorityUpdates: {\n        value: new Map()\n      }\n    });\n\n    _this.on('ready', function (transport) {\n      Array.from(_this._enqueuedPriorityUpdates.keys()).forEach(function (trackSid) {\n        transport.publish({\n          type: 'track_priority',\n          track: trackSid,\n          subscribe: _this._enqueuedPriorityUpdates.get(trackSid)\n        }); // NOTE(mpatwardhan)- we do not clear _enqueuedPriorityUpdates intentionally,\n        // this cache will is used to re-send the priorities in case of VMS-FailOver.\n      });\n    });\n\n    return _this;\n  }\n  /**\n   * @param {Track.SID} trackSid\n   * @param {'publish'|'subscribe'} publishOrSubscribe\n   * @param {Track.Priority} priority\n   */\n\n\n  TrackPrioritySignaling.prototype.sendTrackPriorityUpdate = function (trackSid, publishOrSubscribe, priority) {\n    if (publishOrSubscribe !== 'subscribe') {\n      throw new Error('only subscribe priorities are supported, found: ' + publishOrSubscribe);\n    }\n\n    this._enqueuedPriorityUpdates.set(trackSid, priority);\n\n    if (this._transport) {\n      this._transport.publish({\n        type: 'track_priority',\n        track: trackSid,\n        subscribe: priority\n      });\n    }\n  };\n\n  return TrackPrioritySignaling;\n}(MediaSignaling);\n\nmodule.exports = TrackPrioritySignaling;","map":null,"metadata":{},"sourceType":"script"}