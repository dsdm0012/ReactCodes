{"ast":null,"code":"/* globals chrome, navigator */\n'use strict';\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n/**\n * Check whether the current browser is an Android device.\n * @returns {boolean}\n */\n\n\nfunction isAndroid() {\n  return /Android/.test(navigator.userAgent);\n}\n/**\n * Check whether the current browser is an iOS device.\n * @returns {boolean}\n */\n\n\nfunction isIOS() {\n  return /iPad|iPhone|iPod/.test(navigator.userAgent);\n}\n/**\n * Detects whether or not a device is an Apple touch screen device.\n * @returns {boolean}\n */\n\n\nfunction hasTouchScreen() {\n  return navigator && navigator.maxTouchPoints && navigator.maxTouchPoints > 2;\n}\n/**\n * Detects whether or not a device is an iPad\n * @returns {boolean}\n */\n\n\nfunction isIpad() {\n  return hasTouchScreen() && window.screen.width >= 744 && (/Macintosh/i.test(navigator.userAgent) || /iPad/.test(navigator.userAgent) || /iPad/.test(navigator.platform));\n}\n/**\n * Detects whether or not a device is an iPhone\n * @returns {boolean}\n */\n\n\nfunction isIphone() {\n  return hasTouchScreen() && window.screen.width <= 476 && (/Macintosh/i.test(navigator.userAgent) || /iPhone/.test(navigator.userAgent) || /iPhone/.test(navigator.platform));\n}\n/**\n * Check whether the current browser is a mobile browser\n * @returns {boolean}\n */\n\n\nfunction isMobile() {\n  return /Mobi/.test(navigator.userAgent);\n}\n/**\n * Check whether the current browser is non-Chromium Edge.\n * @param {string} browser\n * @returns {boolean}\n */\n\n\nfunction isNonChromiumEdge(browser) {\n  return browser === 'chrome' && /Edge/.test(navigator.userAgent) && (typeof chrome === 'undefined' || typeof chrome.runtime === 'undefined');\n}\n/**\n * Get the name of the rebranded Chromium browser, if any. Re-branded Chrome's user\n * agent has the following format:\n * <source>/<version> (<os>) <engine>/<version> (<engine_name>) Chrome/<version> [Mobile] Safari/<version>\n * @param browser\n * @returns {?string} Name of the rebranded Chrome browser, or null if the browser\n *   is either not Chrome or vanilla Chrome.\n */\n\n\nfunction rebrandedChromeBrowser(browser) {\n  // If the browser is not Chrome based, then it is not a rebranded Chrome browser.\n  if (browser !== 'chrome') {\n    return null;\n  } // Latest desktop Brave browser has a \"brave\" property in navigator.\n\n\n  if ('brave' in navigator) {\n    return 'brave';\n  } // Remove the \"(.+)\" entries from the user agent thereby retaining only the\n  // <name>[/<version>] entries.\n\n\n  var parenthesizedSubstrings = getParenthesizedSubstrings(navigator.userAgent);\n  var nameAndVersions = parenthesizedSubstrings.reduce(function (userAgent, substring) {\n    return userAgent.replace(substring, '');\n  }, navigator.userAgent); // Extract the potential browser <name>s by ignoring the first two names, which\n  // point to <source> and <engine>.\n\n  var matches = nameAndVersions.match(/[^\\s]+/g) || [];\n\n  var _a = __read(matches.map(function (nameAndVersion) {\n    return nameAndVersion.split('/')[0].toLowerCase();\n  })),\n      browserNames = _a.slice(2); // Extract the <name> that is not expected to be present in the vanilla Chrome\n  // browser, which indicates the rebranded name (ex: \"edg[e]\", \"electron\"). If null,\n  // then this is a vanilla Chrome browser.\n\n\n  return browserNames.find(function (name) {\n    return !['chrome', 'mobile', 'safari'].includes(name);\n  }) || null;\n}\n/**\n * Get the name of the mobile webkit based browser, if any.\n * @param browser\n * @returns {?string} Name of the mobile webkit based browser, or null if the browser\n *   is either not webkit based or mobile safari.\n */\n\n\nfunction mobileWebKitBrowser(browser) {\n  if (browser !== 'safari') {\n    return null;\n  }\n\n  if ('brave' in navigator) {\n    return 'brave';\n  }\n\n  return ['edge', 'edg'].find(function (name) {\n    return navigator.userAgent.toLowerCase().includes(name);\n  }) || null;\n}\n/**\n * Get the top level parenthesized substrings within a given string. Unmatched\n * parentheses are ignored.\n * Ex: \"abc) (def) gh(ij) (kl (mn)o) (pqr\" => [\"(def)\", \"(ij)\", \"(kl (mn)o)\"]\n * @param {string} string\n * @returns {string[]}\n */\n\n\nfunction getParenthesizedSubstrings(string) {\n  var openParenthesisPositions = [];\n  var substrings = [];\n\n  for (var i = 0; i < string.length; i++) {\n    if (string[i] === '(') {\n      openParenthesisPositions.push(i);\n    } else if (string[i] === ')' && openParenthesisPositions.length > 0) {\n      var openParenthesisPosition = openParenthesisPositions.pop();\n\n      if (openParenthesisPositions.length === 0) {\n        substrings.push(string.substring(openParenthesisPosition, i + 1));\n      }\n    }\n  }\n\n  return substrings;\n}\n\nmodule.exports = {\n  isAndroid: isAndroid,\n  isIOS: isIOS,\n  isIpad: isIpad,\n  isIphone: isIphone,\n  isMobile: isMobile,\n  isNonChromiumEdge: isNonChromiumEdge,\n  mobileWebKitBrowser: mobileWebKitBrowser,\n  rebrandedChromeBrowser: rebrandedChromeBrowser\n};","map":null,"metadata":{},"sourceType":"script"}