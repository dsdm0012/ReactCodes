{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { DEFAULT_DOMAIN } from './constants';\n\nconst loadExternalApi = domain => __awaiter(void 0, void 0, void 0, function* () {\n  return new Promise((resolve, reject) => {\n    if (window.JitsiMeetExternalAPI) {\n      return resolve(window.JitsiMeetExternalAPI);\n    }\n\n    const script = document.createElement('script');\n    script.async = true;\n    script.src = `https://${domain}/external_api.js`;\n\n    script.onload = () => resolve(window.JitsiMeetExternalAPI);\n\n    script.onerror = () => reject(new Error(`Script load error: ${script.src}`));\n\n    document.head.appendChild(script);\n  });\n});\n\nlet scriptPromise;\n/**\n * Injects the external_api.js script for the corresponding domain in DOM\n * and resolves with either the `JitsiMeetExternalApi` class definition or an error\n *\n * @param {string} domain - The domain of the external API\n * @returns {Promise<JitsiMeetExternalApi>} - the JitsiMeetExternalAPI or an error\n */\n\nexport const fetchExternalApi = function () {\n  let domain = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_DOMAIN;\n\n  if (scriptPromise) {\n    return scriptPromise;\n  }\n\n  scriptPromise = loadExternalApi(domain);\n  return scriptPromise;\n};","map":null,"metadata":{},"sourceType":"module"}