{"ast":null,"code":"/* eslint-disable no-console */\n'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar VALID_GROUPS = ['signaling', 'room', 'media', 'quality', 'video-processor', 'preflight'];\nvar VALID_LEVELS = ['debug', 'error', 'info', 'warning'];\n/**\n * EventObserver listens to SDK events and re-emits them on the\n * @link EventListener} with some additional information.\n * @extends EventEmitter\n * @emits EventObserver#event\n */\n\nvar EventObserver =\n/** @class */\nfunction (_super) {\n  __extends(EventObserver, _super);\n  /**\n   * Constructor.\n   * @param {InsightsPublisher} publisher\n   * @param {number} connectTimestamp\n   * @param {Log} log\n   * @param {EventListener} [eventListener]\n   */\n\n\n  function EventObserver(publisher, connectTimestamp, log, eventListener) {\n    if (eventListener === void 0) {\n      eventListener = null;\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this.on('event', function (_a) {\n      var name = _a.name,\n          group = _a.group,\n          level = _a.level,\n          payload = _a.payload;\n\n      if (typeof name !== 'string') {\n        log.error('Unexpected name: ', name);\n        throw new Error('Unexpected name: ', name);\n      }\n\n      if (!VALID_GROUPS.includes(group)) {\n        log.error('Unexpected group: ', group);\n        throw new Error('Unexpected group: ', group);\n      }\n\n      if (!VALID_LEVELS.includes(level)) {\n        log.error('Unexpected level: ', level);\n        throw new Error('Unexpected level: ', level);\n      }\n\n      var timestamp = Date.now();\n      var elapsedTime = timestamp - connectTimestamp;\n      var publisherPayload = Object.assign({\n        elapsedTime: elapsedTime,\n        level: level\n      }, payload ? payload : {});\n      publisher.publish(group, name, publisherPayload);\n      var event = Object.assign({\n        elapsedTime: elapsedTime,\n        group: group,\n        level: level,\n        name: name,\n        timestamp: timestamp\n      }, payload ? {\n        payload: payload\n      } : {});\n      var logLevel = {\n        debug: 'debug',\n        error: 'error',\n        info: 'info',\n        warning: 'warn'\n      }[level];\n      log[logLevel]('event', event);\n\n      if (eventListener && group === 'signaling') {\n        eventListener.emit('event', event);\n      }\n    });\n\n    return _this;\n  }\n\n  return EventObserver;\n}(EventEmitter);\n/**\n * An SDK event.\n * @event EventObserver#event\n * @param {{name: string, payload: *}} event\n */\n\n\nmodule.exports = EventObserver;","map":null,"metadata":{},"sourceType":"script"}