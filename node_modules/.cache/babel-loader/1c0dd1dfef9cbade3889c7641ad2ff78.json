{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar MediaSignaling = require('./mediasignaling');\n\nvar AsyncVar = require('../../util/asyncvar');\n\nvar Timeout = require('../../util/timeout');\n\nvar NETWORK_QUALITY_RESPONSE_TIME_MS = 5000;\n/**\n * @interface MediaSignalingTransport\n * @property {function(object): boolean} send\n * @emits MediaSignalingTransport#message\n */\n\n/**\n * The {@link MediaSignalingTransport} received a message.\n * @event MediaSignalingTransport#message\n * @param {object} message\n */\n\n/**\n * @interface LatencyStats\n * @property {number} jitter\n * @property {number} rtt\n * @property {number} level\n */\n\n/**\n * @interface FractionLostStats\n * @property {number} fractionLost\n * @property {number} level\n */\n\n/**\n * @interface BandwidthStats\n * @property {number} actual\n * @property {number} available\n * @property {number} level\n */\n\n/**\n * @interface SendOrRecvStats\n * @property {BandwidthStats} bandwidth\n * @property {FractionLostStats} fractionLost\n * @property {LatencyStats} latency\n */\n\n/**\n * @interface MediaLevels\n * @property {number} send\n * @property {SendOrRecvStats} sendStats\n * @property {number} recv\n * @property {SendOrRecvStats} recvStats\n */\n\n/**\n * @interface NetworkQualityLevels\n * @property {number} level\n * @property {MediaLevels} audio\n * @property {MediaLevels} video\n */\n\n/**\n * @typedef {PeerConnectionSummary} NetworkQualityInputs\n */\n\n/**\n * @classdesc The {@link NetworkQualitySignaling} class allows submitting\n *   {@link NetworkQualityInputs} for computing {@link NetworkQualityLevel}. It\n *   does so by sending and receiving messages over a\n *   {@link MediaSignalingTransport}. The exact transport used depends on the\n *   topology of the {@link Room} that {@link NetworkQualitySignaling} is being\n *   used within: for P2P Rooms, we re-use the {@link TransportV2}; and for\n *   Group Rooms, we use a {@link DataTransport}.\n * @emits NetworkQualitySignaling#updated\n */\n\nvar NetworkQualitySignaling =\n/** @class */\nfunction (_super) {\n  __extends(NetworkQualitySignaling, _super);\n  /**\n   * Construct a {@link NetworkQualitySignaling}.\n   * @param {Promise<DataTrackReceiver>} getReceiver\n   * @param {NetworkQualityConfigurationImpl} networkQualityConfiguration\n   */\n\n\n  function NetworkQualitySignaling(getReceiver, networkQualityConfiguration, options) {\n    var _this = _super.call(this, getReceiver, 'network_quality', options) || this;\n\n    Object.defineProperties(_this, {\n      _level: {\n        value: null,\n        writable: true\n      },\n      _levels: {\n        value: null,\n        writable: true\n      },\n      _remoteLevels: {\n        value: new Map(),\n        writable: true\n      },\n      _networkQualityInputs: {\n        value: new AsyncVar()\n      },\n      _resendTimer: {\n        value: new Timeout(function () {\n          // and schedule next timer at x1.5 the delay..\n          _this._resendTimer.setDelay(_this._resendTimer.delay * 1.5);\n\n          _this._sendNetworkQualityInputs();\n        }, NETWORK_QUALITY_RESPONSE_TIME_MS, false)\n      },\n      _networkQualityReportLevels: {\n        get: function get() {\n          return {\n            reportLevel: networkQualityConfiguration.local,\n            remoteReportLevel: networkQualityConfiguration.remote\n          };\n        }\n      }\n    });\n\n    _this.on('ready', function (transport) {\n      transport.on('message', function (message) {\n        _this._log.debug('Incoming: ', message);\n\n        switch (message.type) {\n          case 'network_quality':\n            _this._handleNetworkQualityMessage(message);\n\n            break;\n\n          default:\n            break;\n        }\n      });\n    });\n\n    _this._sendNetworkQualityInputs();\n\n    return _this;\n  }\n\n  Object.defineProperty(NetworkQualitySignaling.prototype, \"level\", {\n    /**\n     * Get the current {@link NetworkQualityLevel}, if any.\n     * @returns {?NetworkQualityLevel} level - initially null\n     */\n    get: function get() {\n      return this._level;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(NetworkQualitySignaling.prototype, \"levels\", {\n    /**\n     * Get the current {@link NetworkQualityLevels}, if any.\n     * @returns {?NetworkQualityLevels} levels - initially null\n     */\n    get: function get() {\n      return this._levels;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(NetworkQualitySignaling.prototype, \"remoteLevels\", {\n    /**\n     * Get the current {@link NetworkQualityLevels} of remote participants, if any.\n     * @returns {Map<String, NetworkQualityLevels>} remoteLevels\n     */\n    get: function get() {\n      return this._remoteLevels;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Check to see if the {@link NetworkQualityLevel} is new, and raise an\n   * event if necessary.\n   * @private\n   * @param {object} message\n   * @returns {void}\n   */\n\n  NetworkQualitySignaling.prototype._handleNetworkQualityMessage = function (message) {\n    var _this = this;\n\n    var updated = false;\n    var level = null;\n    var local = message ? message.local : null;\n\n    if (typeof local === 'number') {\n      // NOTE(mroberts): In prod, we plan to only send the level.\n      level = local;\n      this._levels = null;\n    } else if (typeof local === 'object' && local) {\n      // NOTE(mroberts): In dev, we plan to send the decomposed levels. An early\n      // VMS version does not compute `level` for us, so we fallback to taking\n      // the minimum ourselves.\n      this._levels = local;\n      level = typeof local.level === 'number' ? local.level : Math.min(local.audio.send, local.audio.recv, local.video.send, local.video.recv);\n    }\n\n    if (level !== null && this.level !== level) {\n      this._level = level;\n      updated = true;\n    }\n\n    this._remoteLevels = message && message.remotes ? message.remotes.reduce(function (levels, obj) {\n      var oldObj = _this._remoteLevels.get(obj.sid) || {};\n\n      if (oldObj.level !== obj.level) {\n        updated = true;\n      }\n\n      return levels.set(obj.sid, obj);\n    }, new Map()) : this._remoteLevels;\n\n    if (updated) {\n      this.emit('updated');\n    } // score is received. so reset the timer to default timeout.\n\n\n    this._resendTimer.setDelay(NETWORK_QUALITY_RESPONSE_TIME_MS); // timer is cleared only while we are sending inputs.\n    // if we are already sending inputs do not send them again.\n\n\n    if (this._resendTimer.isSet) {\n      setTimeout(function () {\n        return _this._sendNetworkQualityInputs();\n      }, 1000);\n    }\n  };\n  /**\n   * Start sending {@link NetworkQualityInputs}.\n   * @private\n   * @returns {Promise<void>}\n   */\n\n\n  NetworkQualitySignaling.prototype._sendNetworkQualityInputs = function () {\n    var _this = this;\n\n    this._resendTimer.clear();\n\n    return this._networkQualityInputs.take().then(function (networkQualityInputs) {\n      if (_this._transport) {\n        _this._transport.publish(createNetworkQualityInputsMessage(networkQualityInputs, _this._networkQualityReportLevels));\n      }\n    }).finally(function () {\n      _this._resendTimer.start();\n    });\n  };\n  /**\n   * Put {@link NetworkQualityInputs} to be used for computing\n   * {@link NetworkQualityLevel}.\n   * @param {NetworkQualityInputs} networkQualityInputs\n   * @returns {void}\n   */\n\n\n  NetworkQualitySignaling.prototype.put = function (networkQualityInputs) {\n    this._networkQualityInputs.put(networkQualityInputs);\n  };\n\n  return NetworkQualitySignaling;\n}(MediaSignaling);\n/**\n * The {@link NetworkQualityLevel} changed.\n * @event NetworkQualitySignaling#updated\n */\n\n/**\n * @typedef {object} NetworkQualityReportLevels\n * @param {number} reportLevel\n * @param {number} remoteReportLevel\n */\n\n/**\n * @param {NetworkQualityInputs} networkQualityInputs\n * @param {NetworkQualityReportLevels} networkQualityReportLevels\n * @returns {object} message\n */\n\n\nfunction createNetworkQualityInputsMessage(networkQualityInputs, networkQualityReportLevels) {\n  return Object.assign({\n    type: 'network_quality'\n  }, networkQualityInputs, networkQualityReportLevels);\n}\n\nmodule.exports = NetworkQualitySignaling;","map":null,"metadata":{},"sourceType":"script"}