{"ast":null,"code":"var _jsxFileName = \"/home/bibhu/EDRdevelopment/DevBranch/edresearchweb/src/allAppsStudent/Messages/VATChat/ChatWindow/ChatWindowTest.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport classes from \"./ChatWindow.module.css\";\nimport ChatUserInfoTopBar from \"./ChatUserInfoTopBar\";\nimport ChatScreen from \"./ChatScreen\";\nimport ChatInput from \"./ChatInput\";\nimport { w3cwebsocket as W3CWebSocket } from 'websocket';\nimport { Picker } from \"emoji-mart\";\nimport \"emoji-mart/css/emoji-mart.css\";\nimport Login from '../../../../CommonApps/Login';\nimport axiosInstance from '../../../../axios';\nimport { MdSend } from 'react-icons/md';\nimport { postchatcomment, getchatcomments } from '../../../../CommonApps/AllAPICalls';\n/*\nconst socketURL= 'ws://127.0.0.1:8000/ws/chat/class/'\n\n\n\n\nfunction reconnectingSocket(socketURL) {\n\n\n  console.log(\"reconnection starting\");\t\n  let client;\n  let isConnected = false;\n  let reconnectOnClose = true;\n  let messageListeners = [];\n  //let stateChangeListeners = [];\n\n  //function on(fn) {\n  //  messageListeners.push(fn);\n  //  console.log('1. ',messageListeners);\t  \n // }\n\n  //function off(fn) {\n  //  messageListeners = messageListeners.filter(l => l !== fn);\n // }\n\n  //function onStateChange(fn) {\n  //  stateChangeListeners.push(fn);\n  //  console.log('On state change: ',fn);\n\n\n  //  return () => {\n  //    stateChangeListeners = stateChangeListeners.filter(l => l !== fn);\n  //  };\n  // }\n\n\n\n\n\n\n  function start() {\n    console.log(\"starting new socket connection\");\t  \n    client = new WebSocket(socketURL);\n\n    client.onopen = () => {\n      isConnected = true;\n     // stateChangeListeners.forEach(fn => fn(true));\n    }\n\n   // const close = client.close;\n\n   // client.close = () => {\n   //   reconnectOnClose = false;\n    //  close.call(client);\n   // }\n\n    client.onmessage = (event) => {\n    \n       //console.log(\"on message....\",event.data); \n       const dataFromServer = JSON.parse(event.data);\n       console.log('data from server: ', dataFromServer.message);\n    }\n\n\n\n    client.onerror = (e) => console.error(e);\n\n    \t  \n    client.onclose = () => {\n    \n      isConnected = false;\n      //stateChangeListeners.forEach(fn => fn(false));\n\n      //if (!reconnectOnClose) {\n      //  console.log('ws closed by app');\n      //  return;\n      // }\n\n      console.log('ws closed by server');\n\n     // setTimeout(start, 3000);\n    }\n    \n\n  }\n\n   start();\n\nreturn {\n    //on,\n    //off,\n    //onStateChange,\n   // close: () => client.close(),\n    getClient: () => client,\n    isConnected: () => isConnected,\n  };\n\n\n\n\n}\n\n\nconst client = reconnectingSocket(socketURL);\n\n\nconsole.log(\"rerenderng:\");\n\nfunction useMessages() {\n  const [messages, setMessages] = useState(['hey you']);\n\n  \t \n // useEffect(() => {\n //   function handleMessage(message) {\n //     setMessages([...messages, message]);\n //   }\n //   client.on(handleMessage);\n //   return () => client.off(handleMessage);\n // }, [messages, setMessages]);\n  \n\n  return messages;\n}\n\n\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet isConnected = false;\nconst client = new W3CWebSocket('ws://127.0.0.1:8000/ws/chat/class/');\n\nclient.onclose = () => {\n  isConnected = false;\n};\n\nclient.onopen = () => {\n  isConnected = true;\n};\n\nconst ChatWindow = props => {\n  _s();\n\n  console.log('isConnected: ', isConnected);\n  let roomname = 'class';\n  const [commentObj, setChatCommentObj] = useState([{}]);\n  const [message, setMessage] = useState(''); //const messages = useMessages();\n\n  const messages = ['hey']; // const [isConnected, setIsConnected] = useState(client.isConnected());\n  // console.log(\"--isConnected1: \",client.isConnected());\t\n  //   useEffect(() => {\n  //  return client.onStateChange(setIsConnected);\n  //  }, [setIsConnected]);\n  //  useEffect(() => {\n  //    if (isConnected) {\n  //       client.getClient().send('hi');\n  //     }\n  //  }, [isConnected]);\n\n  function sendMessage(e) {\n    e.preventDefault();\n    client.send(JSON.stringify({\n      type: \"message\",\n      message: message\n    }));\n    console.log('sending message', message);\n    setMessage(''); //const close = client.close;\n    //client.close = () => {\n    //  close.call(client);\n    //  console.log('websocket closed');\n    // }\n\n    client.close();\n    console.log('isConnected inside send message', isConnected);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.chatWindow,\n    children: [/*#__PURE__*/_jsxDEV(ChatUserInfoTopBar, {\n      clickedUserId: props.clickedUserId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(ChatScreen, {\n      messages: messages,\n      commentObj: commentObj\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.chatInput,\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        className: classes.addCommentForm,\n        onSubmit: sendMessage,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.chatInput,\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            className: classes.inputTextBox,\n            value: message,\n            onChange: e => setMessage(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 23\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: classes.submit_button,\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: [/*#__PURE__*/_jsxDEV(MdSend, {\n              className: classes.sendButtonIcon\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 251,\n              columnNumber: 80\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 77\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 18\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 6\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 229,\n    columnNumber: 1\n  }, this);\n};\n\n_s(ChatWindow, \"w33JWKWDvHZWxM5on3XN9/sxgLo=\");\n\n_c = ChatWindow;\nexport default ChatWindow;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatWindow\");","map":{"version":3,"sources":["/home/bibhu/EDRdevelopment/DevBranch/edresearchweb/src/allAppsStudent/Messages/VATChat/ChatWindow/ChatWindowTest.js"],"names":["React","useState","useEffect","useRef","classes","ChatUserInfoTopBar","ChatScreen","ChatInput","w3cwebsocket","W3CWebSocket","Picker","Login","axiosInstance","MdSend","postchatcomment","getchatcomments","isConnected","client","onclose","onopen","ChatWindow","props","console","log","roomname","commentObj","setChatCommentObj","message","setMessage","messages","sendMessage","e","preventDefault","send","JSON","stringify","type","close","chatWindow","clickedUserId","chatInput","addCommentForm","inputTextBox","target","value","submit_button","sendButtonIcon"],"mappings":"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","sourcesContent":["import React,{useState,useEffect,useRef} from \"react\";\nimport classes from \"./ChatWindow.module.css\"\nimport ChatUserInfoTopBar from \"./ChatUserInfoTopBar\";\nimport ChatScreen from \"./ChatScreen\";\nimport ChatInput from \"./ChatInput\";\nimport {w3cwebsocket as W3CWebSocket } from 'websocket';\nimport { Picker } from \"emoji-mart\";\nimport \"emoji-mart/css/emoji-mart.css\";\nimport Login from '../../../../CommonApps/Login';\nimport axiosInstance from '../../../../axios';\nimport {MdSend} from 'react-icons/md';\nimport {postchatcomment,getchatcomments} from '../../../../CommonApps/AllAPICalls';\n\n\n/*\nconst socketURL= 'ws://127.0.0.1:8000/ws/chat/class/'\n\n\n\n\nfunction reconnectingSocket(socketURL) {\n\n\n  console.log(\"reconnection starting\");\t\n  let client;\n  let isConnected = false;\n  let reconnectOnClose = true;\n  let messageListeners = [];\n  //let stateChangeListeners = [];\n\n  //function on(fn) {\n  //  messageListeners.push(fn);\n  //  console.log('1. ',messageListeners);\t  \n // }\n\n  //function off(fn) {\n  //  messageListeners = messageListeners.filter(l => l !== fn);\n // }\n\n  //function onStateChange(fn) {\n  //  stateChangeListeners.push(fn);\n  //  console.log('On state change: ',fn);\n\n\n  //  return () => {\n  //    stateChangeListeners = stateChangeListeners.filter(l => l !== fn);\n  //  };\n  // }\n\n\n\n\n\n\n  function start() {\n    console.log(\"starting new socket connection\");\t  \n    client = new WebSocket(socketURL);\n\n    client.onopen = () => {\n      isConnected = true;\n     // stateChangeListeners.forEach(fn => fn(true));\n    }\n\n   // const close = client.close;\n\n   // client.close = () => {\n   //   reconnectOnClose = false;\n    //  close.call(client);\n   // }\n\n    client.onmessage = (event) => {\n    \n       //console.log(\"on message....\",event.data); \n       const dataFromServer = JSON.parse(event.data);\n       console.log('data from server: ', dataFromServer.message);\n    }\n\n\n\n    client.onerror = (e) => console.error(e);\n\n    \t  \n    client.onclose = () => {\n    \n      isConnected = false;\n      //stateChangeListeners.forEach(fn => fn(false));\n\n      //if (!reconnectOnClose) {\n      //  console.log('ws closed by app');\n      //  return;\n      // }\n\n      console.log('ws closed by server');\n\n     // setTimeout(start, 3000);\n    }\n    \n\n  }\n\n   start();\n\nreturn {\n    //on,\n    //off,\n    //onStateChange,\n   // close: () => client.close(),\n    getClient: () => client,\n    isConnected: () => isConnected,\n  };\n\n\n\n\n}\n\n\nconst client = reconnectingSocket(socketURL);\n\n\nconsole.log(\"rerenderng:\");\n\nfunction useMessages() {\n  const [messages, setMessages] = useState(['hey you']);\n\n  \t \n // useEffect(() => {\n //   function handleMessage(message) {\n //     setMessages([...messages, message]);\n //   }\n //   client.on(handleMessage);\n //   return () => client.off(handleMessage);\n // }, [messages, setMessages]);\n  \n\n  return messages;\n}\n\n\n*/\n\nlet isConnected= false;\nconst client = new W3CWebSocket('ws://127.0.0.1:8000/ws/chat/class/');\n\n\n\nclient.onclose = () => {\nisConnected=false;\n}\n\nclient.onopen=()=>{\nisConnected=true;\n\n\n}\n\n\n\n\n\nconst ChatWindow = (props) =>{\n\n\n   console.log('isConnected: ', isConnected);\n\n   let roomname='class'\n\n   const [commentObj,setChatCommentObj]=useState([{}]);\n\n   const [message, setMessage] = useState('');\n   \n\n   //const messages = useMessages();\n   const messages =['hey']\n\n  // const [isConnected, setIsConnected] = useState(client.isConnected());\n\n  // console.log(\"--isConnected1: \",client.isConnected());\t\n\n\n  //   useEffect(() => {\n  //  return client.onStateChange(setIsConnected);\n  //  }, [setIsConnected]);\n\n  //  useEffect(() => {\n \n  //    if (isConnected) {\n  //       client.getClient().send('hi');\n  //     }\n  //  }, [isConnected]);\n\n\n\n function sendMessage(e) {\n    e.preventDefault();\n    client.send(JSON.stringify({\n      type: \"message\",\n      message: message,\n    }))\n    console.log('sending message', message);\t \n    setMessage('');\n\n   //const close = client.close;\n\n   //client.close = () => {\n   //  close.call(client);\n   //  console.log('websocket closed');\n   // }\n\t \n   client.close();\n\n   console.log('isConnected inside send message', isConnected);\n\n\n\n\n   }\n\n\n\n\n\n\n\n\n\nreturn(\n\n<div className={classes.chatWindow}>\n\n<ChatUserInfoTopBar clickedUserId={props.clickedUserId} />\n\n<ChatScreen messages={messages}  commentObj={commentObj}/>\n\t\n<div className={classes.chatInput}>\n\n\n\n\n     <form className={classes.addCommentForm} onSubmit={sendMessage}>\n\n\n                  <div className={classes.chatInput} >\n\n                      <input className={classes.inputTextBox} value={message} onChange={e => setMessage(e.target.value)} />\n\n\n                  </div>\n\n                 \n                 <button type=\"submit\"  className= {classes.submit_button} ><b><MdSend className={classes.sendButtonIcon}/> </b> </button>\n                  \n     </form>\n\n\n</div>\n\n\n\n\t\n</div>\n\n);\n\n}\n\nexport default ChatWindow;\n"]},"metadata":{},"sourceType":"module"}