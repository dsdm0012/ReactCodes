{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar LocalParticipantSignaling = require('../localparticipant');\n\nvar LocalTrackPublicationV2 = require('./localtrackpublication');\n\nvar DEFAULT_LOG_LEVEL = require('../../util/constants').DEFAULT_LOG_LEVEL;\n\nvar Log = require('../../util/log');\n\nvar _a = require('../../util'),\n    buildLogLevels = _a.buildLogLevels,\n    isDeepEqual = _a.isDeepEqual;\n/**\n * @extends ParticipantSignaling\n * @property {BandwidthProfileOptions} bandwidthProfile\n * @property {NetworkQualityConfigurationImpl} networkQualityConfiguration\n * @property {number} revision\n * @emits LocalParticipantV2#updated\n */\n\n\nvar LocalParticipantV2 =\n/** @class */\nfunction (_super) {\n  __extends(LocalParticipantV2, _super);\n  /**\n   * Construct a {@link LocalParticipantV2}.\n   * @param {EncodingParametersImpl} encodingParameters\n   * @param {NetworkQualityConfigurationImpl} networkQualityConfiguration\n   * @param {object} [options]\n   */\n\n\n  function LocalParticipantV2(encodingParameters, networkQualityConfiguration, options) {\n    var _this = this;\n\n    options = Object.assign({\n      logLevel: DEFAULT_LOG_LEVEL,\n      LocalTrackPublicationV2: LocalTrackPublicationV2\n    }, options);\n    _this = _super.call(this) || this;\n    var logLevels = buildLogLevels(options.logLevel);\n    Object.defineProperties(_this, {\n      _bandwidthProfile: {\n        value: null,\n        writable: true\n      },\n      _bandwidthProfileRevision: {\n        value: 0,\n        writable: true\n      },\n      _encodingParameters: {\n        value: encodingParameters\n      },\n      _removeListeners: {\n        value: new Map()\n      },\n      _LocalTrackPublicationV2: {\n        value: options.LocalTrackPublicationV2\n      },\n      _log: {\n        value: options.log ? options.log.createLog('default', _this) : new Log('default', _this, logLevels, options.loggerName)\n      },\n      _publishedRevision: {\n        writable: true,\n        value: 0\n      },\n      _revision: {\n        writable: true,\n        value: 1\n      },\n      _signalingRegion: {\n        value: null,\n        writable: true\n      },\n      bandwidthProfile: {\n        enumerable: true,\n        get: function () {\n          return this._bandwidthProfile;\n        }\n      },\n      bandwidthProfileRevision: {\n        enumerable: true,\n        get: function () {\n          return this._bandwidthProfileRevision;\n        }\n      },\n      networkQualityConfiguration: {\n        enumerable: true,\n        value: networkQualityConfiguration\n      },\n      revision: {\n        enumerable: true,\n        get: function () {\n          return this._revision;\n        }\n      },\n      signalingRegion: {\n        enumerable: true,\n        get: function () {\n          return this._signalingRegion;\n        }\n      }\n    });\n    return _this;\n  }\n\n  LocalParticipantV2.prototype.toString = function () {\n    return \"[LocalParticipantSignaling: \" + this.sid + \"]\";\n  };\n  /**\n   * Set the signalingRegion.\n   * @param {string} signalingRegion.\n   */\n\n\n  LocalParticipantV2.prototype.setSignalingRegion = function (signalingRegion) {\n    if (!this._signalingRegion) {\n      this._signalingRegion = signalingRegion;\n    }\n  };\n  /**\n   * Update the {@link BandwidthProfileOptions}.\n   * @param {BandwidthProfileOptions} bandwidthProfile\n   */\n\n\n  LocalParticipantV2.prototype.setBandwidthProfile = function (bandwidthProfile) {\n    if (!isDeepEqual(this._bandwidthProfile, bandwidthProfile)) {\n      // NOTE(mmalavalli): Object.assign() copies the values of only\n      // the top level properties. In order to deep copy the object, we\n      // stringify and parse the object.\n      this._bandwidthProfile = JSON.parse(JSON.stringify(bandwidthProfile));\n      this._bandwidthProfileRevision++;\n      this.didUpdate();\n    }\n  };\n  /**\n   * returns current {@link EncodingParametersImpl}.\n   * @returns {EncodingParametersImpl}\n   */\n\n\n  LocalParticipantV2.prototype.getParameters = function () {\n    return this._encodingParameters;\n  };\n  /**\n   * Set the {@link EncodingParameters}.\n   * @param {?EncodingParameters} encodingParameters\n   * @returns {this}\n   */\n\n\n  LocalParticipantV2.prototype.setParameters = function (encodingParameters) {\n    this._encodingParameters.update(encodingParameters);\n\n    return this;\n  };\n  /**\n   * Update the {@link LocalParticipantV2} with the new state.\n   * @param {Published} published\n   * @returns {this}\n   */\n\n\n  LocalParticipantV2.prototype.update = function (published) {\n    if (this._publishedRevision >= published.revision) {\n      return this;\n    }\n\n    this._publishedRevision = published.revision;\n    published.tracks.forEach(function (publicationState) {\n      var localTrackPublicationV2 = this.tracks.get(publicationState.id);\n\n      if (localTrackPublicationV2) {\n        localTrackPublicationV2.update(publicationState);\n      }\n    }, this);\n    return this;\n  };\n  /**\n   * @protected\n   * @param {DataTrackSender|MediaTrackSender} trackSender\n   * @param {string} name\n   * @param {Track.Priority} priority\n   * @returns {LocalTrackPublicationV2}\n   */\n\n\n  LocalParticipantV2.prototype._createLocalTrackPublicationSignaling = function (trackSender, name, priority) {\n    return new this._LocalTrackPublicationV2(trackSender, name, priority);\n  };\n  /**\n   * Add a {@link LocalTrackPublicationV2} for the given {@link DataTrackSender}\n   * or {@link MediaTrackSender} to the {@link LocalParticipantV2}.\n   * @param {DataTrackSender|MediaTrackSender} trackSender\n   * @param {string} name\n   * @param {Track.Priority} priority\n   * @returns {this}\n   */\n\n\n  LocalParticipantV2.prototype.addTrack = function (trackSender, name, priority) {\n    var _this = this;\n\n    _super.prototype.addTrack.call(this, trackSender, name, priority);\n\n    var publication = this.getPublication(trackSender);\n    var isEnabled = publication.isEnabled,\n        updatedPriority = publication.updatedPriority;\n\n    var updated = function () {\n      // NOTE(mmalavalli): The LocalParticipantV2's state is only published if\n      // the \"updated\" event is emitted due to LocalTrackPublicationV2's\n      // .isEnabled or .updatedPriority being changed. We do not publish if it is fired due to the\n      // LocalTrackPublicationV2's .sid being set.\n      if (isEnabled !== publication.isEnabled || updatedPriority !== publication.updatedPriority) {\n        _this.didUpdate();\n\n        isEnabled = publication.isEnabled;\n        updatedPriority = publication.updatedPriority;\n      }\n    };\n\n    publication.on('updated', updated);\n\n    this._removeListener(publication);\n\n    this._removeListeners.set(publication, function () {\n      return publication.removeListener('updated', updated);\n    });\n\n    this.didUpdate();\n    return this;\n  };\n  /**\n   * @private\n   * @param {LocalTrackPublicationV2} publication\n   * @returns {void}\n   */\n\n\n  LocalParticipantV2.prototype._removeListener = function (publication) {\n    var removeListener = this._removeListeners.get(publication);\n\n    if (removeListener) {\n      removeListener();\n    }\n  };\n  /**\n   * Get the current state of the {@link LocalParticipantV2}.\n   * @returns {object}\n   */\n\n\n  LocalParticipantV2.prototype.getState = function () {\n    return {\n      revision: this.revision,\n      tracks: Array.from(this.tracks.values()).map(function (track) {\n        return track.getState();\n      })\n    };\n  };\n  /**\n   * Increment the revision for the {@link LocalParticipantV2}.\n   * @private\n   * @returns {void}\n   */\n\n\n  LocalParticipantV2.prototype.didUpdate = function () {\n    this._revision++;\n    this.emit('updated');\n  };\n  /**\n   * Remove the {@link LocalTrackPublicationV2} for the given {@link DataTrackSender}\n   * or {@link MediaTrackSender} from the {@link LocalParticipantV2}.\n   * @param {DataTrackSender|MediaTrackSender} trackSender\n   * @returns {?LocalTrackPublicationV2}\n   */\n\n\n  LocalParticipantV2.prototype.removeTrack = function (trackSender) {\n    var publication = _super.prototype.removeTrack.call(this, trackSender);\n\n    if (publication) {\n      trackSender.removeClone(publication.trackTransceiver);\n\n      this._removeListener(publication);\n\n      this.didUpdate();\n    }\n\n    return publication;\n  };\n  /**\n   * Updates the verbosity of network quality information.\n   * @param {NetworkQualityConfiguration} networkQualityConfiguration\n   * @returns {void}\n   */\n\n\n  LocalParticipantV2.prototype.setNetworkQualityConfiguration = function (networkQualityConfiguration) {\n    this.networkQualityConfiguration.update(networkQualityConfiguration);\n  };\n  /**\n   * updates encodings for simulcast layers.\n   * @param {Track.SID} trackSid\n   * @param {Array<{enabled: boolean, layer_index: number}>} encodings\n   * @returns {Promise<string>} string indicating result of the operation. can be one of\n   *  \"OK\", \"INVALID_HINT\", \"COULD_NOT_APPLY_HINT\", \"UNKNOWN_TRACK\"\n   */\n\n\n  LocalParticipantV2.prototype.setPublisherHint = function (trackSid, encodings) {\n    var trackSignaling = Array.from(this.tracks.values()).find(function (trackPub) {\n      return trackPub.sid === trackSid;\n    });\n\n    if (!trackSignaling) {\n      this._log.warn(\"track:\" + trackSid + \" not found\");\n\n      return Promise.resolve('UNKNOWN_TRACK');\n    }\n\n    return trackSignaling.trackTransceiver.setPublisherHint(encodings);\n  };\n\n  return LocalParticipantV2;\n}(LocalParticipantSignaling);\n/**\n * @interface Published\n * @property {number} revision\n * @property {Array<PublishedTrack>} tracks\n */\n\n/**\n * @typedef {CreatedTrack|ReadyTrack|FailedTrack} PublishedTrack\n */\n\n/**\n * @interface CreatedTrack\n * @property {Track.ID} id\n * @property {string} state - \"created\"\n */\n\n/**\n * @interface ReadyTrack\n * @property {Track.ID} id\n * @property {Track.SID} sid\n * @property {string} state - \"ready\"\n */\n\n/**\n * @interface FailedTrack\n * @property {Track.ID} id\n * @property {TrackError} error\n * @property {string} state - \"failed\"\n */\n\n/**\n * @interface TrackError\n * @property {number} code\n * @property {string} message\n */\n\n/**\n * @event LocalParticipantV2#updated\n */\n\n\nmodule.exports = LocalParticipantV2;","map":null,"metadata":{},"sourceType":"script"}