{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar RemoteParticipantSignaling = require('../remoteparticipant');\n\nvar RemoteTrackPublicationV2 = require('./remotetrackpublication');\n/**\n * @extends RemoteParticipantSignaling\n * @property {?number} revision\n */\n\n\nvar RemoteParticipantV2 =\n/** @class */\nfunction (_super) {\n  __extends(RemoteParticipantV2, _super);\n  /**\n   * Construct a {@link RemoteParticipantV2}.\n   * @param {object} participantState\n   * @param {function(Track.SID): boolean} getInitialTrackSwitchOffState\n   * @param {function(Track.SID, Track.Priority): boolean} setPriority\n   * @param {function(Track.SID, ClientRenderHint): Promise<void>} setRenderHint\n   * @param {function(Track.SID): void} clearTrackHint\n   * @param {object} [options]\n   */\n\n\n  function RemoteParticipantV2(participantState, getInitialTrackSwitchOffState, setPriority, setRenderHint, clearTrackHint, options) {\n    var _this = _super.call(this, participantState.sid, participantState.identity) || this;\n\n    options = Object.assign({\n      RemoteTrackPublicationV2: RemoteTrackPublicationV2\n    }, options);\n    Object.defineProperties(_this, {\n      _revision: {\n        writable: true,\n        value: null\n      },\n      _RemoteTrackPublicationV2: {\n        value: options.RemoteTrackPublicationV2\n      },\n      _getInitialTrackSwitchOffState: {\n        value: getInitialTrackSwitchOffState\n      },\n      updateSubscriberTrackPriority: {\n        value: function value(trackSid, priority) {\n          return setPriority(trackSid, priority);\n        }\n      },\n      updateTrackRenderHint: {\n        value: function value(trackSid, renderHint) {\n          return setRenderHint(trackSid, renderHint);\n        }\n      },\n      clearTrackHint: {\n        value: function value(trackSid) {\n          return clearTrackHint(trackSid);\n        }\n      },\n      revision: {\n        enumerable: true,\n        get: function get() {\n          return this._revision;\n        }\n      }\n    });\n    return _this.update(participantState);\n  }\n  /**\n   * @private\n   */\n\n\n  RemoteParticipantV2.prototype._getOrCreateTrack = function (trackState) {\n    var RemoteTrackPublicationV2 = this._RemoteTrackPublicationV2;\n    var track = this.tracks.get(trackState.sid);\n\n    if (!track) {\n      var isSwitchedOff = this._getInitialTrackSwitchOffState(trackState.sid);\n\n      track = new RemoteTrackPublicationV2(trackState, isSwitchedOff);\n      this.addTrack(track);\n    }\n\n    return track;\n  };\n  /**\n   * Update the {@link RemoteParticipantV2} with the new state.\n   * @param {object} participantState\n   * @returns {this}\n   */\n\n\n  RemoteParticipantV2.prototype.update = function (participantState) {\n    var _this = this;\n\n    if (this.revision !== null && participantState.revision <= this.revision) {\n      return this;\n    }\n\n    this._revision = participantState.revision;\n    var tracksToKeep = new Set();\n    participantState.tracks.forEach(function (trackState) {\n      var track = _this._getOrCreateTrack(trackState);\n\n      track.update(trackState);\n      tracksToKeep.add(track);\n    });\n    this.tracks.forEach(function (track) {\n      if (!tracksToKeep.has(track)) {\n        _this.removeTrack(track);\n      }\n    });\n\n    switch (participantState.state) {\n      case 'disconnected':\n        this.disconnect();\n        break;\n\n      case 'reconnecting':\n        this.reconnecting();\n        break;\n\n      case 'connected':\n        this.connect(this.sid, this.identity);\n        break;\n    }\n\n    return this;\n  };\n\n  return RemoteParticipantV2;\n}(RemoteParticipantSignaling);\n\nmodule.exports = RemoteParticipantV2;","map":null,"metadata":{},"sourceType":"script"}