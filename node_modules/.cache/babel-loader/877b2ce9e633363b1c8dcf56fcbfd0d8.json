{"ast":null,"code":"import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { DEFAULT_DOMAIN } from '../constants';\nimport { fetchExternalApi } from '../init';\nimport { generateComponentId } from '../utils';\n/**\n * Returns the JitsiMeeting Component with access to a custom External API\n * to be used as-it-is in React projects\n *\n * @param {IJitsiMeetingProps} props the component's props\n * @returns {ReactElement} the `JitsiMeeting` Component\n * @example\n  ```js\n    <JitsiMeeting\n        domain='meet.jit.si'\n        roomName: 'TestingJitsiMeetingComponent'\n        spinner={CustomSpinner}\n        onApiReady={(externalApi) => console.log(externalApi)}\n    />\n  ```\n */\n\nconst JitsiMeeting = _ref => {\n  let {\n    domain = DEFAULT_DOMAIN,\n    roomName,\n    configOverwrite,\n    interfaceConfigOverwrite,\n    jwt,\n    invitees,\n    devices,\n    userInfo,\n    release,\n    spinner: Spinner,\n    onApiReady,\n    onReadyToClose,\n    getIFrameRef\n  } = _ref;\n  const [componentId, setComponentId] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [apiLoaded, setApiLoaded] = useState(false);\n  const externalApi = useRef();\n  const apiRef = useRef();\n  const meetingRef = useRef(null);\n  useEffect(() => {\n    setComponentId(generateComponentId('jitsiMeeting'));\n    fetchExternalApi(domain).then(api => {\n      externalApi.current = api;\n      setApiLoaded(true);\n    }).catch(e => console.error(e.message));\n  }, []);\n  const loadIFrame = useCallback(JitsiMeetExternalAPI => {\n    apiRef.current = new JitsiMeetExternalAPI(domain, {\n      roomName,\n      configOverwrite,\n      interfaceConfigOverwrite,\n      jwt,\n      invitees,\n      devices,\n      userInfo,\n      release,\n      parentNode: meetingRef.current\n    });\n    setLoading(false);\n\n    if (apiRef.current) {\n      typeof onApiReady === 'function' && onApiReady(apiRef.current);\n      apiRef.current.on('readyToClose', () => {\n        typeof onReadyToClose === 'function' && onReadyToClose();\n      });\n\n      if (meetingRef.current && typeof getIFrameRef === 'function') {\n        getIFrameRef(meetingRef.current);\n      }\n    }\n  }, [apiRef, meetingRef, onApiReady, onReadyToClose, getIFrameRef, domain, roomName, configOverwrite, interfaceConfigOverwrite, jwt, invitees, devices, userInfo]);\n  useEffect(() => {\n    if (apiLoaded && !apiRef.current) {\n      if (externalApi.current) {\n        loadIFrame(externalApi.current);\n      }\n    }\n  }, [apiLoaded, loadIFrame]);\n  const renderLoadingSpinner = useCallback(() => {\n    if (!Spinner) {\n      return null;\n    }\n\n    if (!loading || apiRef.current) {\n      return null;\n    }\n\n    return _jsx(Spinner, {}, void 0);\n  }, [Spinner, apiRef.current]);\n  return _jsxs(_Fragment, {\n    children: [renderLoadingSpinner(), _jsx(\"div\", {\n      id: componentId,\n      ref: meetingRef\n    }, componentId)]\n  }, void 0);\n};\n\nexport default JitsiMeeting;","map":null,"metadata":{},"sourceType":"module"}