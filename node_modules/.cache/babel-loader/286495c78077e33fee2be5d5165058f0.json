{"ast":null,"code":"/**\n * Expose `Backoff`.\n */\nvar Backoff =\n/** @class */\nfunction () {\n  /**\n   * Construct a {@link Backoff}.\n   * @param {object} options\n   * @property {number} min - Initial timeout in milliseconds [100]\n   * @property {number} max - Max timeout [10000]\n   * @property {boolean} jitter - Apply jitter [0]\n   * @property {number} factor - Multiplication factor for Backoff operation [2]\n   */\n  function Backoff(options) {\n    Object.defineProperties(this, {\n      _min: {\n        value: options.min || 100\n      },\n      _max: {\n        value: options.max || 10000\n      },\n      _jitter: {\n        value: options.jitter > 0 && options.jitter <= 1 ? options.jitter : 0\n      },\n      _factor: {\n        value: options.factor || 2\n      },\n      _attempts: {\n        value: 0,\n        writable: true\n      },\n      _duration: {\n        enumerable: false,\n        get: function () {\n          var ms = this._min * Math.pow(this._factor, this._attempts);\n\n          if (this._jitter) {\n            var rand = Math.random();\n            var deviation = Math.floor(rand * this._jitter * ms);\n            ms = (Math.floor(rand * 10) & 1) === 0 ? ms - deviation : ms + deviation;\n          }\n\n          return Math.min(ms, this._max) | 0;\n        }\n      },\n      _timeoutID: {\n        value: null,\n        writable: true\n      }\n    });\n  }\n  /**\n  * Start the backoff operation.\n  * @param {function} fn - Function to call\n  * @return {void}\n  * @api public\n  */\n\n\n  Backoff.prototype.backoff = function (fn) {\n    var _this = this;\n\n    var duration = this._duration;\n\n    if (this._timeoutID) {\n      clearTimeout(this._timeoutID);\n      this._timeoutID = null;\n    }\n\n    this._timeoutID = setTimeout(function () {\n      _this._attempts++;\n      fn();\n    }, duration);\n  };\n  /**\n  * Reset the number of attempts and clear the timer.\n  *\n  * @return {void}\n  * @api public\n  */\n\n\n  Backoff.prototype.reset = function () {\n    this._attempts = 0;\n\n    if (this._timeoutID) {\n      clearTimeout(this._timeoutID);\n      this._timeoutID = null;\n    }\n  };\n\n  return Backoff;\n}();\n\nmodule.exports = Backoff;","map":null,"metadata":{},"sourceType":"script"}