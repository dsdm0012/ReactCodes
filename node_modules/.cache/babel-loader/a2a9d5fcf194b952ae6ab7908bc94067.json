{"ast":null,"code":"import _slicedToArray from \"/home/bibhu/EDRdevelopment/DevBranch/edresearchweb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { DEFAULT_DOMAIN } from '../constants';\nimport { fetchExternalApi } from '../init';\nimport { generateComponentId } from '../utils';\n/**\n * Returns the JitsiMeeting Component with access to a custom External API\n * to be used as-it-is in React projects\n *\n * @param {IJitsiMeetingProps} props the component's props\n * @returns {ReactElement} the `JitsiMeeting` Component\n * @example\n  ```js\n    <JitsiMeeting\n        domain='meet.jit.si'\n        roomName: 'TestingJitsiMeetingComponent'\n        spinner={CustomSpinner}\n        onApiReady={(externalApi) => console.log(externalApi)}\n    />\n  ```\n */\n\nvar JitsiMeeting = function JitsiMeeting(_ref) {\n  var _ref$domain = _ref.domain,\n      domain = _ref$domain === void 0 ? DEFAULT_DOMAIN : _ref$domain,\n      roomName = _ref.roomName,\n      configOverwrite = _ref.configOverwrite,\n      interfaceConfigOverwrite = _ref.interfaceConfigOverwrite,\n      jwt = _ref.jwt,\n      invitees = _ref.invitees,\n      devices = _ref.devices,\n      userInfo = _ref.userInfo,\n      release = _ref.release,\n      Spinner = _ref.spinner,\n      onApiReady = _ref.onApiReady,\n      onReadyToClose = _ref.onReadyToClose,\n      getIFrameRef = _ref.getIFrameRef;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      componentId = _useState2[0],\n      setComponentId = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loading = _useState4[0],\n      setLoading = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      apiLoaded = _useState6[0],\n      setApiLoaded = _useState6[1];\n\n  var externalApi = useRef();\n  var apiRef = useRef();\n  var meetingRef = useRef(null);\n  useEffect(function () {\n    setComponentId(generateComponentId('jitsiMeeting'));\n    fetchExternalApi(domain).then(function (api) {\n      externalApi.current = api;\n      setApiLoaded(true);\n    }).catch(function (e) {\n      return console.error(e.message);\n    });\n  }, []);\n  var loadIFrame = useCallback(function (JitsiMeetExternalAPI) {\n    apiRef.current = new JitsiMeetExternalAPI(domain, {\n      roomName: roomName,\n      configOverwrite: configOverwrite,\n      interfaceConfigOverwrite: interfaceConfigOverwrite,\n      jwt: jwt,\n      invitees: invitees,\n      devices: devices,\n      userInfo: userInfo,\n      release: release,\n      parentNode: meetingRef.current\n    });\n    setLoading(false);\n\n    if (apiRef.current) {\n      typeof onApiReady === 'function' && onApiReady(apiRef.current);\n      apiRef.current.on('readyToClose', function () {\n        typeof onReadyToClose === 'function' && onReadyToClose();\n      });\n\n      if (meetingRef.current && typeof getIFrameRef === 'function') {\n        getIFrameRef(meetingRef.current);\n      }\n    }\n  }, [apiRef, meetingRef, onApiReady, onReadyToClose, getIFrameRef, domain, roomName, configOverwrite, interfaceConfigOverwrite, jwt, invitees, devices, userInfo]);\n  useEffect(function () {\n    if (apiLoaded && !apiRef.current) {\n      if (externalApi.current) {\n        loadIFrame(externalApi.current);\n      }\n    }\n  }, [apiLoaded, loadIFrame]);\n  var renderLoadingSpinner = useCallback(function () {\n    if (!Spinner) {\n      return null;\n    }\n\n    if (!loading || apiRef.current) {\n      return null;\n    }\n\n    return _jsx(Spinner, {}, void 0);\n  }, [Spinner, apiRef.current]);\n  return _jsxs(_Fragment, {\n    children: [renderLoadingSpinner(), _jsx(\"div\", {\n      id: componentId,\n      ref: meetingRef\n    }, componentId)]\n  }, void 0);\n};\n\nexport default JitsiMeeting;","map":null,"metadata":{},"sourceType":"module"}