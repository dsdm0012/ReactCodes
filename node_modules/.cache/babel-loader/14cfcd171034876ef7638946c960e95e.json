{"ast":null,"code":"var _jsxFileName = \"/home/bibhu/EDRdevelopment/DevBranch/edresearchweb/src/allAppsStudent/Messages/VATChat/ChatWindow/ChatWindowTest.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport classes from \"./ChatWindow.module.css\";\nimport ChatUserInfoTopBar from \"./ChatUserInfoTopBar\";\nimport ChatScreen from \"./ChatScreen\";\nimport ChatInput from \"./ChatInput\";\nimport { w3cwebsocket as W3CWebSocket } from 'websocket';\nimport { Picker } from \"emoji-mart\";\nimport \"emoji-mart/css/emoji-mart.css\";\nimport Login from '../../../../CommonApps/Login';\nimport axiosInstance from '../../../../axios';\nimport { MdSend } from 'react-icons/md';\nimport { postchatcomment, getchatcomments } from '../../../../CommonApps/AllAPICalls';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socketURL = 'ws://127.0.0.1:8000/ws/chat/class/';\n\nfunction reconnectingSocket(socketURL) {\n  console.log(\"reconnection starting\");\n  let client;\n  let isConnected = false; //let reconnectOnClose = true;\n\n  let messageListeners = []; //let stateChangeListeners = [];\n  //function on(fn) {\n  //  messageListeners.push(fn);\n  //  console.log('1. ',messageListeners);\t  \n  // }\n  //function off(fn) {\n  //  messageListeners = messageListeners.filter(l => l !== fn);\n  // }\n  //function onStateChange(fn) {\n  //  stateChangeListeners.push(fn);\n  //  console.log('On state change: ',fn);\n  //  return () => {\n  //    stateChangeListeners = stateChangeListeners.filter(l => l !== fn);\n  //  };\n  // }\n\n  function start() {\n    client = new WebSocket(socketURL);\n\n    client.onopen = () => {\n      isConnected = true; // stateChangeListeners.forEach(fn => fn(true));\n    }; // const close = client.close;\n    // client.close = () => {\n    //   reconnectOnClose = false;\n    //  close.call(client);\n    // }\n\n\n    client.onmessage = event => {\n      messageListeners.forEach(fn => fn(event.data)); //console.log(\"on message....\",event.data); \n\n      const dataFromServer = JSON.parse(event.data);\n      console.log('data from server: ', dataFromServer.message);\n      console.log('messageListeners: ', messageListeners);\n    }; //client.onerror = (e) => console.error(e);\n\n    /*\t  \n    client.onclose = () => {\n    \n      isConnected = false;\n      stateChangeListeners.forEach(fn => fn(false));\n       if (!reconnectOnClose) {\n        console.log('ws closed by app');\n        return;\n      }\n       console.log('ws closed by server');\n       setTimeout(start, 3000);\n    }\n    */\n\n  }\n\n  start();\n  return {\n    //on,\n    //off,\n    //onStateChange,\n    // close: () => client.close(),\n    getClient: () => client,\n    isConnected: () => isConnected\n  };\n}\n\nconst client = reconnectingSocket(socketURL);\nconsole.log(\"rerenderng:\");\n\nfunction useMessages() {\n  _s();\n\n  const [messages, setMessages] = useState(['hey you']);\n  /*\t \n  useEffect(() => {\n    function handleMessage(message) {\n      setMessages([...messages, message]);\n    }\n    client.on(handleMessage);\n    return () => client.off(handleMessage);\n  }, [messages, setMessages]);\n  */\n\n  return messages;\n}\n\n_s(useMessages, \"wRaITUJLhFkolybZ+75UGZfetdM=\");\n\nconst ChatWindow = props => {\n  _s2();\n\n  let roomname = 'class';\n  const [commentObj, setChatCommentObj] = useState([{}]);\n  const [message, setMessage] = useState('');\n  const messages = useMessages(); // const [isConnected, setIsConnected] = useState(client.isConnected());\n  //   console.log(\"--isConnected1: \",client.isConnected());\t\n  //   useEffect(() => {\n  //  return client.onStateChange(setIsConnected);\n  //  }, [setIsConnected]);\n  //  useEffect(() => {\n  //    if (isConnected) {\n  //       client.getClient().send('hi');\n  //     }\n  //  }, [isConnected]);\n\n  function sendMessage(e) {\n    e.preventDefault();\n    client.getClient().send(JSON.stringify({\n      type: \"message\",\n      message: message\n    }));\n    console.log('sending message', message);\n    setMessage('');\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.chatWindow,\n    children: [/*#__PURE__*/_jsxDEV(ChatUserInfoTopBar, {\n      clickedUserId: props.clickedUserId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(ChatScreen, {\n      messages: messages,\n      commentObj: commentObj\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.chatInput,\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        className: classes.addCommentForm,\n        onSubmit: sendMessage,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.chatInput,\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            className: classes.inputTextBox,\n            value: message,\n            onChange: e => setMessage(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 23\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: classes.submit_button,\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: [/*#__PURE__*/_jsxDEV(MdSend, {\n              className: classes.sendButtonIcon\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 80\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 77\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 18\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 6\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 204,\n    columnNumber: 1\n  }, this);\n};\n\n_s2(ChatWindow, \"OaeVuiP+HMOyrygYJVWIvzoGJSk=\", false, function () {\n  return [useMessages];\n});\n\n_c = ChatWindow;\nexport default ChatWindow;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatWindow\");","map":{"version":3,"sources":["/home/bibhu/EDRdevelopment/DevBranch/edresearchweb/src/allAppsStudent/Messages/VATChat/ChatWindow/ChatWindowTest.js"],"names":["React","useState","useEffect","useRef","classes","ChatUserInfoTopBar","ChatScreen","ChatInput","w3cwebsocket","W3CWebSocket","Picker","Login","axiosInstance","MdSend","postchatcomment","getchatcomments","socketURL","reconnectingSocket","console","log","client","isConnected","messageListeners","start","WebSocket","onopen","onmessage","event","forEach","fn","data","dataFromServer","JSON","parse","message","getClient","useMessages","messages","setMessages","ChatWindow","props","roomname","commentObj","setChatCommentObj","setMessage","sendMessage","e","preventDefault","send","stringify","type","chatWindow","clickedUserId","chatInput","addCommentForm","inputTextBox","target","value","submit_button","sendButtonIcon"],"mappings":"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","sourcesContent":["import React,{useState,useEffect,useRef} from \"react\";\nimport classes from \"./ChatWindow.module.css\"\nimport ChatUserInfoTopBar from \"./ChatUserInfoTopBar\";\nimport ChatScreen from \"./ChatScreen\";\nimport ChatInput from \"./ChatInput\";\nimport {w3cwebsocket as W3CWebSocket } from 'websocket';\nimport { Picker } from \"emoji-mart\";\nimport \"emoji-mart/css/emoji-mart.css\";\nimport Login from '../../../../CommonApps/Login';\nimport axiosInstance from '../../../../axios';\nimport {MdSend} from 'react-icons/md';\nimport {postchatcomment,getchatcomments} from '../../../../CommonApps/AllAPICalls';\n\nconst socketURL= 'ws://127.0.0.1:8000/ws/chat/class/'\n\n\n\n\n\nfunction reconnectingSocket(socketURL) {\n\n\n  console.log(\"reconnection starting\");\t\n  let client;\n  let isConnected = false;\n  //let reconnectOnClose = true;\n  let messageListeners = [];\n  //let stateChangeListeners = [];\n\n  //function on(fn) {\n  //  messageListeners.push(fn);\n  //  console.log('1. ',messageListeners);\t  \n // }\n\n  //function off(fn) {\n  //  messageListeners = messageListeners.filter(l => l !== fn);\n // }\n\n  //function onStateChange(fn) {\n  //  stateChangeListeners.push(fn);\n  //  console.log('On state change: ',fn);\n\n\n  //  return () => {\n  //    stateChangeListeners = stateChangeListeners.filter(l => l !== fn);\n  //  };\n  // }\n\n\n\n\n\n\n  function start() {\n    client = new WebSocket(socketURL);\n\n    client.onopen = () => {\n      isConnected = true;\n     // stateChangeListeners.forEach(fn => fn(true));\n    }\n\n   // const close = client.close;\n\n   // client.close = () => {\n   //   reconnectOnClose = false;\n    //  close.call(client);\n   // }\n\n    client.onmessage = (event) => {\n        messageListeners.forEach(fn => fn(event.data));\n       //console.log(\"on message....\",event.data); \n       const dataFromServer = JSON.parse(event.data);\n\t    console.log('data from server: ', dataFromServer.message);\n            console.log('messageListeners: ', messageListeners);\n\n     }\n\n    //client.onerror = (e) => console.error(e);\n\n    /*\t  \n    client.onclose = () => {\n    \n      isConnected = false;\n      stateChangeListeners.forEach(fn => fn(false));\n\n      if (!reconnectOnClose) {\n        console.log('ws closed by app');\n        return;\n      }\n\n      console.log('ws closed by server');\n\n      setTimeout(start, 3000);\n    }\n    */\n\n  }\n\n   start();\n\nreturn {\n    //on,\n    //off,\n    //onStateChange,\n   // close: () => client.close(),\n    getClient: () => client,\n    isConnected: () => isConnected,\n  };\n\n\n\n\n}\n\n\nconst client = reconnectingSocket(socketURL);\n\n\nconsole.log(\"rerenderng:\");\n\nfunction useMessages() {\n  const [messages, setMessages] = useState(['hey you']);\n\n  /*\t \n  useEffect(() => {\n    function handleMessage(message) {\n      setMessages([...messages, message]);\n    }\n    client.on(handleMessage);\n    return () => client.off(handleMessage);\n  }, [messages, setMessages]);\n  */\n\n  return messages;\n}\n\n\n\n\n\n\n\n\n\nconst ChatWindow = (props) =>{\n\n\n\n\n\n    let roomname='class'\n\n    const [commentObj,setChatCommentObj]=useState([{}]);\n\n\n\n\n\n\n\n   const [message, setMessage] = useState('');\n\n   const messages = useMessages();\n\n  // const [isConnected, setIsConnected] = useState(client.isConnected());\n\n//   console.log(\"--isConnected1: \",client.isConnected());\t\n\n\n   //   useEffect(() => {\n   //  return client.onStateChange(setIsConnected);\n   //  }, [setIsConnected]);\n\n //  useEffect(() => {\n \n //    if (isConnected) {\n //       client.getClient().send('hi');\n //     }\n //  }, [isConnected]);\n\n\n\n function sendMessage(e) {\n    e.preventDefault();\n    client.getClient().send(JSON.stringify({\n      type: \"message\",\n      message: message,\n    }))\n    console.log('sending message', message);\t \n    setMessage('');\n\n\n   }\n\n\n\n\n\n\n\n\nreturn(\n\n<div className={classes.chatWindow}>\n\n<ChatUserInfoTopBar clickedUserId={props.clickedUserId} />\n\n<ChatScreen messages={messages}  commentObj={commentObj}/>\n\t\n<div className={classes.chatInput}>\n\n\n\n\n\n     <form className={classes.addCommentForm} onSubmit={sendMessage}>\n\n\n                  <div className={classes.chatInput} >\n\n                      <input className={classes.inputTextBox} value={message} onChange={e => setMessage(e.target.value)} />\n\n\n                  </div>\n\n                 \n                 <button type=\"submit\"  className= {classes.submit_button} ><b><MdSend className={classes.sendButtonIcon}/> </b> </button>\n                  \n     </form>\n\n\n</div>\n\n\n\n\t\n</div>\n\n);\n\n}\n\nexport default ChatWindow;\n"]},"metadata":{},"sourceType":"module"}