{"ast":null,"code":"'use strict';\n\nvar flatMap = require('./util').flatMap;\n\nvar guessBrowser = require('./util').guessBrowser;\n\nvar guessBrowserVersion = require('./util').guessBrowserVersion;\n\nvar getSdpFormat = require('./util/sdp').getSdpFormat;\n\nvar guess = guessBrowser();\nvar guessVersion = guessBrowserVersion();\nvar isChrome = guess === 'chrome';\nvar isFirefox = guess === 'firefox';\nvar isSafari = guess === 'safari';\nvar chromeMajorVersion = isChrome ? guessVersion.major : null;\nvar CHROME_LEGACY_MAX_AUDIO_LEVEL = 32767;\n/**\n * Get the standardized {@link RTCPeerConnection} statistics.\n * @param {RTCPeerConnection} peerConnection\n * @param {object} [options] - Used for testing\n * @returns {Promise.<StandardizedStatsResponse>}\n */\n\nfunction getStats(peerConnection, options) {\n  if (!(peerConnection && typeof peerConnection.getStats === 'function')) {\n    return Promise.reject(new Error('Given PeerConnection does not support getStats'));\n  }\n\n  return _getStats(peerConnection, options);\n}\n/**\n * getStats() implementation.\n * @param {RTCPeerConnection} peerConnection\n * @param {object} [options] - Used for testing\n * @returns {Promise.<StandardizedStatsResponse>}\n */\n\n\nfunction _getStats(peerConnection, options) {\n  var localAudioTracks = getTracks(peerConnection, 'audio', 'local');\n  var localVideoTracks = getTracks(peerConnection, 'video', 'local');\n  var remoteAudioTracks = getTracks(peerConnection, 'audio');\n  var remoteVideoTracks = getTracks(peerConnection, 'video');\n  var statsResponse = {\n    activeIceCandidatePair: null,\n    localAudioTrackStats: [],\n    localVideoTrackStats: [],\n    remoteAudioTrackStats: [],\n    remoteVideoTrackStats: []\n  };\n  var trackStatsPromises = flatMap([[localAudioTracks, 'localAudioTrackStats', false], [localVideoTracks, 'localVideoTrackStats', false], [remoteAudioTracks, 'remoteAudioTrackStats', true], [remoteVideoTracks, 'remoteVideoTrackStats', true]], function (triple) {\n    var tracks = triple[0];\n    var statsArrayName = triple[1];\n    var isRemote = triple[2];\n    return tracks.map(function (track) {\n      return getTrackStats(peerConnection, track, Object.assign({\n        isRemote: isRemote\n      }, options)).then(function (trackStatsArray) {\n        trackStatsArray.forEach(function (trackStats) {\n          trackStats.trackId = track.id;\n          statsResponse[statsArrayName].push(trackStats);\n        });\n      });\n    });\n  });\n  return Promise.all(trackStatsPromises).then(function () {\n    return getActiveIceCandidatePairStats(peerConnection, options);\n  }).then(function (activeIceCandidatePairStatsReport) {\n    statsResponse.activeIceCandidatePair = activeIceCandidatePairStatsReport;\n    return statsResponse;\n  });\n}\n/**\n * Generate the {@link StandardizedActiveIceCandidatePairStatsReport} for the\n * {@link RTCPeerConnection}.\n * @param {RTCPeerConnection} peerConnection\n * @param {object} [options]\n * @returns {Promise<StandardizedActiveIceCandidatePairStatsReport>}\n */\n\n\nfunction getActiveIceCandidatePairStats(peerConnection, options) {\n  options = options || {};\n\n  if (typeof options.testForChrome !== 'undefined' || isChrome || typeof options.testForSafari !== 'undefined' || isSafari) {\n    return peerConnection.getStats().then(standardizeChromeOrSafariActiveIceCandidatePairStats);\n  }\n\n  if (typeof options.testForFirefox !== 'undefined' || isFirefox) {\n    return peerConnection.getStats().then(standardizeFirefoxActiveIceCandidatePairStats);\n  }\n\n  return Promise.reject(new Error('RTCPeerConnection#getStats() not supported'));\n}\n/**\n * Standardize the active RTCIceCandidate pair's statistics in Chrome or Safari.\n * @param {RTCStatsReport} stats\n * @returns {?StandardizedActiveIceCandidatePairStatsReport}\n */\n\n\nfunction standardizeChromeOrSafariActiveIceCandidatePairStats(stats) {\n  var activeCandidatePairStats = Array.from(stats.values()).find(function (stat) {\n    return stat.type === 'candidate-pair' && stat.nominated;\n  });\n\n  if (!activeCandidatePairStats) {\n    return null;\n  }\n\n  var activeLocalCandidateStats = stats.get(activeCandidatePairStats.localCandidateId);\n  var activeRemoteCandidateStats = stats.get(activeCandidatePairStats.remoteCandidateId);\n  var standardizedCandidateStatsKeys = [{\n    key: 'candidateType',\n    type: 'string'\n  }, {\n    key: 'ip',\n    type: 'string'\n  }, {\n    key: 'port',\n    type: 'number'\n  }, {\n    key: 'priority',\n    type: 'number'\n  }, {\n    key: 'protocol',\n    type: 'string'\n  }, {\n    key: 'url',\n    type: 'string'\n  }];\n  var standardizedLocalCandidateStatsKeys = standardizedCandidateStatsKeys.concat([{\n    key: 'deleted',\n    type: 'boolean'\n  }, {\n    key: 'relayProtocol',\n    type: 'string'\n  }]);\n  var standatdizedLocalCandidateStatsReport = activeLocalCandidateStats ? standardizedLocalCandidateStatsKeys.reduce(function (report, keyInfo) {\n    report[keyInfo.key] = typeof activeLocalCandidateStats[keyInfo.key] === keyInfo.type ? activeLocalCandidateStats[keyInfo.key] : keyInfo.key === 'deleted' ? false : null;\n    return report;\n  }, {}) : null;\n  var standardizedRemoteCandidateStatsReport = activeRemoteCandidateStats ? standardizedCandidateStatsKeys.reduce(function (report, keyInfo) {\n    report[keyInfo.key] = typeof activeRemoteCandidateStats[keyInfo.key] === keyInfo.type ? activeRemoteCandidateStats[keyInfo.key] : null;\n    return report;\n  }, {}) : null;\n  return [{\n    key: 'availableIncomingBitrate',\n    type: 'number'\n  }, {\n    key: 'availableOutgoingBitrate',\n    type: 'number'\n  }, {\n    key: 'bytesReceived',\n    type: 'number'\n  }, {\n    key: 'bytesSent',\n    type: 'number'\n  }, {\n    key: 'consentRequestsSent',\n    type: 'number'\n  }, {\n    key: 'currentRoundTripTime',\n    type: 'number'\n  }, {\n    key: 'lastPacketReceivedTimestamp',\n    type: 'number'\n  }, {\n    key: 'lastPacketSentTimestamp',\n    type: 'number'\n  }, {\n    key: 'nominated',\n    type: 'boolean'\n  }, {\n    key: 'priority',\n    type: 'number'\n  }, {\n    key: 'readable',\n    type: 'boolean'\n  }, {\n    key: 'requestsReceived',\n    type: 'number'\n  }, {\n    key: 'requestsSent',\n    type: 'number'\n  }, {\n    key: 'responsesReceived',\n    type: 'number'\n  }, {\n    key: 'responsesSent',\n    type: 'number'\n  }, {\n    key: 'retransmissionsReceived',\n    type: 'number'\n  }, {\n    key: 'retransmissionsSent',\n    type: 'number'\n  }, {\n    key: 'state',\n    type: 'string',\n    fixup: function (state) {\n      return state === 'inprogress' ? 'in-progress' : state;\n    }\n  }, {\n    key: 'totalRoundTripTime',\n    type: 'number'\n  }, {\n    key: 'transportId',\n    type: 'string'\n  }, {\n    key: 'writable',\n    type: 'boolean'\n  }].reduce(function (report, keyInfo) {\n    report[keyInfo.key] = typeof activeCandidatePairStats[keyInfo.key] === keyInfo.type ? keyInfo.fixup ? keyInfo.fixup(activeCandidatePairStats[keyInfo.key]) : activeCandidatePairStats[keyInfo.key] : null;\n    return report;\n  }, {\n    localCandidate: standatdizedLocalCandidateStatsReport,\n    remoteCandidate: standardizedRemoteCandidateStatsReport\n  });\n}\n/**\n * Standardize the active RTCIceCandidate pair's statistics in Firefox.\n * @param {RTCStatsReport} stats\n * @returns {?StandardizedActiveIceCandidatePairStatsReport}\n */\n\n\nfunction standardizeFirefoxActiveIceCandidatePairStats(stats) {\n  var activeCandidatePairStats = Array.from(stats.values()).find(function (stat) {\n    return stat.type === 'candidate-pair' && stat.nominated;\n  });\n\n  if (!activeCandidatePairStats) {\n    return null;\n  }\n\n  var activeLocalCandidateStats = stats.get(activeCandidatePairStats.localCandidateId);\n  var activeRemoteCandidateStats = stats.get(activeCandidatePairStats.remoteCandidateId);\n  var standardizedCandidateStatsKeys = [{\n    key: 'candidateType',\n    type: 'string'\n  }, {\n    key: 'ip',\n    ffKeys: ['address', 'ipAddress'],\n    type: 'string'\n  }, {\n    key: 'port',\n    ffKeys: ['portNumber'],\n    type: 'number'\n  }, {\n    key: 'priority',\n    type: 'number'\n  }, {\n    key: 'protocol',\n    ffKeys: ['transport'],\n    type: 'string'\n  }, {\n    key: 'url',\n    type: 'string'\n  }];\n  var standardizedLocalCandidateStatsKeys = standardizedCandidateStatsKeys.concat([{\n    key: 'deleted',\n    type: 'boolean'\n  }, {\n    key: 'relayProtocol',\n    type: 'string'\n  }]);\n  var candidateTypes = {\n    host: 'host',\n    peerreflexive: 'prflx',\n    relayed: 'relay',\n    serverreflexive: 'srflx'\n  };\n  var standatdizedLocalCandidateStatsReport = activeLocalCandidateStats ? standardizedLocalCandidateStatsKeys.reduce(function (report, keyInfo) {\n    var key = keyInfo.ffKeys && keyInfo.ffKeys.find(function (key) {\n      return key in activeLocalCandidateStats;\n    }) || keyInfo.key;\n    report[keyInfo.key] = typeof activeLocalCandidateStats[key] === keyInfo.type ? key === 'candidateType' ? candidateTypes[activeLocalCandidateStats[key]] || activeLocalCandidateStats[key] : activeLocalCandidateStats[key] : key === 'deleted' ? false : null;\n    return report;\n  }, {}) : null;\n  var standardizedRemoteCandidateStatsReport = activeRemoteCandidateStats ? standardizedCandidateStatsKeys.reduce(function (report, keyInfo) {\n    var key = keyInfo.ffKeys && keyInfo.ffKeys.find(function (key) {\n      return key in activeRemoteCandidateStats;\n    }) || keyInfo.key;\n    report[keyInfo.key] = typeof activeRemoteCandidateStats[key] === keyInfo.type ? key === 'candidateType' ? candidateTypes[activeRemoteCandidateStats[key]] || activeRemoteCandidateStats[key] : activeRemoteCandidateStats[key] : null;\n    return report;\n  }, {}) : null;\n  return [{\n    key: 'availableIncomingBitrate',\n    type: 'number'\n  }, {\n    key: 'availableOutgoingBitrate',\n    type: 'number'\n  }, {\n    key: 'bytesReceived',\n    type: 'number'\n  }, {\n    key: 'bytesSent',\n    type: 'number'\n  }, {\n    key: 'consentRequestsSent',\n    type: 'number'\n  }, {\n    key: 'currentRoundTripTime',\n    type: 'number'\n  }, {\n    key: 'lastPacketReceivedTimestamp',\n    type: 'number'\n  }, {\n    key: 'lastPacketSentTimestamp',\n    type: 'number'\n  }, {\n    key: 'nominated',\n    type: 'boolean'\n  }, {\n    key: 'priority',\n    type: 'number'\n  }, {\n    key: 'readable',\n    type: 'boolean'\n  }, {\n    key: 'requestsReceived',\n    type: 'number'\n  }, {\n    key: 'requestsSent',\n    type: 'number'\n  }, {\n    key: 'responsesReceived',\n    type: 'number'\n  }, {\n    key: 'responsesSent',\n    type: 'number'\n  }, {\n    key: 'retransmissionsReceived',\n    type: 'number'\n  }, {\n    key: 'retransmissionsSent',\n    type: 'number'\n  }, {\n    key: 'state',\n    type: 'string'\n  }, {\n    key: 'totalRoundTripTime',\n    type: 'number'\n  }, {\n    key: 'transportId',\n    type: 'string'\n  }, {\n    key: 'writable',\n    type: 'boolean'\n  }].reduce(function (report, keyInfo) {\n    report[keyInfo.key] = typeof activeCandidatePairStats[keyInfo.key] === keyInfo.type ? activeCandidatePairStats[keyInfo.key] : null;\n    return report;\n  }, {\n    localCandidate: standatdizedLocalCandidateStatsReport,\n    remoteCandidate: standardizedRemoteCandidateStatsReport\n  });\n}\n/**\n * Get local/remote audio/video MediaStreamTracks.\n * @param {RTCPeerConnection} peerConnection - The RTCPeerConnection\n * @param {string} kind - 'audio' or 'video'\n * @param {string} [localOrRemote] - 'local' or 'remote'\n * @returns {Array<MediaStreamTrack>}\n */\n\n\nfunction getTracks(peerConnection, kind, localOrRemote) {\n  var getSendersOrReceivers = localOrRemote === 'local' ? 'getSenders' : 'getReceivers';\n\n  if (peerConnection[getSendersOrReceivers]) {\n    return peerConnection[getSendersOrReceivers]().map(function (senderOrReceiver) {\n      return senderOrReceiver.track;\n    }).filter(function (track) {\n      return track && track.kind === kind;\n    });\n  }\n\n  var getStreams = localOrRemote === 'local' ? 'getLocalStreams' : 'getRemoteStreams';\n  return flatMap(peerConnection[getStreams](), function (stream) {\n    var getTracks = kind === 'audio' ? 'getAudioTracks' : 'getVideoTracks';\n    return stream[getTracks]();\n  });\n}\n/**\n * Get the standardized statistics for a particular MediaStreamTrack.\n * @param {RTCPeerConnection} peerConnection\n * @param {MediaStreamTrack} track\n * @param {object} [options] - Used for testing\n * @returns {Promise.<Array<StandardizedTrackStatsReport>>}\n */\n\n\nfunction getTrackStats(peerConnection, track, options) {\n  options = options || {};\n\n  if (typeof options.testForChrome !== 'undefined' || isChrome) {\n    return chromeOrSafariGetTrackStats(peerConnection, track);\n  }\n\n  if (typeof options.testForFirefox !== 'undefined' || isFirefox) {\n    return firefoxGetTrackStats(peerConnection, track, options.isRemote);\n  }\n\n  if (typeof options.testForSafari !== 'undefined' || isSafari) {\n    if (typeof options.testForSafari !== 'undefined' || getSdpFormat() === 'unified') {\n      return chromeOrSafariGetTrackStats(peerConnection, track);\n    } // NOTE(syerrapragada): getStats() is not supported on\n    // Safari versions where plan-b is the SDP format\n    // due to this bug: https://bugs.webkit.org/show_bug.cgi?id=192601\n\n\n    return Promise.reject(new Error(['getStats() is not supported on this version of Safari', 'due to this bug: https://bugs.webkit.org/show_bug.cgi?id=192601'].join(' ')));\n  }\n\n  return Promise.reject(new Error('RTCPeerConnection#getStats() not supported'));\n}\n/**\n * Get the standardized statistics for a particular MediaStreamTrack in Chrome or Safari.\n * @param {RTCPeerConnection} peerConnection\n * @param {MediaStreamTrack} track\n * @returns {Promise.<Array<StandardizedTrackStatsReport>>}\n */\n\n\nfunction chromeOrSafariGetTrackStats(peerConnection, track) {\n  return new Promise(function (resolve, reject) {\n    if (chromeMajorVersion && chromeMajorVersion < 67) {\n      peerConnection.getStats(function (response) {\n        resolve([standardizeChromeLegacyStats(response, track)]);\n      }, null, reject);\n      return;\n    }\n\n    peerConnection.getStats(track).then(function (response) {\n      resolve(standardizeChromeOrSafariStats(response));\n    }, reject);\n  });\n}\n/**\n * Get the standardized statistics for a particular MediaStreamTrack in Firefox.\n * @param {RTCPeerConnection} peerConnection\n * @param {MediaStreamTrack} track\n * @param {boolean} isRemote\n * @returns {Promise.<Array<StandardizedTrackStatsReport>>}\n */\n\n\nfunction firefoxGetTrackStats(peerConnection, track, isRemote) {\n  return new Promise(function (resolve, reject) {\n    peerConnection.getStats(track).then(function (response) {\n      resolve([standardizeFirefoxStats(response, isRemote)]);\n    }, reject);\n  });\n}\n/**\n * Standardize the MediaStreamTrack's legacy statistics in Chrome.\n * @param {RTCStatsResponse} response\n * @param {MediaStreamTrack} track\n * @returns {StandardizedTrackStatsReport}\n */\n\n\nfunction standardizeChromeLegacyStats(response, track) {\n  var ssrcReport = response.result().find(function (report) {\n    return report.type === 'ssrc' && report.stat('googTrackId') === track.id;\n  });\n  var standardizedStats = {};\n\n  if (ssrcReport) {\n    standardizedStats.timestamp = Math.round(Number(ssrcReport.timestamp));\n    standardizedStats = ssrcReport.names().reduce(function (stats, name) {\n      switch (name) {\n        case 'googCodecName':\n          stats.codecName = ssrcReport.stat(name);\n          break;\n\n        case 'googRtt':\n          stats.roundTripTime = Number(ssrcReport.stat(name));\n          break;\n\n        case 'googJitterReceived':\n          stats.jitter = Number(ssrcReport.stat(name));\n          break;\n\n        case 'googFrameWidthInput':\n          stats.frameWidthInput = Number(ssrcReport.stat(name));\n          break;\n\n        case 'googFrameHeightInput':\n          stats.frameHeightInput = Number(ssrcReport.stat(name));\n          break;\n\n        case 'googFrameWidthSent':\n          stats.frameWidthSent = Number(ssrcReport.stat(name));\n          break;\n\n        case 'googFrameHeightSent':\n          stats.frameHeightSent = Number(ssrcReport.stat(name));\n          break;\n\n        case 'googFrameWidthReceived':\n          stats.frameWidthReceived = Number(ssrcReport.stat(name));\n          break;\n\n        case 'googFrameHeightReceived':\n          stats.frameHeightReceived = Number(ssrcReport.stat(name));\n          break;\n\n        case 'googFrameRateInput':\n          stats.frameRateInput = Number(ssrcReport.stat(name));\n          break;\n\n        case 'googFrameRateSent':\n          stats.frameRateSent = Number(ssrcReport.stat(name));\n          break;\n\n        case 'googFrameRateReceived':\n          stats.frameRateReceived = Number(ssrcReport.stat(name));\n          break;\n\n        case 'ssrc':\n          stats[name] = ssrcReport.stat(name);\n          break;\n\n        case 'bytesReceived':\n        case 'bytesSent':\n        case 'packetsLost':\n        case 'packetsReceived':\n        case 'packetsSent':\n        case 'audioInputLevel':\n        case 'audioOutputLevel':\n          stats[name] = Number(ssrcReport.stat(name));\n          break;\n      }\n\n      return stats;\n    }, standardizedStats);\n  }\n\n  return standardizedStats;\n}\n/**\n * Standardize the MediaStreamTrack's statistics in Chrome or Safari.\n * @param {RTCStatsResponse} response\n * @returns {Array<StandardizedTrackStatsReport>}\n */\n\n\nfunction standardizeChromeOrSafariStats(response) {\n  var inbound = null; // NOTE(mpatwardhan): We should expect more than one \"outbound-rtp\" stats for a\n  // VP8 simulcast MediaStreamTrack.\n\n  var outbound = [];\n  var remoteInbound = null;\n  var remoteOutbound = null;\n  var track = null;\n  var codec = null;\n  var localMedia = null;\n  response.forEach(function (stat) {\n    switch (stat.type) {\n      case 'inbound-rtp':\n        inbound = stat;\n        break;\n\n      case 'outbound-rtp':\n        outbound.push(stat);\n        break;\n\n      case 'media-source':\n        localMedia = stat;\n        break;\n\n      case 'track':\n        track = stat;\n        break;\n\n      case 'codec':\n        codec = stat;\n        break;\n\n      case 'remote-inbound-rtp':\n        remoteInbound = stat;\n        break;\n\n      case 'remote-outbound-rtp':\n        remoteOutbound = stat;\n        break;\n    }\n  });\n  var isRemote = track && track.remoteSource;\n  var mainSources = isRemote ? [inbound] : outbound;\n  var stats = [];\n  var remoteSource = isRemote ? remoteOutbound : remoteInbound; // remote rtp stats\n\n  mainSources.forEach(function (source) {\n    var standardizedStats = {};\n    var statSources = [source, localMedia, track, codec, remoteSource && remoteSource.ssrc === source.ssrc ? remoteSource : null // remote rtp stats\n    ];\n\n    function getStatValue(name) {\n      var sourceFound = statSources.find(function (statSource) {\n        return statSource && typeof statSource[name] !== 'undefined';\n      }) || null;\n      return sourceFound ? sourceFound[name] : null;\n    }\n\n    var ssrc = getStatValue('ssrc');\n\n    if (typeof ssrc === 'number') {\n      standardizedStats.ssrc = String(ssrc);\n    }\n\n    var timestamp = getStatValue('timestamp');\n    standardizedStats.timestamp = Math.round(timestamp);\n    var mimeType = getStatValue('mimeType');\n\n    if (typeof mimeType === 'string') {\n      mimeType = mimeType.split('/');\n      standardizedStats.codecName = mimeType[mimeType.length - 1];\n    }\n\n    var roundTripTime = getStatValue('roundTripTime');\n\n    if (typeof roundTripTime === 'number') {\n      standardizedStats.roundTripTime = Math.round(roundTripTime * 1000);\n    }\n\n    var jitter = getStatValue('jitter');\n\n    if (typeof jitter === 'number') {\n      standardizedStats.jitter = Math.round(jitter * 1000);\n    }\n\n    var frameWidth = getStatValue('frameWidth');\n\n    if (typeof frameWidth === 'number') {\n      if (isRemote) {\n        standardizedStats.frameWidthReceived = frameWidth;\n      } else {\n        standardizedStats.frameWidthSent = frameWidth;\n        standardizedStats.frameWidthInput = track.frameWidth;\n      }\n    }\n\n    var frameHeight = getStatValue('frameHeight');\n\n    if (typeof frameHeight === 'number') {\n      if (isRemote) {\n        standardizedStats.frameHeightReceived = frameHeight;\n      } else {\n        standardizedStats.frameHeightSent = frameHeight;\n        standardizedStats.frameHeightInput = track.frameHeight;\n      }\n    }\n\n    var framesPerSecond = getStatValue('framesPerSecond');\n\n    if (typeof framesPerSecond === 'number') {\n      standardizedStats[isRemote ? 'frameRateReceived' : 'frameRateSent'] = framesPerSecond;\n    }\n\n    var bytesReceived = getStatValue('bytesReceived');\n\n    if (typeof bytesReceived === 'number') {\n      standardizedStats.bytesReceived = bytesReceived;\n    }\n\n    var bytesSent = getStatValue('bytesSent');\n\n    if (typeof bytesSent === 'number') {\n      standardizedStats.bytesSent = bytesSent;\n    }\n\n    var packetsLost = getStatValue('packetsLost');\n\n    if (typeof packetsLost === 'number') {\n      standardizedStats.packetsLost = packetsLost;\n    }\n\n    var packetsReceived = getStatValue('packetsReceived');\n\n    if (typeof packetsReceived === 'number') {\n      standardizedStats.packetsReceived = packetsReceived;\n    }\n\n    var packetsSent = getStatValue('packetsSent');\n\n    if (typeof packetsSent === 'number') {\n      standardizedStats.packetsSent = packetsSent;\n    }\n\n    var audioLevel = getStatValue('audioLevel');\n\n    if (typeof audioLevel === 'number') {\n      audioLevel = Math.round(audioLevel * CHROME_LEGACY_MAX_AUDIO_LEVEL);\n\n      if (isRemote) {\n        standardizedStats.audioOutputLevel = audioLevel;\n      } else {\n        standardizedStats.audioInputLevel = audioLevel;\n      }\n    }\n\n    var totalPacketSendDalay = getStatValue('totalPacketSendDelay');\n\n    if (typeof totalPacketSendDalay === 'number') {\n      standardizedStats.totalPacketSendDelay = totalPacketSendDalay;\n    }\n\n    var totalEncodeTime = getStatValue('totalEncodeTime');\n\n    if (typeof totalEncodeTime === 'number') {\n      standardizedStats.totalEncodeTime = totalEncodeTime;\n    }\n\n    var framesEncoded = getStatValue('framesEncoded');\n\n    if (typeof framesEncoded === 'number') {\n      standardizedStats.framesEncoded = framesEncoded;\n    }\n\n    var estimatedPlayoutTimestamp = getStatValue('estimatedPlayoutTimestamp');\n\n    if (typeof estimatedPlayoutTimestamp === 'number') {\n      standardizedStats.estimatedPlayoutTimestamp = estimatedPlayoutTimestamp;\n    }\n\n    var totalDecodeTime = getStatValue('totalDecodeTime');\n\n    if (typeof totalDecodeTime === 'number') {\n      standardizedStats.totalDecodeTime = totalDecodeTime;\n    }\n\n    var framesDecoded = getStatValue('framesDecoded');\n\n    if (typeof framesDecoded === 'number') {\n      standardizedStats.framesDecoded = framesDecoded;\n    }\n\n    var jitterBufferDelay = getStatValue('jitterBufferDelay');\n\n    if (typeof jitterBufferDelay === 'number') {\n      standardizedStats.jitterBufferDelay = jitterBufferDelay;\n    }\n\n    var jitterBufferEmittedCount = getStatValue('jitterBufferEmittedCount');\n\n    if (typeof jitterBufferEmittedCount === 'number') {\n      standardizedStats.jitterBufferEmittedCount = jitterBufferEmittedCount;\n    }\n\n    stats.push(standardizedStats);\n  });\n  return stats;\n}\n/**\n * Standardize the MediaStreamTrack's statistics in Firefox.\n * @param {RTCStatsReport} response\n * @param {boolean} isRemote\n * @returns {StandardizedTrackStatsReport}\n */\n\n\nfunction standardizeFirefoxStats(response, isRemote) {\n  // NOTE(mroberts): If getStats is called on a closed RTCPeerConnection,\n  // Firefox returns undefined instead of an RTCStatsReport. We workaround this\n  // here. See the following bug for more details:\n  //\n  //   https://bugzilla.mozilla.org/show_bug.cgi?id=1377225\n  //\n  response = response || new Map();\n  var inbound = null;\n  var outbound = null; // NOTE(mmalavalli): Starting from Firefox 63, RTC{Inbound, Outbound}RTPStreamStats.isRemote\n  // will be deprecated, followed by its removal in Firefox 66. Also, trying to\n  // access members of the remote RTC{Inbound, Outbound}RTPStreamStats without\n  // using RTCStatsReport.get(remoteId) will trigger console warnings. So, we\n  // no longer depend on \"isRemote\", and we call RTCStatsReport.get(remoteId)\n  // to access the remote RTC{Inbound, Outbound}RTPStreamStats.\n  //\n  // Source: https://blog.mozilla.org/webrtc/getstats-isremote-65/\n  //\n\n  response.forEach(function (stat) {\n    if (stat.isRemote) {\n      return;\n    }\n\n    switch (stat.type) {\n      case 'inbound-rtp':\n        inbound = stat;\n        outbound = response.get(stat.remoteId);\n        break;\n\n      case 'outbound-rtp':\n        outbound = stat;\n        inbound = response.get(stat.remoteId);\n        break;\n    }\n  });\n  var first = isRemote ? inbound : outbound;\n  var second = isRemote ? outbound : inbound;\n\n  function getStatValue(name) {\n    if (first && typeof first[name] !== 'undefined') {\n      return first[name];\n    }\n\n    if (second && typeof second[name] !== 'undefined') {\n      return second[name];\n    }\n\n    return null;\n  }\n\n  var standardizedStats = {};\n  var timestamp = getStatValue('timestamp');\n  standardizedStats.timestamp = Math.round(timestamp);\n  var ssrc = getStatValue('ssrc');\n\n  if (typeof ssrc === 'number') {\n    standardizedStats.ssrc = String(ssrc);\n  }\n\n  var bytesSent = getStatValue('bytesSent');\n\n  if (typeof bytesSent === 'number') {\n    standardizedStats.bytesSent = bytesSent;\n  }\n\n  var packetsLost = getStatValue('packetsLost');\n\n  if (typeof packetsLost === 'number') {\n    standardizedStats.packetsLost = packetsLost;\n  }\n\n  var packetsSent = getStatValue('packetsSent');\n\n  if (typeof packetsSent === 'number') {\n    standardizedStats.packetsSent = packetsSent;\n  }\n\n  var roundTripTime = getStatValue('roundTripTime');\n\n  if (typeof roundTripTime === 'number') {\n    // roundTripTime is double - measured in seconds.\n    // https://www.w3.org/TR/webrtc-stats/#dom-rtcremoteinboundrtpstreamstats-roundtriptime\n    // cover it to milliseconds (and make it integer)\n    standardizedStats.roundTripTime = Math.round(roundTripTime * 1000);\n  }\n\n  var jitter = getStatValue('jitter');\n\n  if (typeof jitter === 'number') {\n    standardizedStats.jitter = Math.round(jitter * 1000);\n  }\n\n  var frameRateSent = getStatValue('framerateMean');\n\n  if (typeof frameRateSent === 'number') {\n    standardizedStats.frameRateSent = Math.round(frameRateSent);\n  }\n\n  var bytesReceived = getStatValue('bytesReceived');\n\n  if (typeof bytesReceived === 'number') {\n    standardizedStats.bytesReceived = bytesReceived;\n  }\n\n  var packetsReceived = getStatValue('packetsReceived');\n\n  if (typeof packetsReceived === 'number') {\n    standardizedStats.packetsReceived = packetsReceived;\n  }\n\n  var frameRateReceived = getStatValue('framerateMean');\n\n  if (typeof frameRateReceived === 'number') {\n    standardizedStats.frameRateReceived = Math.round(frameRateReceived);\n  }\n\n  var totalPacketSendDalay = getStatValue('totalPacketSendDelay');\n\n  if (typeof totalPacketSendDalay === 'number') {\n    standardizedStats.totalPacketSendDelay = totalPacketSendDalay;\n  }\n\n  var totalEncodeTime = getStatValue('totalEncodeTime');\n\n  if (typeof totalEncodeTime === 'number') {\n    standardizedStats.totalEncodeTime = totalEncodeTime;\n  }\n\n  var framesEncoded = getStatValue('framesEncoded');\n\n  if (typeof framesEncoded === 'number') {\n    standardizedStats.framesEncoded = framesEncoded;\n  }\n\n  var estimatedPlayoutTimestamp = getStatValue('estimatedPlayoutTimestamp');\n\n  if (typeof estimatedPlayoutTimestamp === 'number') {\n    standardizedStats.estimatedPlayoutTimestamp = estimatedPlayoutTimestamp;\n  }\n\n  var totalDecodeTime = getStatValue('totalDecodeTime');\n\n  if (typeof totalDecodeTime === 'number') {\n    standardizedStats.totalDecodeTime = totalDecodeTime;\n  }\n\n  var framesDecoded = getStatValue('framesDecoded');\n\n  if (typeof framesDecoded === 'number') {\n    standardizedStats.framesDecoded = framesDecoded;\n  }\n\n  var jitterBufferDelay = getStatValue('jitterBufferDelay');\n\n  if (typeof jitterBufferDelay === 'number') {\n    standardizedStats.jitterBufferDelay = jitterBufferDelay;\n  }\n\n  var jitterBufferEmittedCount = getStatValue('jitterBufferEmittedCount');\n\n  if (typeof jitterBufferEmittedCount === 'number') {\n    standardizedStats.jitterBufferEmittedCount = jitterBufferEmittedCount;\n  }\n\n  return standardizedStats;\n}\n/**\n * Standardized RTCIceCandidate statistics.\n * @typedef {object} StandardizedIceCandidateStatsReport\n * @property {'host'|'prflx'|'relay'|'srflx'} candidateType\n * @property {string} ip\n * @property {number} port\n * @property {number} priority\n * @property {'tcp'|'udp'} protocol\n * @property {string} url\n */\n\n/**\n * Standardized local RTCIceCandidate statistics.\n * @typedef {StandardizedIceCandidateStatsReport} StandardizedLocalIceCandidateStatsReport\n * @property {boolean} [deleted=false]\n * @property {'tcp'|'tls'|'udp'} relayProtocol\n */\n\n/**\n * Standardized active RTCIceCandidate pair statistics.\n * @typedef {object} StandardizedActiveIceCandidatePairStatsReport\n * @property {number} availableIncomingBitrate\n * @property {number} availableOutgoingBitrate\n * @property {number} bytesReceived\n * @property {number} bytesSent\n * @property {number} consentRequestsSent\n * @property {number} currentRoundTripTime\n * @property {number} lastPacketReceivedTimestamp\n * @property {number} lastPacketSentTimestamp\n * @property {StandardizedLocalIceCandidateStatsReport} localCandidate\n * @property {boolean} nominated\n * @property {number} priority\n * @property {boolean} readable\n * @property {StandardizedIceCandidateStatsReport} remoteCandidate\n * @property {number} requestsReceived\n * @property {number} requestsSent\n * @property {number} responsesReceived\n * @property {number} responsesSent\n * @property {number} retransmissionsReceived\n * @property {number} retransmissionsSent\n * @property {'frozen'|'waiting'|'in-progress'|'failed'|'succeeded'} state\n * @property {number} totalRoundTripTime\n * @property {string} transportId\n * @property {boolean} writable\n */\n\n/**\n * Standardized {@link RTCPeerConnection} statistics.\n * @typedef {Object} StandardizedStatsResponse\n * @property {StandardizedActiveIceCandidatePairStatsReport} activeIceCandidatePair - Stats for active ICE candidate pair\n * @property Array<StandardizedTrackStatsReport> localAudioTrackStats - Stats for local audio MediaStreamTracks\n * @property Array<StandardizedTrackStatsReport> localVideoTrackStats - Stats for local video MediaStreamTracks\n * @property Array<StandardizedTrackStatsReport> remoteAudioTrackStats - Stats for remote audio MediaStreamTracks\n * @property Array<StandardizedTrackStatsReport> remoteVideoTrackStats - Stats for remote video MediaStreamTracks\n */\n\n/**\n * Standardized MediaStreamTrack statistics.\n * @typedef {Object} StandardizedTrackStatsReport\n * @property {string} trackId - MediaStreamTrack ID\n * @property {string} ssrc - SSRC of the MediaStreamTrack\n * @property {number} timestamp - The Unix timestamp in milliseconds\n * @property {string} [codecName] - Name of the codec used to encode the MediaStreamTrack's media\n * @property {number} [roundTripTime] - Round trip time in milliseconds\n * @property {number} [jitter] - Jitter in milliseconds\n * @property {number} [frameWidthInput] - Width in pixels of the local video MediaStreamTrack's captured frame\n * @property {number} [frameHeightInput] - Height in pixels of the local video MediaStreamTrack's captured frame\n * @property {number} [frameWidthSent] - Width in pixels of the local video MediaStreamTrack's encoded frame\n * @property {number} [frameHeightSent] - Height in pixels of the local video MediaStreamTrack's encoded frame\n * @property {number} [frameWidthReceived] - Width in pixels of the remote video MediaStreamTrack's received frame\n * @property {number} [frameHeightReceived] - Height in pixels of the remote video MediaStreamTrack's received frame\n * @property {number} [frameRateInput] - Captured frames per second of the local video MediaStreamTrack\n * @property {number} [frameRateSent] - Frames per second of the local video MediaStreamTrack's encoded video\n * @property {number} [frameRateReceived] - Frames per second of the remote video MediaStreamTrack's received video\n * @property {number} [bytesReceived] - Number of bytes of the remote MediaStreamTrack's media received\n * @property {number} [bytesSent] - Number of bytes of the local MediaStreamTrack's media sent\n * @property {number} [packetsLost] - Number of packets of the MediaStreamTrack's media lost\n * @property {number} [packetsReceived] - Number of packets of the remote MediaStreamTrack's media received\n * @property {number} [packetsSent] - Number of packets of the local MediaStreamTrack's media sent\n * @property {number} [totalPacketSendDelay] - The total number of seconds that the local MediaStreamTrack's packets\n *  have spent buffered locally before being sent over the network\n * @property {number} [totalEncodeTime] - The total number of seconds spent on encoding the local MediaStreamTrack's frames\n * @property {number} [framesEncoded] - The total number of frames of the local MediaStreamTrack that have been encoded sor far\n * @property {number} [estimatedPlayoutTimestamp] - The estimated playout time of the remote MediaStreamTrack\n * @property {number} [totalDecodeTime] - The total number of seconds spent on decoding the remote MediaStreamTrack's frames\n * @property {number} [framesDecoded] - The total number of frames of the remote MediaStreamTrack that have been decoded sor far\n * @property {number} [jitterBufferDelay] - The sum of the time, in seconds, each audio sample or a video frame of the remote\n *   MediaStreamTrack takes from the time the first packet is received by the jitter buffer to the time it exits the jitter buffer\n * @property {number} [jitterBufferEmittedCount] - The total number of audio samples or video frames that have come out of the jitter buffer\n * @property {AudioLevel} [audioInputLevel] - The {@link AudioLevel} of the local audio MediaStreamTrack\n * @property {AudioLevel} [audioOutputLevel] - The {@link AudioLevel} of the remote video MediaStreamTrack\n */\n\n\nmodule.exports = getStats;","map":{"version":3,"sources":["../../lib/webrtc/getstats.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["'use strict';\nvar flatMap = require('./util').flatMap;\nvar guessBrowser = require('./util').guessBrowser;\nvar guessBrowserVersion = require('./util').guessBrowserVersion;\nvar getSdpFormat = require('./util/sdp').getSdpFormat;\nvar guess = guessBrowser();\nvar guessVersion = guessBrowserVersion();\nvar isChrome = guess === 'chrome';\nvar isFirefox = guess === 'firefox';\nvar isSafari = guess === 'safari';\nvar chromeMajorVersion = isChrome ? guessVersion.major : null;\nvar CHROME_LEGACY_MAX_AUDIO_LEVEL = 32767;\n/**\n * Get the standardized {@link RTCPeerConnection} statistics.\n * @param {RTCPeerConnection} peerConnection\n * @param {object} [options] - Used for testing\n * @returns {Promise.<StandardizedStatsResponse>}\n */\nfunction getStats(peerConnection, options) {\n    if (!(peerConnection && typeof peerConnection.getStats === 'function')) {\n        return Promise.reject(new Error('Given PeerConnection does not support getStats'));\n    }\n    return _getStats(peerConnection, options);\n}\n/**\n * getStats() implementation.\n * @param {RTCPeerConnection} peerConnection\n * @param {object} [options] - Used for testing\n * @returns {Promise.<StandardizedStatsResponse>}\n */\nfunction _getStats(peerConnection, options) {\n    var localAudioTracks = getTracks(peerConnection, 'audio', 'local');\n    var localVideoTracks = getTracks(peerConnection, 'video', 'local');\n    var remoteAudioTracks = getTracks(peerConnection, 'audio');\n    var remoteVideoTracks = getTracks(peerConnection, 'video');\n    var statsResponse = {\n        activeIceCandidatePair: null,\n        localAudioTrackStats: [],\n        localVideoTrackStats: [],\n        remoteAudioTrackStats: [],\n        remoteVideoTrackStats: []\n    };\n    var trackStatsPromises = flatMap([\n        [localAudioTracks, 'localAudioTrackStats', false],\n        [localVideoTracks, 'localVideoTrackStats', false],\n        [remoteAudioTracks, 'remoteAudioTrackStats', true],\n        [remoteVideoTracks, 'remoteVideoTrackStats', true]\n    ], function (triple) {\n        var tracks = triple[0];\n        var statsArrayName = triple[1];\n        var isRemote = triple[2];\n        return tracks.map(function (track) {\n            return getTrackStats(peerConnection, track, Object.assign({\n                isRemote: isRemote\n            }, options)).then(function (trackStatsArray) {\n                trackStatsArray.forEach(function (trackStats) {\n                    trackStats.trackId = track.id;\n                    statsResponse[statsArrayName].push(trackStats);\n                });\n            });\n        });\n    });\n    return Promise.all(trackStatsPromises).then(function () {\n        return getActiveIceCandidatePairStats(peerConnection, options);\n    }).then(function (activeIceCandidatePairStatsReport) {\n        statsResponse.activeIceCandidatePair = activeIceCandidatePairStatsReport;\n        return statsResponse;\n    });\n}\n/**\n * Generate the {@link StandardizedActiveIceCandidatePairStatsReport} for the\n * {@link RTCPeerConnection}.\n * @param {RTCPeerConnection} peerConnection\n * @param {object} [options]\n * @returns {Promise<StandardizedActiveIceCandidatePairStatsReport>}\n */\nfunction getActiveIceCandidatePairStats(peerConnection, options) {\n    options = options || {};\n    if (typeof options.testForChrome !== 'undefined' || isChrome\n        || typeof options.testForSafari !== 'undefined' || isSafari) {\n        return peerConnection.getStats().then(standardizeChromeOrSafariActiveIceCandidatePairStats);\n    }\n    if (typeof options.testForFirefox !== 'undefined' || isFirefox) {\n        return peerConnection.getStats().then(standardizeFirefoxActiveIceCandidatePairStats);\n    }\n    return Promise.reject(new Error('RTCPeerConnection#getStats() not supported'));\n}\n/**\n * Standardize the active RTCIceCandidate pair's statistics in Chrome or Safari.\n * @param {RTCStatsReport} stats\n * @returns {?StandardizedActiveIceCandidatePairStatsReport}\n */\nfunction standardizeChromeOrSafariActiveIceCandidatePairStats(stats) {\n    var activeCandidatePairStats = Array.from(stats.values()).find(function (stat) {\n        return stat.type === 'candidate-pair' && stat.nominated;\n    });\n    if (!activeCandidatePairStats) {\n        return null;\n    }\n    var activeLocalCandidateStats = stats.get(activeCandidatePairStats.localCandidateId);\n    var activeRemoteCandidateStats = stats.get(activeCandidatePairStats.remoteCandidateId);\n    var standardizedCandidateStatsKeys = [\n        { key: 'candidateType', type: 'string' },\n        { key: 'ip', type: 'string' },\n        { key: 'port', type: 'number' },\n        { key: 'priority', type: 'number' },\n        { key: 'protocol', type: 'string' },\n        { key: 'url', type: 'string' }\n    ];\n    var standardizedLocalCandidateStatsKeys = standardizedCandidateStatsKeys.concat([\n        { key: 'deleted', type: 'boolean' },\n        { key: 'relayProtocol', type: 'string' }\n    ]);\n    var standatdizedLocalCandidateStatsReport = activeLocalCandidateStats\n        ? standardizedLocalCandidateStatsKeys.reduce(function (report, keyInfo) {\n            report[keyInfo.key] = typeof activeLocalCandidateStats[keyInfo.key] === keyInfo.type\n                ? activeLocalCandidateStats[keyInfo.key]\n                : keyInfo.key === 'deleted' ? false : null;\n            return report;\n        }, {})\n        : null;\n    var standardizedRemoteCandidateStatsReport = activeRemoteCandidateStats\n        ? standardizedCandidateStatsKeys.reduce(function (report, keyInfo) {\n            report[keyInfo.key] = typeof activeRemoteCandidateStats[keyInfo.key] === keyInfo.type\n                ? activeRemoteCandidateStats[keyInfo.key]\n                : null;\n            return report;\n        }, {})\n        : null;\n    return [\n        { key: 'availableIncomingBitrate', type: 'number' },\n        { key: 'availableOutgoingBitrate', type: 'number' },\n        { key: 'bytesReceived', type: 'number' },\n        { key: 'bytesSent', type: 'number' },\n        { key: 'consentRequestsSent', type: 'number' },\n        { key: 'currentRoundTripTime', type: 'number' },\n        { key: 'lastPacketReceivedTimestamp', type: 'number' },\n        { key: 'lastPacketSentTimestamp', type: 'number' },\n        { key: 'nominated', type: 'boolean' },\n        { key: 'priority', type: 'number' },\n        { key: 'readable', type: 'boolean' },\n        { key: 'requestsReceived', type: 'number' },\n        { key: 'requestsSent', type: 'number' },\n        { key: 'responsesReceived', type: 'number' },\n        { key: 'responsesSent', type: 'number' },\n        { key: 'retransmissionsReceived', type: 'number' },\n        { key: 'retransmissionsSent', type: 'number' },\n        { key: 'state', type: 'string', fixup: function (state) { return state === 'inprogress' ? 'in-progress' : state; } },\n        { key: 'totalRoundTripTime', type: 'number' },\n        { key: 'transportId', type: 'string' },\n        { key: 'writable', type: 'boolean' }\n    ].reduce(function (report, keyInfo) {\n        report[keyInfo.key] = typeof activeCandidatePairStats[keyInfo.key] === keyInfo.type\n            ? (keyInfo.fixup ? keyInfo.fixup(activeCandidatePairStats[keyInfo.key]) : activeCandidatePairStats[keyInfo.key])\n            : null;\n        return report;\n    }, {\n        localCandidate: standatdizedLocalCandidateStatsReport,\n        remoteCandidate: standardizedRemoteCandidateStatsReport\n    });\n}\n/**\n * Standardize the active RTCIceCandidate pair's statistics in Firefox.\n * @param {RTCStatsReport} stats\n * @returns {?StandardizedActiveIceCandidatePairStatsReport}\n */\nfunction standardizeFirefoxActiveIceCandidatePairStats(stats) {\n    var activeCandidatePairStats = Array.from(stats.values()).find(function (stat) {\n        return stat.type === 'candidate-pair' && stat.nominated;\n    });\n    if (!activeCandidatePairStats) {\n        return null;\n    }\n    var activeLocalCandidateStats = stats.get(activeCandidatePairStats.localCandidateId);\n    var activeRemoteCandidateStats = stats.get(activeCandidatePairStats.remoteCandidateId);\n    var standardizedCandidateStatsKeys = [\n        { key: 'candidateType', type: 'string' },\n        { key: 'ip', ffKeys: ['address', 'ipAddress'], type: 'string' },\n        { key: 'port', ffKeys: ['portNumber'], type: 'number' },\n        { key: 'priority', type: 'number' },\n        { key: 'protocol', ffKeys: ['transport'], type: 'string' },\n        { key: 'url', type: 'string' }\n    ];\n    var standardizedLocalCandidateStatsKeys = standardizedCandidateStatsKeys.concat([\n        { key: 'deleted', type: 'boolean' },\n        { key: 'relayProtocol', type: 'string' }\n    ]);\n    var candidateTypes = {\n        host: 'host',\n        peerreflexive: 'prflx',\n        relayed: 'relay',\n        serverreflexive: 'srflx'\n    };\n    var standatdizedLocalCandidateStatsReport = activeLocalCandidateStats\n        ? standardizedLocalCandidateStatsKeys.reduce(function (report, keyInfo) {\n            var key = keyInfo.ffKeys && keyInfo.ffKeys.find(function (key) {\n                return key in activeLocalCandidateStats;\n            }) || keyInfo.key;\n            report[keyInfo.key] = typeof activeLocalCandidateStats[key] === keyInfo.type\n                ? key === 'candidateType'\n                    ? candidateTypes[activeLocalCandidateStats[key]] || activeLocalCandidateStats[key]\n                    : activeLocalCandidateStats[key]\n                : key === 'deleted' ? false : null;\n            return report;\n        }, {})\n        : null;\n    var standardizedRemoteCandidateStatsReport = activeRemoteCandidateStats\n        ? standardizedCandidateStatsKeys.reduce(function (report, keyInfo) {\n            var key = keyInfo.ffKeys && keyInfo.ffKeys.find(function (key) {\n                return key in activeRemoteCandidateStats;\n            }) || keyInfo.key;\n            report[keyInfo.key] = typeof activeRemoteCandidateStats[key] === keyInfo.type\n                ? key === 'candidateType'\n                    ? candidateTypes[activeRemoteCandidateStats[key]] || activeRemoteCandidateStats[key]\n                    : activeRemoteCandidateStats[key]\n                : null;\n            return report;\n        }, {})\n        : null;\n    return [\n        { key: 'availableIncomingBitrate', type: 'number' },\n        { key: 'availableOutgoingBitrate', type: 'number' },\n        { key: 'bytesReceived', type: 'number' },\n        { key: 'bytesSent', type: 'number' },\n        { key: 'consentRequestsSent', type: 'number' },\n        { key: 'currentRoundTripTime', type: 'number' },\n        { key: 'lastPacketReceivedTimestamp', type: 'number' },\n        { key: 'lastPacketSentTimestamp', type: 'number' },\n        { key: 'nominated', type: 'boolean' },\n        { key: 'priority', type: 'number' },\n        { key: 'readable', type: 'boolean' },\n        { key: 'requestsReceived', type: 'number' },\n        { key: 'requestsSent', type: 'number' },\n        { key: 'responsesReceived', type: 'number' },\n        { key: 'responsesSent', type: 'number' },\n        { key: 'retransmissionsReceived', type: 'number' },\n        { key: 'retransmissionsSent', type: 'number' },\n        { key: 'state', type: 'string' },\n        { key: 'totalRoundTripTime', type: 'number' },\n        { key: 'transportId', type: 'string' },\n        { key: 'writable', type: 'boolean' }\n    ].reduce(function (report, keyInfo) {\n        report[keyInfo.key] = typeof activeCandidatePairStats[keyInfo.key] === keyInfo.type\n            ? activeCandidatePairStats[keyInfo.key]\n            : null;\n        return report;\n    }, {\n        localCandidate: standatdizedLocalCandidateStatsReport,\n        remoteCandidate: standardizedRemoteCandidateStatsReport\n    });\n}\n/**\n * Get local/remote audio/video MediaStreamTracks.\n * @param {RTCPeerConnection} peerConnection - The RTCPeerConnection\n * @param {string} kind - 'audio' or 'video'\n * @param {string} [localOrRemote] - 'local' or 'remote'\n * @returns {Array<MediaStreamTrack>}\n */\nfunction getTracks(peerConnection, kind, localOrRemote) {\n    var getSendersOrReceivers = localOrRemote === 'local' ? 'getSenders' : 'getReceivers';\n    if (peerConnection[getSendersOrReceivers]) {\n        return peerConnection[getSendersOrReceivers]().map(function (senderOrReceiver) {\n            return senderOrReceiver.track;\n        }).filter(function (track) {\n            return track && track.kind === kind;\n        });\n    }\n    var getStreams = localOrRemote === 'local' ? 'getLocalStreams' : 'getRemoteStreams';\n    return flatMap(peerConnection[getStreams](), function (stream) {\n        var getTracks = kind === 'audio' ? 'getAudioTracks' : 'getVideoTracks';\n        return stream[getTracks]();\n    });\n}\n/**\n * Get the standardized statistics for a particular MediaStreamTrack.\n * @param {RTCPeerConnection} peerConnection\n * @param {MediaStreamTrack} track\n * @param {object} [options] - Used for testing\n * @returns {Promise.<Array<StandardizedTrackStatsReport>>}\n */\nfunction getTrackStats(peerConnection, track, options) {\n    options = options || {};\n    if (typeof options.testForChrome !== 'undefined' || isChrome) {\n        return chromeOrSafariGetTrackStats(peerConnection, track);\n    }\n    if (typeof options.testForFirefox !== 'undefined' || isFirefox) {\n        return firefoxGetTrackStats(peerConnection, track, options.isRemote);\n    }\n    if (typeof options.testForSafari !== 'undefined' || isSafari) {\n        if (typeof options.testForSafari !== 'undefined' || getSdpFormat() === 'unified') {\n            return chromeOrSafariGetTrackStats(peerConnection, track);\n        }\n        // NOTE(syerrapragada): getStats() is not supported on\n        // Safari versions where plan-b is the SDP format\n        // due to this bug: https://bugs.webkit.org/show_bug.cgi?id=192601\n        return Promise.reject(new Error([\n            'getStats() is not supported on this version of Safari',\n            'due to this bug: https://bugs.webkit.org/show_bug.cgi?id=192601'\n        ].join(' ')));\n    }\n    return Promise.reject(new Error('RTCPeerConnection#getStats() not supported'));\n}\n/**\n * Get the standardized statistics for a particular MediaStreamTrack in Chrome or Safari.\n * @param {RTCPeerConnection} peerConnection\n * @param {MediaStreamTrack} track\n * @returns {Promise.<Array<StandardizedTrackStatsReport>>}\n */\nfunction chromeOrSafariGetTrackStats(peerConnection, track) {\n    return new Promise(function (resolve, reject) {\n        if (chromeMajorVersion && chromeMajorVersion < 67) {\n            peerConnection.getStats(function (response) {\n                resolve([standardizeChromeLegacyStats(response, track)]);\n            }, null, reject);\n            return;\n        }\n        peerConnection.getStats(track).then(function (response) {\n            resolve(standardizeChromeOrSafariStats(response));\n        }, reject);\n    });\n}\n/**\n * Get the standardized statistics for a particular MediaStreamTrack in Firefox.\n * @param {RTCPeerConnection} peerConnection\n * @param {MediaStreamTrack} track\n * @param {boolean} isRemote\n * @returns {Promise.<Array<StandardizedTrackStatsReport>>}\n */\nfunction firefoxGetTrackStats(peerConnection, track, isRemote) {\n    return new Promise(function (resolve, reject) {\n        peerConnection.getStats(track).then(function (response) {\n            resolve([standardizeFirefoxStats(response, isRemote)]);\n        }, reject);\n    });\n}\n/**\n * Standardize the MediaStreamTrack's legacy statistics in Chrome.\n * @param {RTCStatsResponse} response\n * @param {MediaStreamTrack} track\n * @returns {StandardizedTrackStatsReport}\n */\nfunction standardizeChromeLegacyStats(response, track) {\n    var ssrcReport = response.result().find(function (report) {\n        return report.type === 'ssrc' && report.stat('googTrackId') === track.id;\n    });\n    var standardizedStats = {};\n    if (ssrcReport) {\n        standardizedStats.timestamp = Math.round(Number(ssrcReport.timestamp));\n        standardizedStats = ssrcReport.names().reduce(function (stats, name) {\n            switch (name) {\n                case 'googCodecName':\n                    stats.codecName = ssrcReport.stat(name);\n                    break;\n                case 'googRtt':\n                    stats.roundTripTime = Number(ssrcReport.stat(name));\n                    break;\n                case 'googJitterReceived':\n                    stats.jitter = Number(ssrcReport.stat(name));\n                    break;\n                case 'googFrameWidthInput':\n                    stats.frameWidthInput = Number(ssrcReport.stat(name));\n                    break;\n                case 'googFrameHeightInput':\n                    stats.frameHeightInput = Number(ssrcReport.stat(name));\n                    break;\n                case 'googFrameWidthSent':\n                    stats.frameWidthSent = Number(ssrcReport.stat(name));\n                    break;\n                case 'googFrameHeightSent':\n                    stats.frameHeightSent = Number(ssrcReport.stat(name));\n                    break;\n                case 'googFrameWidthReceived':\n                    stats.frameWidthReceived = Number(ssrcReport.stat(name));\n                    break;\n                case 'googFrameHeightReceived':\n                    stats.frameHeightReceived = Number(ssrcReport.stat(name));\n                    break;\n                case 'googFrameRateInput':\n                    stats.frameRateInput = Number(ssrcReport.stat(name));\n                    break;\n                case 'googFrameRateSent':\n                    stats.frameRateSent = Number(ssrcReport.stat(name));\n                    break;\n                case 'googFrameRateReceived':\n                    stats.frameRateReceived = Number(ssrcReport.stat(name));\n                    break;\n                case 'ssrc':\n                    stats[name] = ssrcReport.stat(name);\n                    break;\n                case 'bytesReceived':\n                case 'bytesSent':\n                case 'packetsLost':\n                case 'packetsReceived':\n                case 'packetsSent':\n                case 'audioInputLevel':\n                case 'audioOutputLevel':\n                    stats[name] = Number(ssrcReport.stat(name));\n                    break;\n            }\n            return stats;\n        }, standardizedStats);\n    }\n    return standardizedStats;\n}\n/**\n * Standardize the MediaStreamTrack's statistics in Chrome or Safari.\n * @param {RTCStatsResponse} response\n * @returns {Array<StandardizedTrackStatsReport>}\n */\nfunction standardizeChromeOrSafariStats(response) {\n    var inbound = null;\n    // NOTE(mpatwardhan): We should expect more than one \"outbound-rtp\" stats for a\n    // VP8 simulcast MediaStreamTrack.\n    var outbound = [];\n    var remoteInbound = null;\n    var remoteOutbound = null;\n    var track = null;\n    var codec = null;\n    var localMedia = null;\n    response.forEach(function (stat) {\n        switch (stat.type) {\n            case 'inbound-rtp':\n                inbound = stat;\n                break;\n            case 'outbound-rtp':\n                outbound.push(stat);\n                break;\n            case 'media-source':\n                localMedia = stat;\n                break;\n            case 'track':\n                track = stat;\n                break;\n            case 'codec':\n                codec = stat;\n                break;\n            case 'remote-inbound-rtp':\n                remoteInbound = stat;\n                break;\n            case 'remote-outbound-rtp':\n                remoteOutbound = stat;\n                break;\n        }\n    });\n    var isRemote = track && track.remoteSource;\n    var mainSources = isRemote ? [inbound] : outbound;\n    var stats = [];\n    var remoteSource = isRemote ? remoteOutbound : remoteInbound; // remote rtp stats\n    mainSources.forEach(function (source) {\n        var standardizedStats = {};\n        var statSources = [\n            source,\n            localMedia,\n            track,\n            codec,\n            remoteSource && remoteSource.ssrc === source.ssrc ? remoteSource : null, // remote rtp stats\n        ];\n        function getStatValue(name) {\n            var sourceFound = statSources.find(function (statSource) {\n                return statSource && typeof statSource[name] !== 'undefined';\n            }) || null;\n            return sourceFound ? sourceFound[name] : null;\n        }\n        var ssrc = getStatValue('ssrc');\n        if (typeof ssrc === 'number') {\n            standardizedStats.ssrc = String(ssrc);\n        }\n        var timestamp = getStatValue('timestamp');\n        standardizedStats.timestamp = Math.round(timestamp);\n        var mimeType = getStatValue('mimeType');\n        if (typeof mimeType === 'string') {\n            mimeType = mimeType.split('/');\n            standardizedStats.codecName = mimeType[mimeType.length - 1];\n        }\n        var roundTripTime = getStatValue('roundTripTime');\n        if (typeof roundTripTime === 'number') {\n            standardizedStats.roundTripTime = Math.round(roundTripTime * 1000);\n        }\n        var jitter = getStatValue('jitter');\n        if (typeof jitter === 'number') {\n            standardizedStats.jitter = Math.round(jitter * 1000);\n        }\n        var frameWidth = getStatValue('frameWidth');\n        if (typeof frameWidth === 'number') {\n            if (isRemote) {\n                standardizedStats.frameWidthReceived = frameWidth;\n            }\n            else {\n                standardizedStats.frameWidthSent = frameWidth;\n                standardizedStats.frameWidthInput = track.frameWidth;\n            }\n        }\n        var frameHeight = getStatValue('frameHeight');\n        if (typeof frameHeight === 'number') {\n            if (isRemote) {\n                standardizedStats.frameHeightReceived = frameHeight;\n            }\n            else {\n                standardizedStats.frameHeightSent = frameHeight;\n                standardizedStats.frameHeightInput = track.frameHeight;\n            }\n        }\n        var framesPerSecond = getStatValue('framesPerSecond');\n        if (typeof framesPerSecond === 'number') {\n            standardizedStats[isRemote ? 'frameRateReceived' : 'frameRateSent'] = framesPerSecond;\n        }\n        var bytesReceived = getStatValue('bytesReceived');\n        if (typeof bytesReceived === 'number') {\n            standardizedStats.bytesReceived = bytesReceived;\n        }\n        var bytesSent = getStatValue('bytesSent');\n        if (typeof bytesSent === 'number') {\n            standardizedStats.bytesSent = bytesSent;\n        }\n        var packetsLost = getStatValue('packetsLost');\n        if (typeof packetsLost === 'number') {\n            standardizedStats.packetsLost = packetsLost;\n        }\n        var packetsReceived = getStatValue('packetsReceived');\n        if (typeof packetsReceived === 'number') {\n            standardizedStats.packetsReceived = packetsReceived;\n        }\n        var packetsSent = getStatValue('packetsSent');\n        if (typeof packetsSent === 'number') {\n            standardizedStats.packetsSent = packetsSent;\n        }\n        var audioLevel = getStatValue('audioLevel');\n        if (typeof audioLevel === 'number') {\n            audioLevel = Math.round(audioLevel * CHROME_LEGACY_MAX_AUDIO_LEVEL);\n            if (isRemote) {\n                standardizedStats.audioOutputLevel = audioLevel;\n            }\n            else {\n                standardizedStats.audioInputLevel = audioLevel;\n            }\n        }\n        var totalPacketSendDalay = getStatValue('totalPacketSendDelay');\n        if (typeof totalPacketSendDalay === 'number') {\n            standardizedStats.totalPacketSendDelay = totalPacketSendDalay;\n        }\n        var totalEncodeTime = getStatValue('totalEncodeTime');\n        if (typeof totalEncodeTime === 'number') {\n            standardizedStats.totalEncodeTime = totalEncodeTime;\n        }\n        var framesEncoded = getStatValue('framesEncoded');\n        if (typeof framesEncoded === 'number') {\n            standardizedStats.framesEncoded = framesEncoded;\n        }\n        var estimatedPlayoutTimestamp = getStatValue('estimatedPlayoutTimestamp');\n        if (typeof estimatedPlayoutTimestamp === 'number') {\n            standardizedStats.estimatedPlayoutTimestamp = estimatedPlayoutTimestamp;\n        }\n        var totalDecodeTime = getStatValue('totalDecodeTime');\n        if (typeof totalDecodeTime === 'number') {\n            standardizedStats.totalDecodeTime = totalDecodeTime;\n        }\n        var framesDecoded = getStatValue('framesDecoded');\n        if (typeof framesDecoded === 'number') {\n            standardizedStats.framesDecoded = framesDecoded;\n        }\n        var jitterBufferDelay = getStatValue('jitterBufferDelay');\n        if (typeof jitterBufferDelay === 'number') {\n            standardizedStats.jitterBufferDelay = jitterBufferDelay;\n        }\n        var jitterBufferEmittedCount = getStatValue('jitterBufferEmittedCount');\n        if (typeof jitterBufferEmittedCount === 'number') {\n            standardizedStats.jitterBufferEmittedCount = jitterBufferEmittedCount;\n        }\n        stats.push(standardizedStats);\n    });\n    return stats;\n}\n/**\n * Standardize the MediaStreamTrack's statistics in Firefox.\n * @param {RTCStatsReport} response\n * @param {boolean} isRemote\n * @returns {StandardizedTrackStatsReport}\n */\nfunction standardizeFirefoxStats(response, isRemote) {\n    // NOTE(mroberts): If getStats is called on a closed RTCPeerConnection,\n    // Firefox returns undefined instead of an RTCStatsReport. We workaround this\n    // here. See the following bug for more details:\n    //\n    //   https://bugzilla.mozilla.org/show_bug.cgi?id=1377225\n    //\n    response = response || new Map();\n    var inbound = null;\n    var outbound = null;\n    // NOTE(mmalavalli): Starting from Firefox 63, RTC{Inbound, Outbound}RTPStreamStats.isRemote\n    // will be deprecated, followed by its removal in Firefox 66. Also, trying to\n    // access members of the remote RTC{Inbound, Outbound}RTPStreamStats without\n    // using RTCStatsReport.get(remoteId) will trigger console warnings. So, we\n    // no longer depend on \"isRemote\", and we call RTCStatsReport.get(remoteId)\n    // to access the remote RTC{Inbound, Outbound}RTPStreamStats.\n    //\n    // Source: https://blog.mozilla.org/webrtc/getstats-isremote-65/\n    //\n    response.forEach(function (stat) {\n        if (stat.isRemote) {\n            return;\n        }\n        switch (stat.type) {\n            case 'inbound-rtp':\n                inbound = stat;\n                outbound = response.get(stat.remoteId);\n                break;\n            case 'outbound-rtp':\n                outbound = stat;\n                inbound = response.get(stat.remoteId);\n                break;\n        }\n    });\n    var first = isRemote ? inbound : outbound;\n    var second = isRemote ? outbound : inbound;\n    function getStatValue(name) {\n        if (first && typeof first[name] !== 'undefined') {\n            return first[name];\n        }\n        if (second && typeof second[name] !== 'undefined') {\n            return second[name];\n        }\n        return null;\n    }\n    var standardizedStats = {};\n    var timestamp = getStatValue('timestamp');\n    standardizedStats.timestamp = Math.round(timestamp);\n    var ssrc = getStatValue('ssrc');\n    if (typeof ssrc === 'number') {\n        standardizedStats.ssrc = String(ssrc);\n    }\n    var bytesSent = getStatValue('bytesSent');\n    if (typeof bytesSent === 'number') {\n        standardizedStats.bytesSent = bytesSent;\n    }\n    var packetsLost = getStatValue('packetsLost');\n    if (typeof packetsLost === 'number') {\n        standardizedStats.packetsLost = packetsLost;\n    }\n    var packetsSent = getStatValue('packetsSent');\n    if (typeof packetsSent === 'number') {\n        standardizedStats.packetsSent = packetsSent;\n    }\n    var roundTripTime = getStatValue('roundTripTime');\n    if (typeof roundTripTime === 'number') {\n        // roundTripTime is double - measured in seconds.\n        // https://www.w3.org/TR/webrtc-stats/#dom-rtcremoteinboundrtpstreamstats-roundtriptime\n        // cover it to milliseconds (and make it integer)\n        standardizedStats.roundTripTime = Math.round(roundTripTime * 1000);\n    }\n    var jitter = getStatValue('jitter');\n    if (typeof jitter === 'number') {\n        standardizedStats.jitter = Math.round(jitter * 1000);\n    }\n    var frameRateSent = getStatValue('framerateMean');\n    if (typeof frameRateSent === 'number') {\n        standardizedStats.frameRateSent = Math.round(frameRateSent);\n    }\n    var bytesReceived = getStatValue('bytesReceived');\n    if (typeof bytesReceived === 'number') {\n        standardizedStats.bytesReceived = bytesReceived;\n    }\n    var packetsReceived = getStatValue('packetsReceived');\n    if (typeof packetsReceived === 'number') {\n        standardizedStats.packetsReceived = packetsReceived;\n    }\n    var frameRateReceived = getStatValue('framerateMean');\n    if (typeof frameRateReceived === 'number') {\n        standardizedStats.frameRateReceived = Math.round(frameRateReceived);\n    }\n    var totalPacketSendDalay = getStatValue('totalPacketSendDelay');\n    if (typeof totalPacketSendDalay === 'number') {\n        standardizedStats.totalPacketSendDelay = totalPacketSendDalay;\n    }\n    var totalEncodeTime = getStatValue('totalEncodeTime');\n    if (typeof totalEncodeTime === 'number') {\n        standardizedStats.totalEncodeTime = totalEncodeTime;\n    }\n    var framesEncoded = getStatValue('framesEncoded');\n    if (typeof framesEncoded === 'number') {\n        standardizedStats.framesEncoded = framesEncoded;\n    }\n    var estimatedPlayoutTimestamp = getStatValue('estimatedPlayoutTimestamp');\n    if (typeof estimatedPlayoutTimestamp === 'number') {\n        standardizedStats.estimatedPlayoutTimestamp = estimatedPlayoutTimestamp;\n    }\n    var totalDecodeTime = getStatValue('totalDecodeTime');\n    if (typeof totalDecodeTime === 'number') {\n        standardizedStats.totalDecodeTime = totalDecodeTime;\n    }\n    var framesDecoded = getStatValue('framesDecoded');\n    if (typeof framesDecoded === 'number') {\n        standardizedStats.framesDecoded = framesDecoded;\n    }\n    var jitterBufferDelay = getStatValue('jitterBufferDelay');\n    if (typeof jitterBufferDelay === 'number') {\n        standardizedStats.jitterBufferDelay = jitterBufferDelay;\n    }\n    var jitterBufferEmittedCount = getStatValue('jitterBufferEmittedCount');\n    if (typeof jitterBufferEmittedCount === 'number') {\n        standardizedStats.jitterBufferEmittedCount = jitterBufferEmittedCount;\n    }\n    return standardizedStats;\n}\n/**\n * Standardized RTCIceCandidate statistics.\n * @typedef {object} StandardizedIceCandidateStatsReport\n * @property {'host'|'prflx'|'relay'|'srflx'} candidateType\n * @property {string} ip\n * @property {number} port\n * @property {number} priority\n * @property {'tcp'|'udp'} protocol\n * @property {string} url\n */\n/**\n * Standardized local RTCIceCandidate statistics.\n * @typedef {StandardizedIceCandidateStatsReport} StandardizedLocalIceCandidateStatsReport\n * @property {boolean} [deleted=false]\n * @property {'tcp'|'tls'|'udp'} relayProtocol\n */\n/**\n * Standardized active RTCIceCandidate pair statistics.\n * @typedef {object} StandardizedActiveIceCandidatePairStatsReport\n * @property {number} availableIncomingBitrate\n * @property {number} availableOutgoingBitrate\n * @property {number} bytesReceived\n * @property {number} bytesSent\n * @property {number} consentRequestsSent\n * @property {number} currentRoundTripTime\n * @property {number} lastPacketReceivedTimestamp\n * @property {number} lastPacketSentTimestamp\n * @property {StandardizedLocalIceCandidateStatsReport} localCandidate\n * @property {boolean} nominated\n * @property {number} priority\n * @property {boolean} readable\n * @property {StandardizedIceCandidateStatsReport} remoteCandidate\n * @property {number} requestsReceived\n * @property {number} requestsSent\n * @property {number} responsesReceived\n * @property {number} responsesSent\n * @property {number} retransmissionsReceived\n * @property {number} retransmissionsSent\n * @property {'frozen'|'waiting'|'in-progress'|'failed'|'succeeded'} state\n * @property {number} totalRoundTripTime\n * @property {string} transportId\n * @property {boolean} writable\n */\n/**\n * Standardized {@link RTCPeerConnection} statistics.\n * @typedef {Object} StandardizedStatsResponse\n * @property {StandardizedActiveIceCandidatePairStatsReport} activeIceCandidatePair - Stats for active ICE candidate pair\n * @property Array<StandardizedTrackStatsReport> localAudioTrackStats - Stats for local audio MediaStreamTracks\n * @property Array<StandardizedTrackStatsReport> localVideoTrackStats - Stats for local video MediaStreamTracks\n * @property Array<StandardizedTrackStatsReport> remoteAudioTrackStats - Stats for remote audio MediaStreamTracks\n * @property Array<StandardizedTrackStatsReport> remoteVideoTrackStats - Stats for remote video MediaStreamTracks\n */\n/**\n * Standardized MediaStreamTrack statistics.\n * @typedef {Object} StandardizedTrackStatsReport\n * @property {string} trackId - MediaStreamTrack ID\n * @property {string} ssrc - SSRC of the MediaStreamTrack\n * @property {number} timestamp - The Unix timestamp in milliseconds\n * @property {string} [codecName] - Name of the codec used to encode the MediaStreamTrack's media\n * @property {number} [roundTripTime] - Round trip time in milliseconds\n * @property {number} [jitter] - Jitter in milliseconds\n * @property {number} [frameWidthInput] - Width in pixels of the local video MediaStreamTrack's captured frame\n * @property {number} [frameHeightInput] - Height in pixels of the local video MediaStreamTrack's captured frame\n * @property {number} [frameWidthSent] - Width in pixels of the local video MediaStreamTrack's encoded frame\n * @property {number} [frameHeightSent] - Height in pixels of the local video MediaStreamTrack's encoded frame\n * @property {number} [frameWidthReceived] - Width in pixels of the remote video MediaStreamTrack's received frame\n * @property {number} [frameHeightReceived] - Height in pixels of the remote video MediaStreamTrack's received frame\n * @property {number} [frameRateInput] - Captured frames per second of the local video MediaStreamTrack\n * @property {number} [frameRateSent] - Frames per second of the local video MediaStreamTrack's encoded video\n * @property {number} [frameRateReceived] - Frames per second of the remote video MediaStreamTrack's received video\n * @property {number} [bytesReceived] - Number of bytes of the remote MediaStreamTrack's media received\n * @property {number} [bytesSent] - Number of bytes of the local MediaStreamTrack's media sent\n * @property {number} [packetsLost] - Number of packets of the MediaStreamTrack's media lost\n * @property {number} [packetsReceived] - Number of packets of the remote MediaStreamTrack's media received\n * @property {number} [packetsSent] - Number of packets of the local MediaStreamTrack's media sent\n * @property {number} [totalPacketSendDelay] - The total number of seconds that the local MediaStreamTrack's packets\n *  have spent buffered locally before being sent over the network\n * @property {number} [totalEncodeTime] - The total number of seconds spent on encoding the local MediaStreamTrack's frames\n * @property {number} [framesEncoded] - The total number of frames of the local MediaStreamTrack that have been encoded sor far\n * @property {number} [estimatedPlayoutTimestamp] - The estimated playout time of the remote MediaStreamTrack\n * @property {number} [totalDecodeTime] - The total number of seconds spent on decoding the remote MediaStreamTrack's frames\n * @property {number} [framesDecoded] - The total number of frames of the remote MediaStreamTrack that have been decoded sor far\n * @property {number} [jitterBufferDelay] - The sum of the time, in seconds, each audio sample or a video frame of the remote\n *   MediaStreamTrack takes from the time the first packet is received by the jitter buffer to the time it exits the jitter buffer\n * @property {number} [jitterBufferEmittedCount] - The total number of audio samples or video frames that have come out of the jitter buffer\n * @property {AudioLevel} [audioInputLevel] - The {@link AudioLevel} of the local audio MediaStreamTrack\n * @property {AudioLevel} [audioOutputLevel] - The {@link AudioLevel} of the remote video MediaStreamTrack\n */\nmodule.exports = getStats;\n//# sourceMappingURL=getstats.js.map"]},"metadata":{},"sourceType":"script"}