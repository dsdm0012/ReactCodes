{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {\n    to[j] = from[i];\n  }\n\n  return to;\n};\n\nvar _a = require('../../util/constants'),\n    E = _a.typeErrors,\n    trackPriority = _a.trackPriority;\n\nvar _b = require('../../webrtc/util'),\n    guessBrowser = _b.guessBrowser,\n    isIOSChrome = _b.isIOSChrome;\n\nvar documentVisibilityMonitor = require('../../util/documentvisibilitymonitor.js');\n\nfunction mixinRemoteMediaTrack(AudioOrVideoTrack) {\n  /**\n   * A {@link RemoteMediaTrack} represents a {@link MediaTrack} published to a\n   * {@link Room} by a {@link RemoteParticipant}.\n   * @property {boolean} isEnabled - Whether the {@link RemoteMediaTrack} is enabled\n   * @property {boolean} isSwitchedOff - Whether the {@link RemoteMediaTrack} is switched off\n   * @property {Track.SID} sid - The SID assigned to the {@link RemoteMediaTrack}\n   * @property {?Track.Priority} priority - The subscribe priority of the {@link RemoteMediaTrack}\n   * @emits RemoteMediaTrack#disabled\n   * @emits RemoteMediaTrack#enabled\n   * @emits RemoteMediaTrack#switchedOff\n   * @emits RemoteMediaTrack#switchedOn\n   */\n  return (\n    /** @class */\n    function (_super) {\n      __extends(RemoteMediaTrack, _super);\n      /**\n       * Construct a {@link RemoteMediaTrack}.\n       * @param {Track.SID} sid\n       * @param {MediaTrackReceiver} mediaTrackReceiver\n       * @param {boolean} isEnabled\n        @param {boolean} isSwitchedOff\n       * @param {function(?Track.Priority): void} setPriority - Set or clear the subscribe\n       *  {@link Track.Priority} of the {@link RemoteMediaTrack}\n       * @param {function(ClientRenderHint): void} setRenderHint - Set render hints.\n       * @param {{log: Log, name: ?string}} options\n       */\n\n\n      function RemoteMediaTrack(sid, mediaTrackReceiver, isEnabled, isSwitchedOff, setPriority, setRenderHint, options) {\n        var _this = this;\n\n        options = Object.assign({\n          // NOTE(mpatwardhan): WebKit bug: 212780 sometimes causes the audio/video elements to stay paused when safari\n          // regains foreground. To workaround it, when safari gains foreground - we will play any elements that were\n          // playing before safari lost foreground.\n          workaroundWebKitBug212780: (guessBrowser() === 'safari' || isIOSChrome()) && typeof document === 'object' && typeof document.addEventListener === 'function' && typeof document.visibilityState === 'string'\n        }, options);\n        _this = _super.call(this, mediaTrackReceiver, options) || this;\n        Object.defineProperties(_this, {\n          _isEnabled: {\n            value: isEnabled,\n            writable: true\n          },\n          _isSwitchedOff: {\n            value: isSwitchedOff,\n            writable: true\n          },\n          _priority: {\n            value: null,\n            writable: true\n          },\n          _setPriority: {\n            value: setPriority\n          },\n          _setRenderHint: {\n            value: function value(renderHint) {\n              _this._log.debug('updating render hint:', renderHint);\n\n              setRenderHint(renderHint);\n            }\n          },\n          isEnabled: {\n            enumerable: true,\n            get: function get() {\n              return this._isEnabled;\n            }\n          },\n          isSwitchedOff: {\n            enumerable: true,\n            get: function get() {\n              return this._isSwitchedOff;\n            }\n          },\n          priority: {\n            enumerable: true,\n            get: function get() {\n              return this._priority;\n            }\n          },\n          sid: {\n            enumerable: true,\n            value: sid\n          },\n          _workaroundWebKitBug212780: {\n            value: options.workaroundWebKitBug212780\n          },\n          _workaroundWebKitBug212780Cleanup: {\n            value: null,\n            writable: true\n          }\n        });\n        return _this;\n      }\n      /**\n       * Update the subscribe {@link Track.Priority} of the {@link RemoteMediaTrack}.\n       * @param {?Track.Priority} priority - the new subscribe {@link Track.Priority};\n       *   If <code>null</code>, then the subscribe {@link Track.Priority} is cleared, which\n       *   means the {@link Track.Priority} set by the publisher is now the effective priority.\n       * @returns {this}\n       * @throws {RangeError}\n       */\n\n\n      RemoteMediaTrack.prototype.setPriority = function (priority) {\n        var priorityValues = __spreadArray([null], __read(Object.values(trackPriority)));\n\n        if (!priorityValues.includes(priority)) {\n          // eslint-disable-next-line new-cap\n          throw E.INVALID_VALUE('priority', priorityValues);\n        }\n\n        if (this._priority !== priority) {\n          this._priority = priority;\n\n          this._setPriority(priority);\n        }\n\n        return this;\n      };\n      /**\n       * @private\n       * @param {boolean} isEnabled\n       */\n\n\n      RemoteMediaTrack.prototype._setEnabled = function (isEnabled) {\n        if (this._isEnabled !== isEnabled) {\n          this._isEnabled = isEnabled;\n          this.emit(this._isEnabled ? 'enabled' : 'disabled', this);\n        }\n      };\n      /**\n       * @private\n       * @param {boolean} isSwitchedOff\n       */\n\n\n      RemoteMediaTrack.prototype._setSwitchedOff = function (isSwitchedOff) {\n        if (this._isSwitchedOff !== isSwitchedOff) {\n          this._isSwitchedOff = isSwitchedOff;\n          this.emit(isSwitchedOff ? 'switchedOff' : 'switchedOn', this);\n        }\n      };\n\n      RemoteMediaTrack.prototype.attach = function (el) {\n        var result = _super.prototype.attach.call(this, el);\n\n        if (this.mediaStreamTrack.enabled !== true) {\n          // NOTE(mpatwardhan): we disable mediaStreamTrack when there\n          // are no attachments to it (see notes below). Now that there\n          // are attachments re-enable the track.\n          this.mediaStreamTrack.enabled = true;\n\n          if (this.processedTrack) {\n            this.processedTrack.enabled = true;\n          } // NOTE(csantos): since remote tracks disables/enables the mediaStreamTrack,\n          // captureFrames stops along with it. We need to start it again after re-enabling.\n          // See attach/detach methods in this class and in VideoTrack class.\n\n\n          if (this.processor) {\n            this._captureFrames();\n          }\n        }\n\n        if (this._workaroundWebKitBug212780) {\n          this._workaroundWebKitBug212780Cleanup = this._workaroundWebKitBug212780Cleanup || playIfPausedWhileInBackground(this);\n        }\n\n        return result;\n      };\n\n      RemoteMediaTrack.prototype.detach = function (el) {\n        var result = _super.prototype.detach.call(this, el);\n\n        if (this._attachments.size === 0) {\n          // NOTE(mpatwardhan): chrome continues playing webrtc audio\n          // track even after audio element is removed from the DOM.\n          // https://bugs.chromium.org/p/chromium/issues/detail?id=749928\n          // to workaround: here disable the track when\n          // there are no elements attached to it.\n          this.mediaStreamTrack.enabled = false;\n\n          if (this.processedTrack) {\n            this.processedTrack.enabled = false;\n          }\n\n          if (this._workaroundWebKitBug212780Cleanup) {\n            // unhook visibility change\n            this._workaroundWebKitBug212780Cleanup();\n\n            this._workaroundWebKitBug212780Cleanup = null;\n          }\n        }\n\n        return result;\n      };\n\n      return RemoteMediaTrack;\n    }(AudioOrVideoTrack)\n  );\n}\n\nfunction playIfPausedWhileInBackground(remoteMediaTrack) {\n  var log = remoteMediaTrack._log,\n      kind = remoteMediaTrack.kind;\n\n  function onVisibilityChanged(isVisible) {\n    if (!isVisible) {\n      return;\n    }\n\n    remoteMediaTrack._attachments.forEach(function (el) {\n      var shim = remoteMediaTrack._elShims.get(el);\n\n      var isInadvertentlyPaused = el.paused && shim && !shim.pausedIntentionally();\n\n      if (isInadvertentlyPaused) {\n        log.info(\"Playing inadvertently paused <\" + kind + \"> element\");\n        log.debug('Element:', el);\n        log.debug('RemoteMediaTrack:', remoteMediaTrack);\n        el.play().then(function () {\n          log.info(\"Successfully played inadvertently paused <\" + kind + \"> element\");\n          log.debug('Element:', el);\n          log.debug('RemoteMediaTrack:', remoteMediaTrack);\n        }).catch(function (err) {\n          log.warn(\"Error while playing inadvertently paused <\" + kind + \"> element:\", {\n            err: err,\n            el: el,\n            remoteMediaTrack: remoteMediaTrack\n          });\n        });\n      }\n    });\n  } // NOTE(mpatwardhan): listen for document visibility callback on phase 2.\n  // this ensures that any LocalMediaTrack's restart (which listen on phase 1) gets executed\n  // first. This order is important because we `play` tracks in the callback, and\n  // play can fail on safari if audio is not being captured.\n\n\n  documentVisibilityMonitor.onVisibilityChange(2, onVisibilityChanged);\n  return function () {\n    documentVisibilityMonitor.offVisibilityChange(2, onVisibilityChanged);\n  };\n}\n/**\n * A {@link RemoteMediaTrack} was disabled.\n * @param {RemoteMediaTrack} track - The {@link RemoteMediaTrack} that was\n *   disabled\n * @event RemoteMediaTrack#disabled\n */\n\n/**\n * A {@link RemoteMediaTrack} was enabled.\n * @param {RemoteMediaTrack} track - The {@link RemoteMediaTrack} that was\n *   enabled\n * @event RemoteMediaTrack#enabled\n */\n\n/**\n * A {@link RemoteMediaTrack} was switched off.\n * @param {RemoteMediaTrack} track - The {@link RemoteMediaTrack} that was\n *   switched off\n * @event RemoteMediaTrack#switchedOff\n */\n\n/**\n * A {@link RemoteMediaTrack} was switched on.\n * @param {RemoteMediaTrack} track - The {@link RemoteMediaTrack} that was\n *   switched on\n * @event RemoteMediaTrack#switchedOn\n */\n\n/**\n * A {@link ClientRenderHint} object specifies track dimensions and /enabled disable state.\n * This state will be used by the server(SFU) to determine bandwidth allocation for the track,\n * and turn it on or off as needed.\n * @typedef {object} ClientRenderHint\n * @property {boolean} [enabled] - track is enabled or disabled. defaults to disabled.\n * @property {VideoTrack.Dimensions} [renderDimensions] - Optional parameter to specify the desired\n *   render dimensions of {@link RemoteVideoTrack}s. This property must be specified if enabled=true\n */\n\n\nmodule.exports = mixinRemoteMediaTrack;","map":null,"metadata":{},"sourceType":"script"}