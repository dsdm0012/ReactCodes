{"ast":null,"code":"/* eslint no-undefined:0 */\n'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar average = require('./average');\n\nvar SenderOrReceiverReport = require('./senderorreceiverreport');\n\nvar sum = require('./sum');\n/**\n * @interface SenderSummary\n * @property {number} bitrate\n * @property {number} [rtt] - s (undefined in Chrome)\n */\n\n/**\n * @extends SenderOrReceiverReport\n * @property {number} [rtt] - s (undefined in Chrome)\n */\n\n\nvar SenderReport =\n/** @class */\nfunction (_super) {\n  __extends(SenderReport, _super);\n  /**\n   * Construct a {@link SenderReport}.\n   * @param {StatsId} id\n   * @param {TrackId} trackId\n   * @param {number} bitrate - bps\n   * @param {number} [rtt] - s\n   */\n\n\n  function SenderReport(id, trackId, bitrate, rtt) {\n    var _this = _super.call(this, id, trackId, bitrate) || this;\n\n    Object.defineProperties(_this, {\n      rtt: {\n        enumerable: true,\n        value: rtt\n      }\n    });\n    return _this;\n  }\n  /**\n   * Create a {@link SenderReport}.\n   * @param {string} trackId\n   * @param {RTCStats} olderStats\n   * @param {RTCStats} newerStats\n   * @param {RTCRemoteInboundRtpStreamStats} [newerRemoteStats]\n   * @returns {SenderReport}\n   */\n\n\n  SenderReport.of = function (trackId, olderStats, newerStats, newerRemoteStats) {\n    if (olderStats.id !== newerStats.id) {\n      throw new Error('RTCStats IDs must match');\n    }\n\n    var secondsElapsed = (newerStats.timestamp - olderStats.timestamp) / 1000;\n    var deltaBytesSent = newerStats.bytesSent - olderStats.bytesSent;\n    var bitrate = secondsElapsed > 0 ? deltaBytesSent / secondsElapsed * 8 : 0;\n    var rtt = newerRemoteStats && typeof newerRemoteStats.roundTripTime === 'number' ? newerRemoteStats.roundTripTime / 1000 : undefined;\n    return new SenderReport(olderStats.id, trackId, bitrate, rtt);\n  };\n  /**\n   * Summarize {@link SenderReport}s by summing and averaging their values.\n   * @param {Array<SenderReport>} reports\n   * @returns {SenderSummary}\n   */\n\n\n  SenderReport.summarize = function (reports) {\n    var bitrate = sum(reports.map(function (report) {\n      return report.bitrate;\n    }));\n    var rtt = average(reports.map(function (report) {\n      return report.rtt;\n    }));\n    return {\n      bitrate: bitrate,\n      rtt: rtt\n    };\n  };\n\n  return SenderReport;\n}(SenderOrReceiverReport);\n\nmodule.exports = SenderReport;","map":null,"metadata":{},"sourceType":"script"}