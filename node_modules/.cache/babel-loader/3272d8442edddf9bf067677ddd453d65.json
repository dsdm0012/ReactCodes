{"ast":null,"code":"'use strict';\n/**\n * Calculates the moving average delta for the given pair ofsamples. A sample (S)\n * consists of a numerator (Sn) and a denominator (Sd).The moving average delta is\n * calculated as follows:\n *\n * MovingAvgDelta = (Sn[1] - Sn[0]) / (Sd[1] - Sd[0])\n */\n\nvar MovingAverageDelta =\n/** @class */\nfunction () {\n  /**\n   * Constructor.\n   */\n  function MovingAverageDelta() {\n    Object.defineProperties(this, {\n      _samples: {\n        value: [{\n          denominator: 0,\n          numerator: 0\n        }, {\n          denominator: 0,\n          numerator: 0\n        }]\n      }\n    });\n  }\n  /**\n   * Get the moving average delta.\n   * @returns {number}\n   */\n\n\n  MovingAverageDelta.prototype.get = function () {\n    var samples = this._samples;\n    var denominatorDelta = samples[1].denominator - samples[0].denominator || Infinity;\n    var numeratorDelta = samples[1].numerator - samples[0].numerator;\n    return numeratorDelta / denominatorDelta;\n  };\n  /**\n   * Put a sample and get rid of the older sample to maintain sample size of 2.\n   * @param numerator\n   * @param denominator\n   */\n\n\n  MovingAverageDelta.prototype.putSample = function (numerator, denominator) {\n    var samples = this._samples;\n    samples.shift();\n    samples.push({\n      denominator: denominator,\n      numerator: numerator\n    });\n  };\n\n  return MovingAverageDelta;\n}();\n\nmodule.exports = MovingAverageDelta;","map":null,"metadata":{},"sourceType":"script"}