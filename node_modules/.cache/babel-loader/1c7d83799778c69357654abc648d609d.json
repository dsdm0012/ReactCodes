{"ast":null,"code":"var _jsxFileName = \"/home/bibhu/EDRdevelopment/DevBranch/edresearchweb/src/allAppsStudent/Messages/VATChat/ChatWindow/ChatWindowTest.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport classes from \"./ChatWindow.module.css\";\nimport ChatUserInfoTopBar from \"./ChatUserInfoTopBar\";\nimport ChatScreen from \"./ChatScreen\";\nimport ChatInput from \"./ChatInput\";\nimport { w3cwebsocket as W3CWebSocket } from 'websocket';\nimport { Picker } from \"emoji-mart\";\nimport \"emoji-mart/css/emoji-mart.css\";\nimport Login from '../../../../CommonApps/Login';\nimport axiosInstance from '../../../../axios';\nimport { MdSend } from 'react-icons/md';\nimport { postchatcomment, getchatcomments } from '../../../../CommonApps/AllAPICalls';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socketURL = 'ws://127.0.0.1:8000/ws/chat/class/';\n\nfunction reconnectingSocket(socketURL) {\n  console.log(\"reconnection starting\");\n  let client;\n  let isConnected = false;\n  let reconnectOnClose = true;\n  let messageListeners = [];\n  let stateChangeListeners = [];\n\n  function on(fn) {\n    messageListeners.push(fn);\n    console.log('1. ', messageListeners);\n  }\n\n  function off(fn) {\n    messageListeners = messageListeners.filter(l => l !== fn);\n  }\n\n  function onStateChange(fn) {\n    stateChangeListeners.push(fn);\n    console.log('On state change: ', fn);\n    return () => {\n      stateChangeListeners = stateChangeListeners.filter(l => l !== fn);\n    };\n  }\n\n  function start() {\n    client = new WebSocket(socketURL);\n\n    client.onopen = () => {\n      isConnected = true;\n      stateChangeListeners.forEach(fn => fn(true));\n    };\n\n    const close = client.close;\n\n    client.close = () => {\n      reconnectOnClose = false;\n      close.call(client);\n    }; //client.onmessage = (event) => {\n    //  messageListeners.forEach(fn => fn(event.data));\n    //\t   console.log(\"messageListener: \", client.messageListeners); \n    // }\n\n\n    client.onerror = e => console.error(e);\n\n    client.onclose = () => {\n      isConnected = false;\n      stateChangeListeners.forEach(fn => fn(false));\n\n      if (!reconnectOnClose) {\n        console.log('ws closed by app');\n        return;\n      }\n\n      console.log('ws closed by server');\n      setTimeout(start, 3000);\n    };\n  }\n\n  start();\n  return {\n    on,\n    off,\n    onStateChange,\n    close: () => client.close(),\n    getClient: () => client,\n    isConnected: () => isConnected\n  };\n}\n\nconst client = reconnectingSocket(socketURL);\nconsole.log(\"rerenderng:\");\n\nfunction useMessages() {\n  _s();\n\n  const [messages, setMessages] = useState([]);\n  useEffect(() => {\n    function handleMessage(message) {\n      setMessages([...messages, message]);\n    }\n\n    client.on(handleMessage);\n    return () => client.off(handleMessage);\n  }, [messages, setMessages]);\n  return messages;\n}\n\n_s(useMessages, \"RyA59LRbn9goj/9N7rELX+NWNVI=\");\n\nconst ChatWindow = props => {\n  _s2();\n\n  let roomname = 'class';\n  const [state, setState] = useState({\n    messages: [],\n    value: ''\n  });\n  const [commentObj, setChatCommentObj] = useState([{}]);\n  const [message, setMessage] = useState('');\n  const messages = useMessages();\n  const [isConnected, setIsConnected] = useState(client.isConnected());\n  console.log(\"--isConnected1: \", client.isConnected()); //   useEffect(() => {\n  //  return client.onStateChange(setIsConnected);\n  //  }, [setIsConnected]);\n\n  useEffect(() => {\n    if (isConnected) {\n      client.getClient().send('hi');\n    }\n  }, [isConnected]);\n\n  function sendMessage(e) {\n    e.preventDefault();\n    client.getClient().send(message);\n    console.log(\"sending message: \", message);\n    setMessage('');\n  }\n\n  client.getClient().onmessage = event => {\n    console.log(\"message from server\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.chatWindow,\n    children: [/*#__PURE__*/_jsxDEV(ChatUserInfoTopBar, {\n      clickedUserId: props.clickedUserId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(ChatScreen, {\n      messages: messages,\n      commentObj: commentObj\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.chatInput,\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        className: classes.addCommentForm,\n        onSubmit: sendMessage,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.chatInput,\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            className: classes.inputTextBox,\n            value: message,\n            onChange: e => setMessage(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 23\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: classes.submit_button,\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: [/*#__PURE__*/_jsxDEV(MdSend, {\n              className: classes.sendButtonIcon\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 80\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 77\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 18\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 6\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 199,\n    columnNumber: 1\n  }, this);\n};\n\n_s2(ChatWindow, \"jbUMDua1eJjMPRkf+x6JYrTFq5w=\", false, function () {\n  return [useMessages];\n});\n\n_c = ChatWindow;\nexport default ChatWindow;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatWindow\");","map":{"version":3,"sources":["/home/bibhu/EDRdevelopment/DevBranch/edresearchweb/src/allAppsStudent/Messages/VATChat/ChatWindow/ChatWindowTest.js"],"names":["React","useState","useEffect","useRef","classes","ChatUserInfoTopBar","ChatScreen","ChatInput","w3cwebsocket","W3CWebSocket","Picker","Login","axiosInstance","MdSend","postchatcomment","getchatcomments","socketURL","reconnectingSocket","console","log","client","isConnected","reconnectOnClose","messageListeners","stateChangeListeners","on","fn","push","off","filter","l","onStateChange","start","WebSocket","onopen","forEach","close","call","onerror","e","error","onclose","setTimeout","getClient","useMessages","messages","setMessages","handleMessage","message","ChatWindow","props","roomname","state","setState","value","commentObj","setChatCommentObj","setMessage","setIsConnected","send","sendMessage","preventDefault","onmessage","event","chatWindow","clickedUserId","chatInput","addCommentForm","inputTextBox","target","submit_button","sendButtonIcon"],"mappings":"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","sourcesContent":["import React,{useState,useEffect,useRef} from \"react\";\nimport classes from \"./ChatWindow.module.css\"\nimport ChatUserInfoTopBar from \"./ChatUserInfoTopBar\";\nimport ChatScreen from \"./ChatScreen\";\nimport ChatInput from \"./ChatInput\";\nimport {w3cwebsocket as W3CWebSocket } from 'websocket';\nimport { Picker } from \"emoji-mart\";\nimport \"emoji-mart/css/emoji-mart.css\";\nimport Login from '../../../../CommonApps/Login';\nimport axiosInstance from '../../../../axios';\nimport {MdSend} from 'react-icons/md';\nimport {postchatcomment,getchatcomments} from '../../../../CommonApps/AllAPICalls';\n\nconst socketURL= 'ws://127.0.0.1:8000/ws/chat/class/'\n\n\n\n\n\nfunction reconnectingSocket(socketURL) {\n\n\n  console.log(\"reconnection starting\");\t\n  let client;\n  let isConnected = false;\n  let reconnectOnClose = true;\n  let messageListeners = [];\n  let stateChangeListeners = [];\n\n  function on(fn) {\n    messageListeners.push(fn);\n    console.log('1. ',messageListeners);\t  \n  }\n\n  function off(fn) {\n    messageListeners = messageListeners.filter(l => l !== fn);\n  }\n\n  function onStateChange(fn) {\n    stateChangeListeners.push(fn);\n    console.log('On state change: ',fn);\n\n\n    return () => {\n      stateChangeListeners = stateChangeListeners.filter(l => l !== fn);\n    };\n  }\n\n\n\n\n\n\n  function start() {\n    client = new WebSocket(socketURL);\n\n    client.onopen = () => {\n      isConnected = true;\n      stateChangeListeners.forEach(fn => fn(true));\n    }\n\n    const close = client.close;\n\n    client.close = () => {\n      reconnectOnClose = false;\n      close.call(client);\n    }\n\n    //client.onmessage = (event) => {\n    //  messageListeners.forEach(fn => fn(event.data));\n    //\t   console.log(\"messageListener: \", client.messageListeners); \n   // }\n\n    client.onerror = (e) => console.error(e);\n\n    client.onclose = () => {\n    \n      isConnected = false;\n      stateChangeListeners.forEach(fn => fn(false));\n\n      if (!reconnectOnClose) {\n        console.log('ws closed by app');\n        return;\n      }\n\n      console.log('ws closed by server');\n\n      setTimeout(start, 3000);\n    }\n\n\n  }\n\n   start();\n\nreturn {\n    on,\n    off,\n    onStateChange,\n    close: () => client.close(),\n    getClient: () => client,\n    isConnected: () => isConnected,\n  };\n\n\n\n\n}\n\n\nconst client = reconnectingSocket(socketURL);\n\n\nconsole.log(\"rerenderng:\");\n\nfunction useMessages() {\n  const [messages, setMessages] = useState([]);\n\n  useEffect(() => {\n    function handleMessage(message) {\n      setMessages([...messages, message]);\n    }\n    client.on(handleMessage);\n    return () => client.off(handleMessage);\n  }, [messages, setMessages]);\n\n  return messages;\n}\n\n\n\n\n\n\n\n\n\nconst ChatWindow = (props) =>{\n\n\n\n\n\n    let roomname='class'\n\n    const [state, setState] = useState({messages: [],value: '',});\n    const [commentObj,setChatCommentObj]=useState([{}]);\n\n\n\n\n\n\n\n\n   const [message, setMessage] = useState('');\n\n   const messages = useMessages();\n\n   const [isConnected, setIsConnected] = useState(client.isConnected());\n\n   console.log(\"--isConnected1: \",client.isConnected());\t\n \n   //   useEffect(() => {\n   //  return client.onStateChange(setIsConnected);\n   //  }, [setIsConnected]);\n\n   useEffect(() => {\n \n     if (isConnected) {\n        client.getClient().send('hi');\n      }\n   }, [isConnected]);\n\n\n\n\n function sendMessage(e) {\n    e.preventDefault();\n    client.getClient().send(message);\n    console.log(\"sending message: \", message);\t \n    setMessage('');\n  }\n\n\n  client.getClient().onmessage = (event) => {\n  console.log(\"message from server\");\n\n  }\n\n\n\n\n\n\n\nreturn(\n\n<div className={classes.chatWindow}>\n\n<ChatUserInfoTopBar clickedUserId={props.clickedUserId} />\n\n<ChatScreen messages={messages}  commentObj={commentObj}/>\n\t\n<div className={classes.chatInput}>\n\n\n\n\n\n     <form className={classes.addCommentForm} onSubmit={sendMessage}>\n\n\n                  <div className={classes.chatInput} >\n\n                      <input className={classes.inputTextBox} value={message} onChange={e => setMessage(e.target.value)} />\n\n\n                  </div>\n\n                 \n                 <button type=\"submit\"  className= {classes.submit_button} ><b><MdSend className={classes.sendButtonIcon}/> </b> </button>\n                  \n     </form>\n\n\n</div>\n\n\n\n\t\n</div>\n\n);\n\n}\n\nexport default ChatWindow;\n"]},"metadata":{},"sourceType":"module"}