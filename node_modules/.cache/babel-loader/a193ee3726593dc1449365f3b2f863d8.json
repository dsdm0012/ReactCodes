{"ast":null,"code":"'use strict';\n/**\n * The {@link DocumentVisibilityMonitor} monitors the visibility state of the DOM\n * and executes the attached listeners in phase order when the DOM is visible.\n */\n\nvar DocumentVisibilityMonitor =\n/** @class */\nfunction () {\n  /**\n   * Constructor.\n   * @param {number} [nPhases=1] - the number of phases\n   */\n  function DocumentVisibilityMonitor(nPhases) {\n    var _this = this;\n\n    if (nPhases === void 0) {\n      nPhases = 1;\n    }\n\n    Object.defineProperties(this, {\n      _listeners: {\n        value: []\n      },\n      _onVisibilityChange: {\n        value: function () {\n          _this._emitVisible(document.visibilityState === 'visible');\n        }\n      }\n    });\n\n    for (var i = 0; i < nPhases; i++) {\n      this._listeners.push([]);\n    }\n  }\n  /**\n   * clears the state.\n   */\n\n\n  DocumentVisibilityMonitor.prototype.clear = function () {\n    var nPhases = this._listeners.length;\n\n    for (var i = 0; i < nPhases; i++) {\n      this._listeners[i] = [];\n    }\n  };\n\n  DocumentVisibilityMonitor.prototype._listenerCount = function () {\n    return this._listeners.reduce(function (count, phaseListeners) {\n      return count + phaseListeners.length;\n    }, 0);\n  };\n  /**\n   * Call all the listeners. Makes sure that all listeners for a given phase\n   * are executed before calling the listeners of the next phase.\n   * @private\n   */\n\n\n  DocumentVisibilityMonitor.prototype._emitVisible = function (isVisible) {\n    var _this = this;\n\n    var promise = Promise.resolve();\n\n    var _loop_1 = function (phase) {\n      promise = promise.then(function () {\n        return _this._emitVisiblePhase(phase, isVisible);\n      });\n    };\n\n    for (var phase = 1; phase <= this._listeners.length; phase++) {\n      _loop_1(phase);\n    }\n\n    return promise;\n  };\n  /**\n   * Call all the listeners for a given phase.\n   * @private\n   */\n\n\n  DocumentVisibilityMonitor.prototype._emitVisiblePhase = function (phase, isVisible) {\n    var phaseListeners = this._listeners[phase - 1];\n    return Promise.all(phaseListeners.map(function (listener) {\n      var ret = listener(isVisible);\n      return ret instanceof Promise ? ret : Promise.resolve(ret);\n    }));\n  };\n  /**\n   * Start listening to the DOM visibility state change.\n   * @private\n   */\n\n\n  DocumentVisibilityMonitor.prototype._start = function () {\n    document.addEventListener('visibilitychange', this._onVisibilityChange);\n  };\n  /**\n   * Stop listening to the DOM visibility state change.\n   * @private\n   */\n\n\n  DocumentVisibilityMonitor.prototype._stop = function () {\n    document.removeEventListener('visibilitychange', this._onVisibilityChange);\n  };\n  /**\n   * Listen for the DOM visibility changes at the given phase.\n   * @param {number} phase\n   * @param {function} listener\n   * @returns {this}\n   */\n\n\n  DocumentVisibilityMonitor.prototype.onVisibilityChange = function (phase, listener) {\n    if (typeof phase !== 'number' || phase <= 0 || phase > this._listeners.length) {\n      throw new Error('invalid phase: ', phase);\n    }\n\n    var phaseListeners = this._listeners[phase - 1];\n    phaseListeners.push(listener);\n\n    if (this._listenerCount() === 1) {\n      this._start();\n    }\n\n    return this;\n  };\n  /**\n   * Stop listening for the DOM visibility change at the given phase.\n   * @param {number} phase\n   * @param {function} listener\n   * @returns {this}\n   */\n\n\n  DocumentVisibilityMonitor.prototype.offVisibilityChange = function (phase, listener) {\n    if (typeof phase !== 'number' || phase <= 0 || phase > this._listeners.length) {\n      throw new Error('invalid phase: ', phase);\n    }\n\n    var phaseListeners = this._listeners[phase - 1];\n    var index = phaseListeners.indexOf(listener);\n\n    if (index !== -1) {\n      phaseListeners.splice(index, 1);\n\n      if (this._listenerCount() === 0) {\n        this._stop();\n      }\n    }\n\n    return this;\n  };\n\n  return DocumentVisibilityMonitor;\n}();\n\nmodule.exports = new DocumentVisibilityMonitor(2);","map":null,"metadata":{},"sourceType":"script"}