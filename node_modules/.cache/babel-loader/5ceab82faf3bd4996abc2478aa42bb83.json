{"ast":null,"code":"'use strict';\n\nvar detectSilence = require('../webaudio/detectsilence');\n\nvar N_ATTEMPTS = 3;\nvar ATTEMPT_DURATION_MS = 250;\n/**\n * Detect whether the audio stream rendered by the given HTMLVideoElement is silent.\n * @param {HTMLAudioElement} el\n * @returns {Promise<boolean>} true if silent, false if not.\n */\n\nfunction detectSilentAudio(el) {\n  // NOTE(mmalavalli): We have to delay require-ing AudioContextFactory, because\n  // it exports a default instance whose constructor calls Object.assign.\n  var AudioContextFactory = require('../webaudio/audiocontext');\n\n  var holder = {};\n  var audioContext = AudioContextFactory.getOrCreate(holder);\n  var attemptsLeft = N_ATTEMPTS;\n\n  function doCheckSilence() {\n    attemptsLeft--;\n    return detectSilence(audioContext, el.srcObject, ATTEMPT_DURATION_MS).then(function (isSilent) {\n      if (!isSilent) {\n        return false;\n      }\n\n      if (attemptsLeft > 0) {\n        return doCheckSilence();\n      }\n\n      return true;\n    }).catch(function () {\n      // NOTE(mmalavalli): If an error is thrown while detect silence, the audio\n      // stream is assumed to be silent.\n      return true;\n    });\n  } // Resolve the returned Promise with true if 3 consecutive attempts\n  // to detect silent audio are successful.\n\n\n  return doCheckSilence().finally(function () {\n    AudioContextFactory.release(holder);\n  });\n}\n\nmodule.exports = detectSilentAudio;","map":null,"metadata":{},"sourceType":"script"}