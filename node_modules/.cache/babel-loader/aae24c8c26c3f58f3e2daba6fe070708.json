{"ast":null,"code":"var _jsxFileName = \"/home/bibhu/EDRdevelopment/DevBranch/edresearchweb/src/allAppsStudent/Messages/VATChat/ChatWindow/ChatWindowTest.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport classes from \"./ChatWindow.module.css\";\nimport ChatUserInfoTopBar from \"./ChatUserInfoTopBar\";\nimport ChatScreen from \"./ChatScreen\";\nimport ChatInput from \"./ChatInput\";\nimport { w3cwebsocket as W3CWebSocket } from 'websocket';\nimport { Picker } from \"emoji-mart\";\nimport \"emoji-mart/css/emoji-mart.css\";\nimport Login from '../../../../CommonApps/Login';\nimport axiosInstance from '../../../../axios';\nimport { MdSend } from 'react-icons/md';\nimport { postchatcomment, getchatcomments } from '../../../../CommonApps/AllAPICalls';\nimport { client } from \"./WebSocket\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socketURL = 'ws://127.0.0.1:8000/ws/chat/class/';\n\nconst ChatWindow = props => {\n  _s();\n\n  console.log(\"chat window test\");\n  const [loggedIn, setLoggedIn] = useState(false);\n  useEffect(() => {\n    axiosInstance.get().then(res => {\n      setLoggedIn(loggedIn => true); // console.log(res.data);\n    });\n  }, []);\n  let roomname = 'class';\n  const mountedRef = useRef(true);\n  const textInput = useRef();\n\n  const clearInput = () => textInput.current.value = \"\";\n\n  const initialFormData = Object.freeze({\n    comment: \"\"\n  });\n  const [formData, updateFormData] = useState(initialFormData);\n\n  const handleChange = e => {\n    updateFormData({ ...formData,\n      [e.target.name]: e.target.value.trim()\n    });\n  };\n\n  const [state, setState] = useState({\n    messages: [],\n    value: ''\n  });\n  const [chatcomment, getChatcomment] = useState([{\n    \"groupId\": 1,\n    \"commenter\": 1,\n    \"commenttext\": \"sadsad\"\n  }]);\n  const [commentObj, setChatCommentObj] = useState([{}]);\n  useEffect(() => {\n    const groupId = props.clickedGroupId; //const clkId=props.clickedUserId;\n    //const loginUsedId = props.data.id;\n    //const groupMembers=[clkId,loginUsedId];\n    //const maxId = Math.max.apply(null, groupMembers);\n    //const minId = Math.min.apply(null, groupMembers);\n    //const groupname='a'+maxId+'a'+minId+'a';\n\n    getchatcomments({\n      setChatCommentObj,\n      groupId\n    });\n  }, [props.clickedGroupId, props.data.id]);\n\n  const handleSubmit = e => {\n    if (!loggedIn) {\n      return /*#__PURE__*/_jsxDEV(Login, {\n        setLoggedIn: setLoggedIn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 29\n      }, this);\n    }\n\n    if (typeof client !== 'undefined') {\n      if (client.readyState === client.CLOSED) {//console.log(\"websocket CLOSED\");\n        //window.location.reload();\t\n        // const client = new W3CWebSocket('ws://127.0.0.1:8000/ws/chat/class/');\t    \n        //return null;    \n      }\n\n      if (formData.comment !== '') {\n        client.send(JSON.stringify({\n          type: \"message\",\n          message: formData.comment\n        }));\n        const comment = formData.comment;\n        const userId = props.data.id;\n        const groupId = props.clickedGroupId;\n        postchatcomment({\n          groupId,\n          userId,\n          comment\n        });\n      }\n\n      clearInput();\n      state.value = '';\n      formData.comment = '';\n    }\n\n    e.preventDefault();\n  };\n\n  useEffect(() => {\n    console.log(\"rerendering message retrieve\");\n\n    client.onopen = () => {//console.log(\"web socket client connected\");\n    };\n\n    client.onmessage = message => {\n      const dataFromServer = JSON.parse(message.data); //console.log('got reply! ', dataFromServer.message);\n\n      if (dataFromServer !== \"\" && mountedRef.current) {\n        setState(state => ({\n          messages: [...state.messages, dataFromServer.message],\n          value: 'jai ganesh'\n        }));\n      }\n    };\n\n    return () => {\n      mountedRef.current = false;\n      client.close();\n    };\n  }, [props.clickedGroupId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.chatWindow,\n    children: [/*#__PURE__*/_jsxDEV(ChatUserInfoTopBar, {\n      clickedUserId: props.clickedUserId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(ChatScreen, {\n      messages: state.messages,\n      commentObj: commentObj\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.chatInput,\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        className: classes.addCommentForm,\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.chatInput,\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            ref: textInput,\n            type: \"text\",\n            onChange: handleChange,\n            name: \"comment\",\n            className: classes.inputTextBox,\n            placeholder: \"Write your comment\",\n            defaultValue: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 27\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: classes.submit_button,\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: [/*#__PURE__*/_jsxDEV(MdSend, {\n              className: classes.sendButtonIcon\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 80\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 77\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 18\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 6\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 225,\n    columnNumber: 1\n  }, this);\n};\n\n_s(ChatWindow, \"WfEhn9K5aD93LfqT8LcGKr+RXbk=\");\n\n_c = ChatWindow;\nexport default ChatWindow;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatWindow\");","map":{"version":3,"sources":["/home/bibhu/EDRdevelopment/DevBranch/edresearchweb/src/allAppsStudent/Messages/VATChat/ChatWindow/ChatWindowTest.js"],"names":["React","useState","useEffect","useRef","classes","ChatUserInfoTopBar","ChatScreen","ChatInput","w3cwebsocket","W3CWebSocket","Picker","Login","axiosInstance","MdSend","postchatcomment","getchatcomments","client","socketURL","ChatWindow","props","console","log","loggedIn","setLoggedIn","get","then","res","roomname","mountedRef","textInput","clearInput","current","value","initialFormData","Object","freeze","comment","formData","updateFormData","handleChange","e","target","name","trim","state","setState","messages","chatcomment","getChatcomment","commentObj","setChatCommentObj","groupId","clickedGroupId","data","id","handleSubmit","readyState","CLOSED","send","JSON","stringify","type","message","userId","preventDefault","onopen","onmessage","dataFromServer","parse","close","chatWindow","clickedUserId","chatInput","addCommentForm","inputTextBox","submit_button","sendButtonIcon"],"mappings":"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","sourcesContent":["import React,{useState,useEffect,useRef} from \"react\";\nimport classes from \"./ChatWindow.module.css\"\nimport ChatUserInfoTopBar from \"./ChatUserInfoTopBar\";\nimport ChatScreen from \"./ChatScreen\";\nimport ChatInput from \"./ChatInput\";\nimport {w3cwebsocket as W3CWebSocket } from 'websocket';\nimport { Picker } from \"emoji-mart\";\nimport \"emoji-mart/css/emoji-mart.css\";\nimport Login from '../../../../CommonApps/Login';\nimport axiosInstance from '../../../../axios';\nimport {MdSend} from 'react-icons/md';\nimport {postchatcomment,getchatcomments} from '../../../../CommonApps/AllAPICalls';\n\nimport {client} from \"./WebSocket\";\n\n\nconst socketURL= 'ws://127.0.0.1:8000/ws/chat/class/'\n\n\n\n\n\n\n\nconst ChatWindow = (props) =>{\n\n\n\n  console.log(\"chat window test\");\n\n\n  const [loggedIn, setLoggedIn] = useState(false);\n\n  useEffect( ()=>{\n  axiosInstance.get().then((res) => {\n                        setLoggedIn(loggedIn=>true);\n                       // console.log(res.data);\n                });\n             },[]);\n\n\n\n\n  let roomname='class'\n\n\n  const mountedRef = useRef(true);\n  const textInput = useRef();\n\n  const clearInput = () => (textInput.current.value = \"\");\t\n\n\n  const initialFormData = Object.freeze(\n\n     {\n         comment: \"\",\n     }\n  );\n\n\n\n  const [formData, updateFormData] = useState(initialFormData)\n\n  const handleChange = (e) => {\n                updateFormData({\n                        ...formData,\n                        [e.target.name]: e.target.value.trim(),\n                });\n        };\n\n\n\n\n \n  const [state, setState] = useState(\n\n    {\n       messages: [],\n       value: '',\n    }\n );\n\n\nconst [chatcomment, getChatcomment]= useState([{\n        \"groupId\": 1,\n        \"commenter\": 1,\n        \"commenttext\": \"sadsad\",\n    },])\n\n\n\n\n\n const [commentObj,setChatCommentObj]=useState([{}]);\n\n useEffect(()=>{\n  const groupId=props.clickedGroupId;\n\n  //const clkId=props.clickedUserId;\n  //const loginUsedId = props.data.id;\n  //const groupMembers=[clkId,loginUsedId];\n\n  //const maxId = Math.max.apply(null, groupMembers);\n  //const minId = Math.min.apply(null, groupMembers);\n\n  //const groupname='a'+maxId+'a'+minId+'a';\n\n\n\n\n\n\n\n  getchatcomments({setChatCommentObj, groupId});\n\n  },[props.clickedGroupId, props.data.id]);\n\n\n\n\n\n  \n\n\n  const handleSubmit = (e) => {\n\n\n     if (!loggedIn){ return <Login setLoggedIn={setLoggedIn}/>}\n\n    if (typeof client !== 'undefined') {\t  \n\n    if (client.readyState === client.CLOSED){\n       //console.log(\"websocket CLOSED\");\n       //window.location.reload();\t\n       // const client = new W3CWebSocket('ws://127.0.0.1:8000/ws/chat/class/');\t    \n       //return null;    \n    }\n\n\n\n    if(formData.comment !==''){\n      client.send(JSON.stringify({\n      type: \"message\",\n      message: formData.comment,\n    }))\n\n     const comment = formData.comment;\n     const userId = props.data.id;\n     \t    \n     const groupId=props.clickedGroupId;\t    \n\n     postchatcomment({groupId,userId,comment});\n\n\n\n       }\n\n\n    clearInput();\t  \n    state.value = '';\n    formData.comment='';\t    \n    \t \n    }\n\n    e.preventDefault();\n  }\n\n\n\n\n\n\nuseEffect(()=>{\n\n\nconsole.log(\"rerendering message retrieve\");\n\n    client.onopen=()=>{\n    //console.log(\"web socket client connected\");\n   };\n\n\n    client.onmessage = (message) => {\n    const dataFromServer = JSON.parse(message.data);\n    //console.log('got reply! ', dataFromServer.message);\n\n    if (dataFromServer !== \"\"  && mountedRef.current){\n  \n\n                     setState((state)=>({     \n                              messages: [...state.messages,dataFromServer.message],\n                              value: 'jai ganesh',\n                                        }));\n\n      \n\n                              }}\n\n    return () => { \n     mountedRef.current = false;\n     client.close();\t     \n    }\n\n\t         \n},[props.clickedGroupId]);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nreturn(\n\n<div className={classes.chatWindow}>\n\n<ChatUserInfoTopBar clickedUserId={props.clickedUserId} />\n\n<ChatScreen messages={state.messages}  commentObj={commentObj}/>\n\t\n<div className={classes.chatInput}>\n\n\n\n     {/*\n         {commentObj.map((comment,index)=>{\n\n\n               return <div  key={index}  >{comment.commenttext} </div>\n           }\n\n        )}\n\n    */}\n\n\n\n\n\n\n\n     <form className={classes.addCommentForm} onSubmit={handleSubmit}>\n\n\n                  <div className={classes.chatInput} >\n                          <input\n                             ref={textInput}\n                             type=\"text\"\n                             onChange={handleChange}\n                             name=\"comment\"\n                             className={classes.inputTextBox}\n                             placeholder=\"Write your comment\"\n                             defaultValue=\"\"\n                          />\n                  </div>\n\n                 \n                 <button type=\"submit\"  className= {classes.submit_button} ><b><MdSend className={classes.sendButtonIcon}/> </b> </button>\n                  \n\t</form>\n\n\t{/*\n   <Picker onSelect={addEmoji} />\n        */}\n\n</div>\n\n\n\n\t\n</div>\n\n);\n\n}\n\nexport default ChatWindow;\n"]},"metadata":{},"sourceType":"module"}