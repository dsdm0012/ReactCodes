{"ast":null,"code":"var _jsxFileName = \"/home/bibhu/EDRdevelopment/DevBranch/edresearchweb/src/MainApps/Messages/VATChat/ChatWindow/ChatWindowTest.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport classes from \"./ChatWindow.module.css\";\nimport ChatUserInfoTopBar from \"./ChatUserInfoTopBar\";\nimport ChatScreen from \"./ChatScreen\"; //import ChatInput from \"./ChatInput\";\n\nimport { w3cwebsocket as W3CWebSocket } from 'websocket'; //import { Picker } from \"emoji-mart\";\n\nimport \"emoji-mart/css/emoji-mart.css\"; //import Login from '../../../../CommonApps/Login';\n//import axiosInstance from '../../../../axios';\n\nimport { MdSend } from 'react-icons/md';\nimport { postchatcomment, getchatcomments } from '../../../../CommonApps/AllAPICalls';\nimport { ImAttachment } from 'react-icons/im';\nimport { BsEmojiSmile } from 'react-icons/bs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Connect() {\n  let client;\n  let messageListeners = [];\n  let isConnected = false;\n  let componentMounted = false; //let reconnectOnClose = true;\n\n  let stateChangeListeners = [];\n\n  function mountInfo(value) {\n    componentMounted = value;\n  }\n\n  function on(fn) {\n    messageListeners.push(fn);\n  }\n\n  function off(fn) {\n    messageListeners = messageListeners.filter(l => l !== fn);\n  }\n\n  function onStateChange(fn) {\n    stateChangeListeners.push(fn);\n    return () => {\n      stateChangeListeners = stateChangeListeners.filter(l => l !== fn);\n    };\n  }\n\n  function start() {\n    if (window.location.host === 'localhost:3000') {\n      client = new W3CWebSocket('ws://127.0.0.1:8000/ws/chat/class/');\n    }\n\n    if (window.location.host === '127.0.0.1:8000') {\n      client = new W3CWebSocket('ws://127.0.0.1:8000/ws/chat/class/');\n    }\n\n    if (window.location.host === 'webapp.diracai.com') {\n      client = new W3CWebSocket('wss://webapp.diracai.com:8001/ws/chat/class/');\n    }\n\n    if (window.location.host === 'app.diracai.com') {\n      client = new W3CWebSocket('wss://app.diracai.com:8001/ws/chat/class/');\n    } //client = new W3CWebSocket('wss://edresearch.co.in:8001/ws/chat/class/');\n    //const close = client.close;\n    //client.close = () => {\n    //   reconnectOnClose = false;\n    //  close.call(client);\n    //}\n    // if(client.readyState === client.CLOSED ){\n    //   setTimeout(start, 5000);\n    //}\n\n\n    client.onclose = () => {\n      isConnected = false;\n      stateChangeListeners.forEach(fn => fn(false));\n\n      if (componentMounted) {\n        setTimeout(start, 5000);\n      }\n    };\n\n    client.onopen = () => {\n      isConnected = true;\n      stateChangeListeners.forEach(fn => fn(true));\n    };\n\n    client.onmessage = event => {\n      const dataFromServer = JSON.parse(event.data);\n      messageListeners.forEach(fn => fn(dataFromServer.message));\n    };\n  }\n\n  start();\n  return {\n    on,\n    off,\n    onStateChange,\n    mountInfo,\n    componentMounted: () => componentMounted,\n    getClient: () => client,\n    isConnected: () => isConnected,\n    close: () => client.close()\n  };\n}\n\n_c = Connect;\nconst client = Connect();\n\nfunction useMessages() {\n  _s();\n\n  const [messages, setMessages] = useState(['']);\n  useEffect(() => {\n    function handleMessage(message) {\n      setMessages([...messages, message]);\n    }\n\n    client.on(handleMessage);\n    return () => client.off(handleMessage);\n  }, [messages, setMessages]);\n  return messages;\n}\n\n_s(useMessages, \"r89NeTPJIQ79kkdpfOCrTLYulmw=\");\n\nconst ChatWindow = props => {\n  _s2();\n\n  //let clickedUserId=props.group.groupuserObjects[0].id !== props.userData.id? props.group.groupuserObjects[0] : props.group.groupuserObjects[1];\n  const mountedRef = useRef(true);\n  let value = true;\n  client.mountInfo(value); //this is commented out on April 5th 2022. Check if hat function works\n  //const [isConnected, setIsConnected] = useState(client.isConnected());\n\n  let isConnected = client.isConnected();\n  console.log('isConnected: ', isConnected);\n  const [commentObj, setChatCommentObj] = useState(null);\n  const [message, setMessage] = useState('');\n  const messages = useMessages();\n  let lastMessage = messages.at(-1).split(\" \");\n  const commentGroupId = Number(lastMessage[lastMessage.length - 1]); //const commentUserId = Number(lastMessage[lastMessage.length - 2]);\n\n  const clickedGroupIdT = props.clickedGroupId;\n  const [localMessageSize, setlocalMessageSize] = useState(0);\n  let displayMessage = [];\n\n  if (commentGroupId === clickedGroupIdT) {\n    displayMessage = messages;\n  }\n\n  const handleChange = e => {\n    setMessage(msg => e.target.value);\n  };\n\n  useEffect(() => {\n    //if(!isConnected && mountedRef.current ){\n    //\t   window.location.reload(false);  \n    // }\n    //console.log('connection status changed:', isConnected)\n    return () => {\n      mountedRef.current = false;\n      client.mountInfo(false); // client.close();\n    };\n  }, [isConnected]); // useEffect(() => {\n  //     return client.onStateChange(setIsConnected);\n  // }, [setIsConnected]);\n\n  useEffect(() => {\n    const groupId = props.clickedGroupId;\n    getchatcomments({\n      setChatCommentObj,\n      groupId\n    });\n  }, [props.clickedGroupId, props.userData.id]);\n\n  function sendMessage(e) {\n    e.preventDefault();\n\n    if (message !== \"\") {\n      client.getClient().send(JSON.stringify({\n        type: \"message\",\n        message: message + \" \" + props.userData.id + \" \" + props.clickedGroupId\n      }));\n      const comment = message;\n      const userId = props.userData.id;\n      const groupId = props.clickedGroupId;\n      postchatcomment({\n        groupId,\n        userId,\n        comment\n      });\n    }\n\n    setMessage('');\n  }\n\n  console.log(\"displayMessage.length: \", displayMessage.length);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.chatWindow,\n    children: [clickedGroupIdT === Number(0) && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.noGroupSelectDiv,\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"Please select a chat to continue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 80\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 37\n    }, this), clickedGroupIdT !== Number(0) && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ChatUserInfoTopBar, {\n        clickedUserId: props.clickedUserId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(ChatScreen, {\n        messages: displayMessage,\n        commentObj: commentObj !== null ? commentObj.results : [],\n        currentUser: props.userData.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.chatInput,\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          className: classes.addCommentForm,\n          onSubmit: sendMessage,\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: classes.uploadButton,\n            children: [\" \", /*#__PURE__*/_jsxDEV(BsEmojiSmile, {\n              className: classes.uploadIcon\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 305,\n              columnNumber: 68\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 12\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: classes.uploadButton,\n            children: [\" \", /*#__PURE__*/_jsxDEV(ImAttachment, {\n              className: classes.uploadIcon\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 307,\n              columnNumber: 75\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.chatInput,\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              className: classes.inputTextBox,\n              value: message,\n              onChange: handleChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 311,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: classes.submit_button,\n            children: [/*#__PURE__*/_jsxDEV(\"b\", {\n              children: [/*#__PURE__*/_jsxDEV(MdSend, {\n                className: classes.sendButtonIcon\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 317,\n                columnNumber: 80\n              }, this), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 317,\n              columnNumber: 77\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 18\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 284,\n    columnNumber: 1\n  }, this);\n};\n\n_s2(ChatWindow, \"Ht5ZfWnkSoSmmM+N42o5PVarvu0=\", false, function () {\n  return [useMessages];\n});\n\n_c2 = ChatWindow;\nexport default ChatWindow;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Connect\");\n$RefreshReg$(_c2, \"ChatWindow\");","map":{"version":3,"sources":["/home/bibhu/EDRdevelopment/DevBranch/edresearchweb/src/MainApps/Messages/VATChat/ChatWindow/ChatWindowTest.js"],"names":["React","useState","useEffect","useRef","classes","ChatUserInfoTopBar","ChatScreen","w3cwebsocket","W3CWebSocket","MdSend","postchatcomment","getchatcomments","ImAttachment","BsEmojiSmile","Connect","client","messageListeners","isConnected","componentMounted","stateChangeListeners","mountInfo","value","on","fn","push","off","filter","l","onStateChange","start","window","location","host","onclose","forEach","setTimeout","onopen","onmessage","event","dataFromServer","JSON","parse","data","message","getClient","close","useMessages","messages","setMessages","handleMessage","ChatWindow","props","mountedRef","console","log","commentObj","setChatCommentObj","setMessage","lastMessage","at","split","commentGroupId","Number","length","clickedGroupIdT","clickedGroupId","localMessageSize","setlocalMessageSize","displayMessage","handleChange","e","msg","target","current","groupId","userData","id","sendMessage","preventDefault","send","stringify","type","comment","userId","chatWindow","noGroupSelectDiv","clickedUserId","results","chatInput","addCommentForm","uploadButton","uploadIcon","inputTextBox","submit_button","sendButtonIcon"],"mappings":"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","sourcesContent":["import React,{useState,useEffect,useRef} from \"react\";\nimport classes from \"./ChatWindow.module.css\"\nimport ChatUserInfoTopBar from \"./ChatUserInfoTopBar\";\nimport ChatScreen from \"./ChatScreen\";\n//import ChatInput from \"./ChatInput\";\nimport {w3cwebsocket as W3CWebSocket } from 'websocket';\n//import { Picker } from \"emoji-mart\";\nimport \"emoji-mart/css/emoji-mart.css\";\n//import Login from '../../../../CommonApps/Login';\n//import axiosInstance from '../../../../axios';\nimport {MdSend} from 'react-icons/md';\nimport {postchatcomment,getchatcomments} from '../../../../CommonApps/AllAPICalls';\nimport {ImAttachment} from 'react-icons/im';\nimport {BsEmojiSmile} from 'react-icons/bs';\n\n\nfunction Connect (){\n\nlet client;\nlet messageListeners = [];\nlet isConnected = false;\nlet componentMounted = false;\n\n//let reconnectOnClose = true;\nlet stateChangeListeners = [];\n\n\nfunction mountInfo(value){\n\n  componentMounted = value;\n}\n\n\n\nfunction on(fn) {\n    messageListeners.push(fn);\n  }\n\n function off(fn) {\n    messageListeners = messageListeners.filter(l => l !== fn);\n  }\n\nfunction onStateChange(fn) {\n    stateChangeListeners.push(fn);\n    return () => {\n      stateChangeListeners = stateChangeListeners.filter(l => l !== fn);\n    };\n  }\n\n\n\n\n\n\n\n\nfunction start () {\n \n\n   \n    if (window.location.host === 'localhost:3000'){\t\n        client = new W3CWebSocket('ws://127.0.0.1:8000/ws/chat/class/');\n      }\n\n   if (window.location.host === '127.0.0.1:8000'){ \n       client = new W3CWebSocket('ws://127.0.0.1:8000/ws/chat/class/');\n      }\n\n \n   if (window.location.host === 'webapp.diracai.com'){ \n       client = new W3CWebSocket('wss://webapp.diracai.com:8001/ws/chat/class/');\n     }\n\n   if (window.location.host === 'app.diracai.com'){ \n       client = new W3CWebSocket('wss://app.diracai.com:8001/ws/chat/class/');\n     }\n\n\n\n   \n\n   //client = new W3CWebSocket('wss://edresearch.co.in:8001/ws/chat/class/');\n\n\n\n    //const close = client.close;\n\n    //client.close = () => {\n    //   reconnectOnClose = false;\n    //  close.call(client);\n    //}\n\n   // if(client.readyState === client.CLOSED ){\n   //   setTimeout(start, 5000);\n    //}\n\n\n\n\n\n   client.onclose = () => {\n     isConnected=false;\n     stateChangeListeners.forEach(fn => fn(false));\t   \n     if(componentMounted){\t   \n       setTimeout(start, 5000);\n     }\n   }\n\n   client.onopen=()=>{\n     isConnected=true;\n     stateChangeListeners.forEach(fn => fn(true));\t   \n   }\n\n   client.onmessage = (event)=>{\n    const dataFromServer = JSON.parse(event.data);\t\n    messageListeners.forEach(fn => fn(dataFromServer.message));\n   }\n\n\n}\n\nstart();\n\n\n\n\n\n\n\nreturn {\n    on,\n    off,\n    onStateChange,\n    mountInfo,\n    componentMounted: ()=>componentMounted,\t\n    getClient: () => client,\n    isConnected: () => isConnected,\n    close: () => client.close(),\n   }\n}\n\nconst client = Connect();\n\n\n\nfunction useMessages() {\n  const [messages, setMessages] = useState(['']);\n\n  useEffect(() => {\n    function handleMessage(message) {\n      setMessages([...messages, message]);\n    }\n      client.on(handleMessage);\n     return () => client.off(handleMessage);\n  }, [messages, setMessages]);\n\n  return messages;\n}\n\n\n\n\n\n\n\nconst ChatWindow = (props) =>{\n\n\n\n  //let clickedUserId=props.group.groupuserObjects[0].id !== props.userData.id? props.group.groupuserObjects[0] : props.group.groupuserObjects[1];\n\n   const mountedRef = useRef(true);\n   let value=true;\n   client.mountInfo(value);\n    //this is commented out on April 5th 2022. Check if hat function works\n   //const [isConnected, setIsConnected] = useState(client.isConnected());\n  \n\n   let isConnected = client.isConnected();\n\n   console.log('isConnected: ', isConnected);\t\n\n\n\n   const [commentObj,setChatCommentObj]=useState(null);\n\n   const [message, setMessage] = useState('');\n   \n\n   const messages = useMessages();  \n\n   let lastMessage = messages.at(-1).split(\" \");\t\n\n   const commentGroupId = Number(lastMessage[lastMessage.length - 1]);\t\n\n   //const commentUserId = Number(lastMessage[lastMessage.length - 2]);\n\n   \t\n\n   const clickedGroupIdT= props.clickedGroupId;\n\n\n   const [localMessageSize, setlocalMessageSize]= useState(0);\n\n\n   let displayMessage=[];\n  \n   if ( commentGroupId === clickedGroupIdT){\n      \n      displayMessage=messages;\t  \n\n     }\t\n\n   const handleChange = (e) => {\n      setMessage(msg=>e.target.value);\n\n\n   };\n\n   useEffect(()=>{\n     \n\n      //if(!isConnected && mountedRef.current ){\n      //\t   window.location.reload(false);  \n      // }\n\n      //console.log('connection status changed:', isConnected)\n\n      return ()=>{\n         mountedRef.current = false;\n\t client.mountInfo(false);    \n        // client.close();\n       }\n     },[isConnected]);\n\n\n    // useEffect(() => {\n    //     return client.onStateChange(setIsConnected);\n    // }, [setIsConnected]);\n\n\n   useEffect(()=>{\n   const groupId=props.clickedGroupId;\n\n     getchatcomments({setChatCommentObj, groupId});\n\n   },[props.clickedGroupId, props.userData.id]);\n\n\n\n\n   function sendMessage(e) {\n    e.preventDefault();\n    if(message !== \"\"){\t   \n    client.getClient().send(JSON.stringify({\n      type: \"message\",\n      message: message+\" \"+props.userData.id+\" \"+props.clickedGroupId,\n    }))\n\n     const comment = message;\n     const userId = props.userData.id;\n\n     const groupId=props.clickedGroupId;\n     postchatcomment({groupId,userId,comment});\n\n    }\n    \t    \n    setMessage('');\n   }\n\n\n   console.log(\"displayMessage.length: \", displayMessage.length);\n\n\n\n\n\n\nreturn(\n\n\n\n\n<div className={classes.chatWindow}>\n\n\n\n  {clickedGroupIdT === Number(0) && <div className={classes.noGroupSelectDiv}> <b>Please select a chat to continue</b> </div>}\n\n\n\n { clickedGroupIdT !== Number(0) &&  <>\n\n      <ChatUserInfoTopBar clickedUserId={props.clickedUserId} />\n\n      <ChatScreen messages={displayMessage}  commentObj={commentObj !==null ? commentObj.results: []} currentUser={props.userData.id}/>\n\t\n     <div className={classes.chatInput}>\n\n\n\n\n        <form className={classes.addCommentForm} onSubmit={sendMessage}>\n\t\t  \n\t          <button type=\"button\" className={classes.uploadButton}> <BsEmojiSmile className={classes.uploadIcon}/></button>\n\n                  <button type=\"button\" className={classes.uploadButton}> <ImAttachment className={classes.uploadIcon}/></button>\n\n                  <div className={classes.chatInput} >\n\n                      <input className={classes.inputTextBox} value={message} onChange={handleChange} />\n\n\n                  </div>\n\n                 \n                 <button type=\"submit\"  className= {classes.submit_button} ><b><MdSend className={classes.sendButtonIcon}/> </b> </button>\n                  \n       </form>\n\n\n</div>\n\n</>\n\n }\n\t\n</div>\n\n\n \n\n\n);\n\n}\n\nexport default ChatWindow;\n"]},"metadata":{},"sourceType":"module"}