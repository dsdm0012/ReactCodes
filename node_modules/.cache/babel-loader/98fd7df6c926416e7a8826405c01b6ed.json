{"ast":null,"code":"var _jsxFileName = \"/home/bibhu/EDRdevelopment/DevBranch/edresearchweb/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Route, Switch } from 'react-router-dom'; //import logo from './logo.svg';\n\nimport './App.css';\nimport Header from './components/Header/Header'; //import HeaderNew from './components/Header/HeaderV2';\n\nimport SideNavBar from './components/SideNavBar/SideNavBar';\nimport SideToolBar from './components/SideNavBar/SideToolBar';\nimport SideBarDashboard from './components/SideNavBar/SideBarDashboard';\nimport UserProfile from './MainApps/Account/UserProfile/UserProfile';\nimport Settings from './MainApps/Account/Settings/Settings'; //import Courses from './MainApps/Account/Courses/Courses';\n//Import Applications\n\nimport General from './MainApps/Dashboard/General/General';\nimport Summary from './MainApps/Summary/Summary'; //import News from './MainApps/Dashboard/News/News';\n\nimport Syllabus from './MainApps/Syllabus/Syllabus';\nimport VATChat from './MainApps/Chat/VATChat';\nimport EMail from './MainApps/EMail/EMail';\nimport Tickets from './MainApps/Discussion/Tickets';\nimport ClassOverview from './MainApps/Classes/Overview';\nimport Detail from './MainApps/Classes/Detail/Detail';\nimport Specifics from './MainApps/Classes/Specifics/Specifics';\nimport FindBook from './MainApps/Books/Books';\nimport Read from './MainApps/Books/Read/Read';\nimport Insights from './MainApps/Books/Insights/Insights';\nimport AssignmentHome from './MainApps/Assignments/Assignments.js';\nimport ExamsInCourse from './MainApps/Exam/Exams';\nimport MeetingsOverview from './MainApps/Meetings/Overview';\nimport MeetingsDetail from './MainApps/Meetings/Detail/Detail';\nimport Students from './MainApps/Students/Students';\nimport { w3cwebsocket as W3CWebSocket } from 'websocket';\nimport { useMediaPredicate } from \"react-media-hook\"; //import CentralSocketConnection from './CentralSocketConnection';\n\nimport { getcoursesbyCourseId, getuser, getcoursesbyCourseIdArray } from './CommonApps/AllAPICalls';\n/*\nfunction Connect (){\n\n   let client;\n   let isConnected;\t\n\n   function start () {\n    \n       client = new W3CWebSocket('wss://td7ru13iq4.execute-api.ca-central-1.amazonaws.com/production');\n\n       client.onclose = () => {\n         isConnected=false;\n\t console.log(\"webSocket gets disconnected\");      \n         setTimeout(start, 3000);\n       }\n\n       client.onopen=()=>{\n         isConnected=true;\n\t console.log(\"webSocket gets connected\");      \n       }\n\n\n     client.onmessage = (event)=>{\n     const dataFromServer = JSON.parse(event.data);\n     console.log(\"Message receved-3\", event.data);\n   }\n\n\n\n\n\n\n   }\n\n   start();\n\n   return {\n       getClient: () => client,\n   }\n}\n\nconst wcInstance = Connect().getClient();\n\n\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  /* \n  console.log(\" Main App Page reredering-----------------\");\n  const [wcConnected, setWCConnected]= useState(false);\n  let wcInstance;\n   \n  // wcInstance.onmessage = (event)=>{\n  //  const dataFromServer = JSON.parse(event.data);\n  //  console.log(\"Message receved-3\", event.data);\n  //}\n  let sideBarBreakPoint='850px';\n       \n   const smallerThan750px = useMediaPredicate(\"(max-width: 850px )\");\n     const [rerender,setRerender] = useState(false);\n    const rerenderHandler=()=>{setRerender(!rerender);}\n  \n   const [sideNavBarWidth, setWidth] = useState('var(--sideNavBarWidth)');\n    const [contract,setContract] = useState(true);\n    const expandHandler=()=>{\n        //console.log(\"expand handler called\");\n       contract && setWidth('var(--sideNavBarWidthOnContract)');\n       !contract && setWidth('var(--sideNavBarWidth)');\n       setContract(!contract);\n    }\n  \n    const [dashboardMounted, setDashboardMounted] = useState(false);\n  const [courseMounted, setCourseMounted] = useState(false);\t\n  const [messagesMounted, setMessagesMounted] = useState(false);\n  const [emailMounted, setEmailMounted] = useState(false);\n   const [discussionMounted, setDiscussionMounted] = useState(false);\t\n  const [classMounted, setClassMounted] = useState(false);\n  const [tasksMounted, setTasksMounted] = useState(false);\t\n  const [booksMounted, setBooksMounted] = useState(false);\n  //const [examMounted, setExamMounted] = useState(false);\t\n  const [classmatesMounted, setClassmatesMounted] = useState(false);\n  //const [teacherMounted, setTeacherMounted] = useState(false);\n  //const [prepareMounted, setProgressMounted] = useState(false);\n  //const [analyticsMounted, setAnalticsMounted] = useState(false);\t\n  const [achievementsMounted, setAchievementsMounted] = useState(false);                \n  //const [goalsMounted, setGoalsMounted] = useState(false);\n  //const [calenderMounted, setCalenderMounted] = useState(false);\n  //const [diaryMounted, setDiaryMounted] = useState(false);\n  //const [helpcenterMounted, setHelpCenterMounted] = useState(false);\n   const [generalChatMounted, setGeneralChatMounted] = useState(false);\n   const [selectedCourse, getCourseData] = useState(null);\n  //const [courseData, getCourseData] = useState([]);\n   let selectedCourseId = localStorage.getItem('preferredCourseId')\n    \t\n   useEffect(()=>{\n     //console.log(\"useEffect-1\");\t   \n     let courseId=selectedCourseId;\n    \t   \n     getcoursesbyCourseId({courseId,getCourseData});\n     return ()=>{\n        getCourseData(selectedCourse=>null);\n     }\n   },[selectedCourseId,rerender ]);\n   \n   \n  \n    const [userData,setData]=useState({\n  \"id\": null,\t   \n  \"dashboardcourses\": [],\n  \"dashboard_courses\":[],\t   \n  \"usertype\":1,\n  \"noticeids\":[]\t   \n  });\n     \t\n  useEffect(()=>{\n  //console.log(\"useEffect-2\");   \n       getuser({setData});\n   },[rerender])\n  \n   useEffect(()=>{\n   smallerThan750px && setWidth('var(--sideNavBarWidthOnContract)');\t  \n  smallerThan750px && setContract(false);\n  !smallerThan750px && setWidth('var(--sideNavBarWidth)');\t   \n  !smallerThan750px && setContract(true);\n    },[smallerThan750px]);\n  \n  \n    const [dashboardCourses, getDashboardCourses] = useState(userData.id !==null? userData.dashboard_courses: []);\n    //console.log(\"dashboard courses: \", dashboardCourses);\n   */\n  {\n    /*\n    return (\n     <div className=\"edrapp\">\n       \n      \n     <Header onPress={expandHandler}  selectedCourse={selectedCourse} userData={userData} dashboardCourses={dashboardCourses}/> \n        <SideToolBar toolBarWidth={sideNavBarWidth}/>\n     \n     { selectedCourseId !==null &&  <>\n     <SideToolBar toolBarWidth={sideNavBarWidth}/>\n       \n     <SideNavBar sideNavBarWidth={sideNavBarWidth} \n    dashboardMounted={dashboardMounted} \n    courseMounted = {courseMounted}   \n    messagesMounted={messagesMounted}\n         discussionMounted={discussionMounted} \n         classMounted = {classMounted} \n         tasksMounted = {tasksMounted} \n         booksMounted = {booksMounted} \n         examMounted = {false} \n         classmatesMounted = {classmatesMounted}\n         teacherMounted = {false}\n         prepareMounted = {false}\n         analyticsMounted ={false}\n         achievementsMounted = {achievementsMounted}\n         goalsMounted = {false} \n         calenderMounted = {false}\n         diaryMounted = {false}\n         helpcenterMounted = {false}\n    rerender={rerenderHandler}   \n    userData={userData}   \n       />\n      </>\n       }\n     \n     { selectedCourseId ===null &&\n      <> \n        <SideBarDashboard sideNavBarWidth={sideNavBarWidth}\n                generalChatMounted={generalChatMounted}\n                homeMounted={dashboardMounted}\n                emailMounted={emailMounted}\n                userData={userData}\n                setWidth={setWidth}\n                setContract={setContract}\n                \n       />\n       </>\t\t    \n     }\n    \n     \n     <Switch>\n           \t\n       <Route exact path='/account/userprofile' >\n       <UserProfile sideNavBarWidth={sideNavBarWidth} \n    selectedCourse={selectedCourse}\n    userData={userData}\n    rerender={rerenderHandler}\n    />\n       </Route>\n        <Route exact path='/account/settings' >\n         <Settings sideNavBarWidth={sideNavBarWidth} \n    selectedCourse={selectedCourse}\n    userData={userData}\n    />\n       </Route>\n          <Route  path='/dashboard/general' >\n         <General sideNavBarWidth={sideNavBarWidth} \n      passMountInfo={setDashboardMounted} \n      selectedCourse={selectedCourse} \n      dashboardCourses={userData.dashboard_courses}\n      userData={userData}\n      socketObj={wcInstance}\n      rerender = {rerenderHandler}\n    />\n       </Route>\n        <Route path='/course/summary' >\n         <Summary \n      sideNavBarWidth={sideNavBarWidth} \n      passMountInfo={setCourseMounted}  \n      selectedCourse={selectedCourse}\n             userData={userData}\t    \n    />\n       </Route>\n         <Route exact path='/course/syllabus' >\n         <Syllabus\n             sideNavBarWidth={sideNavBarWidth}\n             passMountInfo={setCourseMounted}\n             selectedCourse={selectedCourse}\n             userData={userData}\n         />\n       </Route>\n          <Route exact path='/dashboard/generalchat' >\n         <VATChat sideNavBarWidth={sideNavBarWidth}\n            passMountInfo={setGeneralChatMounted}\n            selectedCourse={selectedCourse}\n            userData={userData}\n         />\n       </Route>\n     \n       <Route exact path='/messages/chat' >\n         <VATChat sideNavBarWidth={sideNavBarWidth} \n     passMountInfo={setMessagesMounted}  \n     selectedCourse={selectedCourse}\n     userData={userData}\n    />\n       </Route>\n         \n        <Route exact path='/home/email' >\n         <EMail sideNavBarWidth={sideNavBarWidth} \n      passMountInfo={setEmailMounted}  \n      selectedCourse={selectedCourse}\n      userData={userData}\n    />\n       </Route>\n        \n        <Route exact path='/messages/tickets' >\n         <Tickets sideNavBarWidth={sideNavBarWidth} \n      passMountInfo={setDiscussionMounted}  \n      selectedCourse={selectedCourse}\n      userData={userData}\n    />\n       </Route>\n    \n       <Route exact path='/class/overview' >\n         <ClassOverview sideNavBarWidth={sideNavBarWidth} \n            passMountInfo={setClassMounted}  \n            selectedCourse={selectedCourse}\n                   userData={userData}\n            dashboardCourses={dashboardCourses}\n            onPress={rerenderHandler}\n    />\n       </Route>\n        <Route exact path='/class/detail' >\n           <Detail sideNavBarWidth={sideNavBarWidth} \n        passMountInfo={setClassMounted}  \n        selectedCourse={selectedCourse}\n        userData={userData}\n    />\n       </Route>\n        <Route exact path='/class/specifics' >\n         <Specifics sideNavBarWidth={sideNavBarWidth} \n      passMountInfo={setClassMounted}  \n      selectedCourse={selectedCourse}\n    />\n       </Route>\n       \n     \n         <Route exact path='/assignment/home' >\n         <AssignmentHome sideNavBarWidth={sideNavBarWidth}\n                   passMountInfo={setTasksMounted}\n                   selectedCourse={selectedCourse}\n                   userData={userData}\n                   dashboardCourses={dashboardCourses}\n                   onPress={rerenderHandler}\n           />\n         </Route>\n            <Route exact path='/books/findbook' >\n         <FindBook sideNavBarWidth={sideNavBarWidth}\n                   passMountInfo={setBooksMounted}\n                   selectedCourse={selectedCourse}\n                   userData={userData}\n                   dashboardCourses={dashboardCourses}\n                   onPress={rerenderHandler}\n           />\n         </Route>\n         \n         <Route exact path='/books/read' >\n           <Read sideNavBarWidth={sideNavBarWidth}\n               passMountInfo={setBooksMounted}\n               selectedCourse={selectedCourse}\n               userData={userData}\n           />\n         </Route>\n          <Route exact path='/books/insights' >\n           <Insights sideNavBarWidth={sideNavBarWidth} \n             passMountInfo={setBooksMounted}  \n             selectedCourse={selectedCourse}\n           />\n          </Route>\n          \n     \n           <Route exact path='/students/all' >\n           <Students sideNavBarWidth={sideNavBarWidth}\n               passMountInfo={setClassmatesMounted}\n               selectedCourse={selectedCourse}\n               userData={userData}\n           />\n         </Route>\n    \n          <Route path='/course/exams'>\n            <ExamsInCourse\n                  sideNavBarWidth={sideNavBarWidth}\n                   passMountInfo={setTasksMounted}\n                   selectedCourse={selectedCourse}\n                   userData={userData}\n                   dashboardCourses={dashboardCourses}\n                   onPress={rerenderHandler}\n           />\n           </Route>\n    \n    \n    \n       \n       <Route exact path='/meetings/overview' >\n         <MeetingsOverview sideNavBarWidth={sideNavBarWidth}\n                   passMountInfo={setAchievementsMounted}\n                   selectedCourse={selectedCourse}\n                   userData={userData}\n                   dashboardCourses={dashboardCourses}\n                   onPress={rerenderHandler}\n           />\n       </Route>\n          \t  \n       <Route exact path='/meetings/detail' >\n           <MeetingsDetail sideNavBarWidth={sideNavBarWidth}\n               passMountInfo={setAchievementsMounted}\n               selectedCourse={selectedCourse}\n               userData={userData}\n           />\n       </Route>\n       \n       </Switch>\t  \n       \n     \n     </div>\n    );\n    */\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \" \"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 516,\n    columnNumber: 9\n  }, this);\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Route","Switch","Header","SideNavBar","SideToolBar","SideBarDashboard","UserProfile","Settings","General","Summary","Syllabus","VATChat","EMail","Tickets","ClassOverview","Detail","Specifics","FindBook","Read","Insights","AssignmentHome","ExamsInCourse","MeetingsOverview","MeetingsDetail","Students","w3cwebsocket","W3CWebSocket","useMediaPredicate","getcoursesbyCourseId","getuser","getcoursesbyCourseIdArray","App"],"sources":["/home/bibhu/EDRdevelopment/DevBranch/edresearchweb/src/App.js"],"sourcesContent":["import React,{useState,useEffect} from 'react';\nimport {Route,Switch} from 'react-router-dom';\n//import logo from './logo.svg';\n\nimport  './App.css';\nimport Header from './components/Header/Header';\n\n//import HeaderNew from './components/Header/HeaderV2';\n\nimport SideNavBar from './components/SideNavBar/SideNavBar';\nimport SideToolBar from './components/SideNavBar/SideToolBar';\nimport SideBarDashboard from './components/SideNavBar/SideBarDashboard';\n\nimport UserProfile from './MainApps/Account/UserProfile/UserProfile';\nimport Settings from './MainApps/Account/Settings/Settings';\n//import Courses from './MainApps/Account/Courses/Courses';\n\n//Import Applications\nimport General from './MainApps/Dashboard/General/General';\nimport Summary from './MainApps/Summary/Summary';\n//import News from './MainApps/Dashboard/News/News';\nimport Syllabus from './MainApps/Syllabus/Syllabus';\n\nimport VATChat from './MainApps/Chat/VATChat';\nimport EMail from './MainApps/EMail/EMail';\nimport Tickets from './MainApps/Discussion/Tickets';\n\nimport ClassOverview from './MainApps/Classes/Overview';\nimport Detail from './MainApps/Classes/Detail/Detail';\nimport Specifics from './MainApps/Classes/Specifics/Specifics';\n\nimport FindBook from './MainApps/Books/Books';\nimport Read from './MainApps/Books/Read/Read';\nimport Insights from './MainApps/Books/Insights/Insights';\n\nimport AssignmentHome from './MainApps/Assignments/Assignments.js';\n\n\nimport ExamsInCourse from './MainApps/Exam/Exams';\n\n\nimport MeetingsOverview from './MainApps/Meetings/Overview';\nimport MeetingsDetail from './MainApps/Meetings/Detail/Detail';\n\nimport Students from './MainApps/Students/Students';\nimport {w3cwebsocket as W3CWebSocket } from 'websocket';\n\nimport { useMediaPredicate } from \"react-media-hook\";\n\n\n\n//import CentralSocketConnection from './CentralSocketConnection';\nimport {getcoursesbyCourseId, getuser, getcoursesbyCourseIdArray} from './CommonApps/AllAPICalls';\n\n/*\nfunction Connect (){\n\n   let client;\n   let isConnected;\t\n\n   function start () {\n    \n       client = new W3CWebSocket('wss://td7ru13iq4.execute-api.ca-central-1.amazonaws.com/production');\n\n       client.onclose = () => {\n         isConnected=false;\n\t console.log(\"webSocket gets disconnected\");      \n         setTimeout(start, 3000);\n       }\n\n       client.onopen=()=>{\n         isConnected=true;\n\t console.log(\"webSocket gets connected\");      \n       }\n\n\n     client.onmessage = (event)=>{\n     const dataFromServer = JSON.parse(event.data);\n     console.log(\"Message receved-3\", event.data);\n   }\n\n\n\n\n\n\n   }\n\n   start();\n\n   return {\n       getClient: () => client,\n   }\n}\n\nconst wcInstance = Connect().getClient();\n\n\n*/\n\n\n\n\n\n\nfunction App() {\n\n   /* \n   console.log(\" Main App Page reredering-----------------\");\n   const [wcConnected, setWCConnected]= useState(false);\n   let wcInstance;\n    \n   // wcInstance.onmessage = (event)=>{\n   //  const dataFromServer = JSON.parse(event.data);\n   //  console.log(\"Message receved-3\", event.data);\n   //}\n   let sideBarBreakPoint='850px';\n        \n    const smallerThan750px = useMediaPredicate(\"(max-width: 850px )\");\n\n\n    const [rerender,setRerender] = useState(false);\n\n    const rerenderHandler=()=>{setRerender(!rerender);}\n   \n    const [sideNavBarWidth, setWidth] = useState('var(--sideNavBarWidth)');\n\n    const [contract,setContract] = useState(true);\n\n    const expandHandler=()=>{\n\n        //console.log(\"expand handler called\");\n        contract && setWidth('var(--sideNavBarWidthOnContract)');\n        !contract && setWidth('var(--sideNavBarWidth)');\n        setContract(!contract);\n\n    }\n\n\n\n\n\n\n   const [dashboardMounted, setDashboardMounted] = useState(false);\n   const [courseMounted, setCourseMounted] = useState(false);\t\n   const [messagesMounted, setMessagesMounted] = useState(false);\n   const [emailMounted, setEmailMounted] = useState(false);\n\n   const [discussionMounted, setDiscussionMounted] = useState(false);\t\n   const [classMounted, setClassMounted] = useState(false);\n   const [tasksMounted, setTasksMounted] = useState(false);\t\n   const [booksMounted, setBooksMounted] = useState(false);\n   //const [examMounted, setExamMounted] = useState(false);\t\n   const [classmatesMounted, setClassmatesMounted] = useState(false);\n   //const [teacherMounted, setTeacherMounted] = useState(false);\n   //const [prepareMounted, setProgressMounted] = useState(false);\n   //const [analyticsMounted, setAnalticsMounted] = useState(false);\t\n   const [achievementsMounted, setAchievementsMounted] = useState(false);                \n   //const [goalsMounted, setGoalsMounted] = useState(false);\n   //const [calenderMounted, setCalenderMounted] = useState(false);\n   //const [diaryMounted, setDiaryMounted] = useState(false);\n   //const [helpcenterMounted, setHelpCenterMounted] = useState(false);\n\n   const [generalChatMounted, setGeneralChatMounted] = useState(false);\n\n   const [selectedCourse, getCourseData] = useState(null);\n   //const [courseData, getCourseData] = useState([]);\n\n   let selectedCourseId = localStorage.getItem('preferredCourseId')\n\n    \t\n    useEffect(()=>{\n      //console.log(\"useEffect-1\");\t   \n      let courseId=selectedCourseId;\n     \t   \n      getcoursesbyCourseId({courseId,getCourseData});\n      return ()=>{\n         getCourseData(selectedCourse=>null);\n      }\n    },[selectedCourseId,rerender ]);\n    \n    \n   \n\n\n   const [userData,setData]=useState({\n   \"id\": null,\t   \n   \"dashboardcourses\": [],\n   \"dashboard_courses\":[],\t   \n   \"usertype\":1,\n   \"noticeids\":[]\t   \n   });\n\n     \t\n   useEffect(()=>{\n\t//console.log(\"useEffect-2\");   \n        getuser({setData});\n    },[rerender])\n   \n\n   useEffect(()=>{\n\n   smallerThan750px && setWidth('var(--sideNavBarWidthOnContract)');\t  \n   smallerThan750px && setContract(false);\n   !smallerThan750px && setWidth('var(--sideNavBarWidth)');\t   \n   !smallerThan750px && setContract(true);\n\n\n   },[smallerThan750px]);\n\n\n\n\n\n\n\n\n\n\n   const [dashboardCourses, getDashboardCourses] = useState(userData.id !==null? userData.dashboard_courses: []);\n\n\n   //console.log(\"dashboard courses: \", dashboardCourses);\n\n   */\n\n\n  {/*\n  return (\n    <div className=\"edrapp\">\n\n\n    \n\n    \n    <Header onPress={expandHandler}  selectedCourse={selectedCourse} userData={userData} dashboardCourses={dashboardCourses}/> \n  \n    <SideToolBar toolBarWidth={sideNavBarWidth}/>\n    \n    { selectedCourseId !==null &&  <>\n    <SideToolBar toolBarWidth={sideNavBarWidth}/>\n \n    \n    <SideNavBar sideNavBarWidth={sideNavBarWidth} \n\tdashboardMounted={dashboardMounted} \n\tcourseMounted = {courseMounted}   \n\tmessagesMounted={messagesMounted}\n        discussionMounted={discussionMounted} \n        classMounted = {classMounted} \n        tasksMounted = {tasksMounted} \n        booksMounted = {booksMounted} \n        examMounted = {false} \n        classmatesMounted = {classmatesMounted}\n        teacherMounted = {false}\n        prepareMounted = {false}\n        analyticsMounted ={false}\n        achievementsMounted = {achievementsMounted}\n        goalsMounted = {false} \n        calenderMounted = {false}\n        diaryMounted = {false}\n        helpcenterMounted = {false}\n\trerender={rerenderHandler}   \n\tuserData={userData}   \n      />\n     </>\n\n     }\n    \n    { selectedCourseId ===null &&\n     <> \n \n     <SideBarDashboard sideNavBarWidth={sideNavBarWidth}\n\t              generalChatMounted={generalChatMounted}\n\t              homeMounted={dashboardMounted}\n\t              emailMounted={emailMounted}\n\t              userData={userData}\n\t              setWidth={setWidth}\n\t              setContract={setContract}\n\t              \n\t\t    />\n\n     </>\t\t    \n    }\n\n\n\n\n\n\n\n \n    <Switch>\n\n\t        \t\n      <Route exact path='/account/userprofile' >\n      <UserProfile sideNavBarWidth={sideNavBarWidth} \n\t  selectedCourse={selectedCourse}\n\t  userData={userData}\n\t  rerender={rerenderHandler}\n\t  />\n      </Route>\n\n      <Route exact path='/account/settings' >\n        <Settings sideNavBarWidth={sideNavBarWidth} \n\t  selectedCourse={selectedCourse}\n\t  userData={userData}\n\t  />\n      </Route>\n\n \n      <Route  path='/dashboard/general' >\n        <General sideNavBarWidth={sideNavBarWidth} \n\t    passMountInfo={setDashboardMounted} \n\t    selectedCourse={selectedCourse} \n\t    dashboardCourses={userData.dashboard_courses}\n\t    userData={userData}\n\t    socketObj={wcInstance}\n\t    rerender = {rerenderHandler}\n\t/>\n      </Route>\n\n      <Route path='/course/summary' >\n        <Summary \n\t    sideNavBarWidth={sideNavBarWidth} \n\t    passMountInfo={setCourseMounted}  \n\t    selectedCourse={selectedCourse}\n            userData={userData}\t    \n\t/>\n      </Route>\n\n\n      <Route exact path='/course/syllabus' >\n        <Syllabus\n            sideNavBarWidth={sideNavBarWidth}\n            passMountInfo={setCourseMounted}\n            selectedCourse={selectedCourse}\n            userData={userData}\n        />\n      </Route>\n\n\n\n      <Route exact path='/dashboard/generalchat' >\n        <VATChat sideNavBarWidth={sideNavBarWidth}\n           passMountInfo={setGeneralChatMounted}\n           selectedCourse={selectedCourse}\n           userData={userData}\n        />\n      </Route>\n\n\n\t \n      <Route exact path='/messages/chat' >\n        <VATChat sideNavBarWidth={sideNavBarWidth} \n\t   passMountInfo={setMessagesMounted}  \n\t   selectedCourse={selectedCourse}\n\t   userData={userData}\n\t/>\n      </Route>\n        \n\n      <Route exact path='/home/email' >\n        <EMail sideNavBarWidth={sideNavBarWidth} \n\t    passMountInfo={setEmailMounted}  \n\t    selectedCourse={selectedCourse}\n\t    userData={userData}\n\t/>\n      </Route>\n\n      \n\n      <Route exact path='/messages/tickets' >\n        <Tickets sideNavBarWidth={sideNavBarWidth} \n\t    passMountInfo={setDiscussionMounted}  \n\t    selectedCourse={selectedCourse}\n\t    userData={userData}\n\t/>\n      </Route>\n\t \n\n      <Route exact path='/class/overview' >\n        <ClassOverview sideNavBarWidth={sideNavBarWidth} \n\t          passMountInfo={setClassMounted}  \n\t          selectedCourse={selectedCourse}\n                  userData={userData}\n\t          dashboardCourses={dashboardCourses}\n\t          onPress={rerenderHandler}\n\t  />\n      </Route>\n\n      <Route exact path='/class/detail' >\n          <Detail sideNavBarWidth={sideNavBarWidth} \n\t      passMountInfo={setClassMounted}  \n\t      selectedCourse={selectedCourse}\n\t      userData={userData}\n\t  />\n      </Route>\n\n      <Route exact path='/class/specifics' >\n        <Specifics sideNavBarWidth={sideNavBarWidth} \n\t    passMountInfo={setClassMounted}  \n\t    selectedCourse={selectedCourse}\n\t  />\n      </Route>\n      \n    \n        <Route exact path='/assignment/home' >\n        <AssignmentHome sideNavBarWidth={sideNavBarWidth}\n                  passMountInfo={setTasksMounted}\n                  selectedCourse={selectedCourse}\n                  userData={userData}\n                  dashboardCourses={dashboardCourses}\n                  onPress={rerenderHandler}\n          />\n        </Route>\n\n\n\n        <Route exact path='/books/findbook' >\n        <FindBook sideNavBarWidth={sideNavBarWidth}\n                  passMountInfo={setBooksMounted}\n                  selectedCourse={selectedCourse}\n                  userData={userData}\n                  dashboardCourses={dashboardCourses}\n                  onPress={rerenderHandler}\n          />\n        </Route>\n        \n        <Route exact path='/books/read' >\n          <Read sideNavBarWidth={sideNavBarWidth}\n              passMountInfo={setBooksMounted}\n              selectedCourse={selectedCourse}\n              userData={userData}\n          />\n        </Route>\n\n        <Route exact path='/books/insights' >\n          <Insights sideNavBarWidth={sideNavBarWidth} \n            passMountInfo={setBooksMounted}  \n            selectedCourse={selectedCourse}\n          />\n         </Route>\n         \n    \n\n\n        <Route exact path='/students/all' >\n          <Students sideNavBarWidth={sideNavBarWidth}\n              passMountInfo={setClassmatesMounted}\n              selectedCourse={selectedCourse}\n              userData={userData}\n          />\n        </Route>\n\n\n\n\n         <Route path='/course/exams'>\n           <ExamsInCourse\n                 sideNavBarWidth={sideNavBarWidth}\n                  passMountInfo={setTasksMounted}\n                  selectedCourse={selectedCourse}\n                  userData={userData}\n                  dashboardCourses={dashboardCourses}\n                  onPress={rerenderHandler}\n\t         />\n\n\n        </Route>\n\n\n\n\n\n\n\n\n\n\n\n\n\n     \n      <Route exact path='/meetings/overview' >\n        <MeetingsOverview sideNavBarWidth={sideNavBarWidth}\n                  passMountInfo={setAchievementsMounted}\n                  selectedCourse={selectedCourse}\n                  userData={userData}\n                  dashboardCourses={dashboardCourses}\n                  onPress={rerenderHandler}\n          />\n      </Route>\n\n        \t  \n      <Route exact path='/meetings/detail' >\n          <MeetingsDetail sideNavBarWidth={sideNavBarWidth}\n              passMountInfo={setAchievementsMounted}\n              selectedCourse={selectedCourse}\n              userData={userData}\n          />\n      </Route>\n      \n\n\n    </Switch>\t  \n\n\n    \n    \n    </div>\n\n  );\n\n */}\n\nreturn (<div> </div>);\n\n\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,QAAd,EAAuBC,SAAvB,QAAuC,OAAvC;AACA,SAAQC,KAAR,EAAcC,MAAd,QAA2B,kBAA3B,C,CACA;;AAEA,OAAQ,WAAR;AACA,OAAOC,MAAP,MAAmB,4BAAnB,C,CAEA;;AAEA,OAAOC,UAAP,MAAuB,oCAAvB;AACA,OAAOC,WAAP,MAAwB,qCAAxB;AACA,OAAOC,gBAAP,MAA6B,0CAA7B;AAEA,OAAOC,WAAP,MAAwB,4CAAxB;AACA,OAAOC,QAAP,MAAqB,sCAArB,C,CACA;AAEA;;AACA,OAAOC,OAAP,MAAoB,sCAApB;AACA,OAAOC,OAAP,MAAoB,4BAApB,C,CACA;;AACA,OAAOC,QAAP,MAAqB,8BAArB;AAEA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,KAAP,MAAkB,wBAAlB;AACA,OAAOC,OAAP,MAAoB,+BAApB;AAEA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,MAAP,MAAmB,kCAAnB;AACA,OAAOC,SAAP,MAAsB,wCAAtB;AAEA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,IAAP,MAAiB,4BAAjB;AACA,OAAOC,QAAP,MAAqB,oCAArB;AAEA,OAAOC,cAAP,MAA2B,uCAA3B;AAGA,OAAOC,aAAP,MAA0B,uBAA1B;AAGA,OAAOC,gBAAP,MAA6B,8BAA7B;AACA,OAAOC,cAAP,MAA2B,mCAA3B;AAEA,OAAOC,QAAP,MAAqB,8BAArB;AACA,SAAQC,YAAY,IAAIC,YAAxB,QAA4C,WAA5C;AAEA,SAASC,iBAAT,QAAkC,kBAAlC,C,CAIA;;AACA,SAAQC,oBAAR,EAA8BC,OAA9B,EAAuCC,yBAAvC,QAAuE,0BAAvE;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAOA,SAASC,GAAT,GAAe;EAEZ;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAsoBAAQ;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QAAR;AAGC;;KA7ZQA,G;AA+ZT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}