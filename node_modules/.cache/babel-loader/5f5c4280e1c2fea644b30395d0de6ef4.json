{"ast":null,"code":"import _regeneratorRuntime from \"/home/bibhu/EDRdevelopment/DevBranch/edresearchweb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { DEFAULT_DOMAIN } from './constants';\n\nvar loadExternalApi = function loadExternalApi(domain) {\n  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n              if (window.JitsiMeetExternalAPI) {\n                return resolve(window.JitsiMeetExternalAPI);\n              }\n\n              var script = document.createElement('script');\n              script.async = true;\n              script.src = \"https://\".concat(domain, \"/external_api.js\");\n\n              script.onload = function () {\n                return resolve(window.JitsiMeetExternalAPI);\n              };\n\n              script.onerror = function () {\n                return reject(new Error(\"Script load error: \".concat(script.src)));\n              };\n\n              document.head.appendChild(script);\n            }));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n};\n\nvar scriptPromise;\n/**\n * Injects the external_api.js script for the corresponding domain in DOM\n * and resolves with either the `JitsiMeetExternalApi` class definition or an error\n *\n * @param {string} domain - The domain of the external API\n * @returns {Promise<JitsiMeetExternalApi>} - the JitsiMeetExternalAPI or an error\n */\n\nexport var fetchExternalApi = function fetchExternalApi() {\n  var domain = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_DOMAIN;\n\n  if (scriptPromise) {\n    return scriptPromise;\n  }\n\n  scriptPromise = loadExternalApi(domain);\n  return scriptPromise;\n};","map":null,"metadata":{},"sourceType":"module"}