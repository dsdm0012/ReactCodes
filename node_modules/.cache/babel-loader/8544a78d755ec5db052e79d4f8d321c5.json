{"ast":null,"code":"var _jsxFileName = \"/home/bibhu/EDRdevelopment/DevBranch/edresearchweb/src/VideoPlayer/TwilioVideo/Participant.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Participant = ({\n  participant\n}) => {\n  _s();\n\n  const [videoTracks, setVideoTracks] = useState([]);\n  const [audioTracks, setAudioTracks] = useState([]);\n  const videoRef = useRef();\n  const audioRef = useRef();\n\n  const trackpubsToTracks = trackMap => Array.from(trackMap.values()).map(publication => publication.track).filter(track => track !== null);\n\n  useEffect(() => {\n    setVideoTracks(trackpubsToTracks(participant.videoTracks));\n    setAudioTracks(trackpubsToTracks(participant.audioTracks));\n    /*\n     const trackSubscribed = (track) => {\n       if (track.kind === \"video\") {\n         setVideoTracks((videoTracks) => [...videoTracks, track]);\n       } else if (track.kind === \"audio\") {\n         setAudioTracks((audioTracks) => [...audioTracks, track]);\n       }\n     };\n      const trackUnsubscribed = (track) => {\n       if (track.kind === \"video\") {\n         setVideoTracks((videoTracks) => videoTracks.filter((v) => v !== track));\n       } else if (track.kind === \"audio\") {\n         setAudioTracks((audioTracks) => audioTracks.filter((a) => a !== track));\n       }\n     };\n      participant.on(\"trackSubscribed\", trackSubscribed);\n     participant.on(\"trackUnsubscribed\", trackUnsubscribed);\n     */\n\n    return () => {\n      setVideoTracks([]);\n      setAudioTracks([]);\n      participant.removeAllListeners();\n    };\n  }, [participant]); //reload to browser if video setting changes of the participant\n\n  useEffect(() => {\n    const videoTrack = videoTracks[0];\n\n    if (videoTrack) {\n      videoTrack.attach(videoRef.current);\n      return () => {\n        videoTrack.detach();\n      };\n    }\n  }, [videoTracks]); //reload to browser if audio setting changes of the participant\n\n  useEffect(() => {\n    const audioTrack = audioTracks[0];\n\n    if (audioTrack) {\n      audioTrack.attach(audioRef.current);\n      return () => {\n        audioTrack.detach();\n      };\n    }\n  }, [audioTracks]);\n  console.log(\"Participant: \", participant.sid);\n  console.log(\"audioTracks\", audioTracks);\n  console.log(\"videoTracks\", videoTracks);\n\n  const turnOffVideoHandler = () => {\n    setVideoTracks([]);\n  };\n\n  const turnOnVideoHandler = () => {\n    setVideoTracks(trackpubsToTracks(participant.videoTracks));\n  };\n\n  const turnOffAudioHandler = () => {\n    setAudioTracks([]);\n  };\n\n  const turnOnAudioHandler = () => {\n    setAudioTracks(trackpubsToTracks(participant.audioTracks));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"participant\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: participant.identity\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videoRef,\n      autoPlay: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      ref: audioRef,\n      autoPlay: true,\n      muted: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: turnOffVideoHandler,\n      children: \" video turn off\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: turnOnVideoHandler,\n      children: \" video turn on \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: turnOffAudioHandler,\n      children: \" audio turn off\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: turnOnAudioHandler,\n      children: \" audio turn on \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Participant, \"mkU8c/5Desq4gBVgG4t6VGqYbcQ=\");\n\n_c = Participant;\nexport default Participant;\n\nvar _c;\n\n$RefreshReg$(_c, \"Participant\");","map":{"version":3,"sources":["/home/bibhu/EDRdevelopment/DevBranch/edresearchweb/src/VideoPlayer/TwilioVideo/Participant.js"],"names":["React","useState","useEffect","useRef","Participant","participant","videoTracks","setVideoTracks","audioTracks","setAudioTracks","videoRef","audioRef","trackpubsToTracks","trackMap","Array","from","values","map","publication","track","filter","removeAllListeners","videoTrack","attach","current","detach","audioTrack","console","log","sid","turnOffVideoHandler","turnOnVideoHandler","turnOffAudioHandler","turnOnAudioHandler","identity"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\n\nconst Participant = ({ participant }) => {\n  const [videoTracks, setVideoTracks] = useState([]);\n  const [audioTracks, setAudioTracks] = useState([]);\n\n  const videoRef = useRef();\n  const audioRef = useRef();\n\n  const trackpubsToTracks = (trackMap) =>\n    Array.from(trackMap.values())\n      .map((publication) => publication.track)\n      .filter((track) => track !== null);\n\n  useEffect(() => {\n    setVideoTracks(trackpubsToTracks(participant.videoTracks));\n    setAudioTracks(trackpubsToTracks(participant.audioTracks));\n   /*\n    const trackSubscribed = (track) => {\n      if (track.kind === \"video\") {\n        setVideoTracks((videoTracks) => [...videoTracks, track]);\n      } else if (track.kind === \"audio\") {\n        setAudioTracks((audioTracks) => [...audioTracks, track]);\n      }\n    };\n\n    const trackUnsubscribed = (track) => {\n      if (track.kind === \"video\") {\n        setVideoTracks((videoTracks) => videoTracks.filter((v) => v !== track));\n      } else if (track.kind === \"audio\") {\n        setAudioTracks((audioTracks) => audioTracks.filter((a) => a !== track));\n      }\n    };\n\n    participant.on(\"trackSubscribed\", trackSubscribed);\n    participant.on(\"trackUnsubscribed\", trackUnsubscribed);\n    */\n  \n\n\n\n    return () => {\n      setVideoTracks([]);\n      setAudioTracks([]);\n      participant.removeAllListeners();\n    };\n  }, [participant]);\n\n\n\n  //reload to browser if video setting changes of the participant\n  useEffect(() => {\n    const videoTrack = videoTracks[0];\n    if (videoTrack) {\n      videoTrack.attach(videoRef.current);\n      return () => {\n        videoTrack.detach();\n      };\n    }\n  }, [videoTracks]);\n\n\n\n  //reload to browser if audio setting changes of the participant\n  useEffect(() => {\n    const audioTrack = audioTracks[0];\n    if (audioTrack) {\n      audioTrack.attach(audioRef.current);\n      return () => {\n        audioTrack.detach();\n      };\n    }\n  }, [audioTracks]);\n\n\n\n    console.log(\"Participant: \",participant.sid )\n    console.log(\"audioTracks\",audioTracks)\n    console.log(\"videoTracks\", videoTracks)\n\n\n   const turnOffVideoHandler=()=>{\n    setVideoTracks([]);\n   }\n\n\n   const turnOnVideoHandler=()=>{\n    setVideoTracks(trackpubsToTracks(participant.videoTracks));\n   }\n\n   const turnOffAudioHandler=()=>{\n    setAudioTracks([]);\n   }\n\n\n   const turnOnAudioHandler=()=>{\n    setAudioTracks(trackpubsToTracks(participant.audioTracks));\n   }\n\n\n\n\n\n\n\n\n\n\n  return (\n    <div className=\"participant\">\n      <h3>{participant.identity}</h3>\n      <video ref={videoRef} autoPlay={true}  />\n      <audio ref={audioRef} autoPlay={true} muted={false} />\n  \n      <button type='button' onClick={turnOffVideoHandler}> video turn off</button>\t \n      <button type='button' onClick={turnOnVideoHandler}> video turn on </button>\n\n      <button type='button' onClick={turnOffAudioHandler}> audio turn off</button>\n      <button type='button' onClick={turnOnAudioHandler}> audio turn on </button>\n\n\n\n    </div>\n  );\n};\n\nexport default Participant;\n"]},"metadata":{},"sourceType":"module"}