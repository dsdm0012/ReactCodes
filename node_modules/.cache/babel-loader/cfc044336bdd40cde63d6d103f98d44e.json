{"ast":null,"code":"var React = require('react');\n\nfunction fallbackMatchMedia(query) {\n  if (typeof matchMedia !== 'function') {\n    return null;\n  }\n\n  return matchMedia(query);\n}\n\nfunction omitMatchMediaResult(matchMediaResult) {\n  if (!matchMediaResult) {\n    return null;\n  }\n\n  return {\n    media: matchMediaResult.media,\n    matches: matchMediaResult.matches\n  };\n}\n\nfunction useMedia(query) {\n  var mounted = React.useState(false);\n  var setMounted = mounted[1];\n  React.useEffect(function () {\n    setMounted(true);\n  }, [setMounted]);\n  var result = React.useState(function () {\n    return omitMatchMediaResult(fallbackMatchMedia(query));\n  });\n  var setResult = result[1];\n  var callback = React.useCallback(function (matchMediaResult) {\n    return setResult(omitMatchMediaResult(matchMediaResult));\n  }, [setResult]);\n  React.useEffect(function () {\n    var matchMediaResult = fallbackMatchMedia(query);\n    callback(matchMediaResult);\n\n    if (matchMediaResult) {\n      matchMediaResult.addEventListener('change', callback);\n    }\n\n    return function () {\n      if (matchMediaResult) {\n        matchMediaResult.removeEventListener('change', callback);\n      }\n    };\n  }, [callback, query]);\n\n  if (!mounted[0]) {\n    return null;\n  }\n\n  return result[0];\n}\n\nfunction useMediaPredicate(query) {\n  var result = useMedia(query);\n  return result && result.matches || false;\n}\n\nmodule.exports = {\n  useMedia: useMedia,\n  useMediaPredicate: useMediaPredicate\n};","map":null,"metadata":{},"sourceType":"script"}