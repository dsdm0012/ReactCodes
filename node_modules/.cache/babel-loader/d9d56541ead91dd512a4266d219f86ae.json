{"ast":null,"code":"var _jsxFileName = \"/home/bibhu/EDRdevelopment/DevBranch/edresearchweb/src/MainApps/Dashboard/General/NoticeBoard/NoticeBoxContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport classes from './NoticeBoxContainer.module.css';\nimport NoticeBox from './NoticeBox';\nimport NoticeBoardToolBar from './NoticeBoardToolBar';\nimport { getnoticebyId, getdashboardnotice } from '../../../../CommonApps/AllAPICalls'; //getuser, getnotice,\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction containsObject(obj, list) {\n  var i;\n\n  for (i = 0; i < list.length; i++) {\n    if (list[i] === obj) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nconst NoticeBoxContainer = props => {\n  _s();\n\n  console.log(\"NoticeBox Container rendering. . .\");\n  const [noticeIds, getNoticeIds] = useState([]);\n  const [noticeData, getNoticeData] = useState([]);\n  const [dashboardNotice, getDashboardNotice] = useState(null);\n  useState(() => {\n    getdashboardnotice({\n      getDashboardNotice\n    });\n  }, [props.courseData]);\n  console.log(\"dash notice: \", dashboardNotice);\n  /*\n  useEffect(()=>{\n  \n  \n     //getnotice({getNoticeData});\n          let noticeIdArray=[];\n  \tlet propsCourseData = props.courseData;\n  \t   propsCourseData.forEach((course, index)=>{\n                         //console.log(\"noticeobjects\",course.noticeobjects[0])\n                         course.noticeobjects.forEach((noticeId, indexI)=>{  \n  \t\t\t      // console.log('noticeId: ', noticeId)\n                               if ( noticeIdArray.indexOf(noticeId) < 0){noticeIdArray.push(noticeId)}\n  \n  \t\t       })\n  \t\t                                                    \n  \n  \n  \n  \t          }\n  \t    );   \n          \n  \n      getNoticeIds(noticeIds=>noticeIdArray);\t\n  \n   return ()=>{\n    getNoticeIds(noticeIds=>[]);\n  \n   }\n  \n  \n  },[ props.courseData]);\n  \n  \n  \n  \n  useEffect(()=>{\n  \n     noticeIds.forEach((noticeid, index)=>{\n  \n        getnoticebyId({noticeid, getNoticeData});\n  \n     });\n  \n    return ()=>{\n             getNoticeData(noticeData=>[]);\n         }\n  \n  },[noticeIds]);\n  \n  \n  */\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.noticeBoxContainer,\n    children: [/*#__PURE__*/_jsxDEV(NoticeBoardToolBar, {\n      closeNoticeBoard: props.closeNoticeBoard,\n      courseData: props.courseData,\n      socketObj: props.socketObj,\n      userData: props.userData,\n      rerender: props.rerender\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 4\n    }, this), props.dashboardNotice !== null && props.dashboardNotice.dashnotices !== null && props.dashboardNotice.dashnotices.map((notice, index) => {\n      //let isRead = containsObject(notice, props.userData.noticeids)\n      return /*#__PURE__*/_jsxDEV(NoticeBox, {\n        read: true,\n        Notice: notice\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 18\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 1\n  }, this);\n};\n\n_s(NoticeBoxContainer, \"GCjWFA0HDANG/v4I/TW4AmpmXZU=\");\n\n_c = NoticeBoxContainer;\nexport default NoticeBoxContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"NoticeBoxContainer\");","map":{"version":3,"sources":["/home/bibhu/EDRdevelopment/DevBranch/edresearchweb/src/MainApps/Dashboard/General/NoticeBoard/NoticeBoxContainer.js"],"names":["React","useState","useEffect","classes","NoticeBox","NoticeBoardToolBar","getnoticebyId","getdashboardnotice","containsObject","obj","list","i","length","NoticeBoxContainer","props","console","log","noticeIds","getNoticeIds","noticeData","getNoticeData","dashboardNotice","getDashboardNotice","courseData","noticeBoxContainer","closeNoticeBoard","socketObj","userData","rerender","dashnotices","map","notice","index"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,QAAd,EAAuBC,SAAvB,QAAuC,OAAvC;AACA,OAAOC,OAAP,MAAoB,iCAApB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,SAAQC,aAAR,EAAsBC,kBAAtB,QAA+C,oCAA/C,C,CACA;;;;AAIA,SAASC,cAAT,CAAwBC,GAAxB,EAA6BC,IAA7B,EAAmC;AAC/B,MAAIC,CAAJ;;AACA,OAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGD,IAAI,CAACE,MAArB,EAA6BD,CAAC,EAA9B,EAAkC;AAC9B,QAAID,IAAI,CAACC,CAAD,CAAJ,KAAYF,GAAhB,EAAqB;AACjB,aAAO,IAAP;AACH;AACJ;;AAED,SAAO,KAAP;AACH;;AAOD,MAAMI,kBAAkB,GAAGC,KAAD,IAAS;AAAA;;AAGjCC,EAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ;AAEA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA0BjB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACkB,UAAD,EAAaC,aAAb,IAA6BnB,QAAQ,CAAC,EAAD,CAA3C;AAEA,QAAM,CAACoB,eAAD,EAAkBC,kBAAlB,IAAsCrB,QAAQ,CAAC,IAAD,CAApD;AAICA,EAAAA,QAAQ,CAAC,MAAI;AAEbM,IAAAA,kBAAkB,CAAC;AAACe,MAAAA;AAAD,KAAD,CAAlB;AAEC,GAJO,EAIN,CAACR,KAAK,CAACS,UAAP,CAJM,CAAR;AAODR,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BK,eAA7B;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAmBA,sBAEA;AAAK,IAAA,SAAS,EAAElB,OAAO,CAACqB,kBAAxB;AAAA,4BAGG,QAAC,kBAAD;AAAoB,MAAA,gBAAgB,EAAEV,KAAK,CAACW,gBAA5C;AACa,MAAA,UAAU,EAAIX,KAAK,CAACS,UADjC;AAEa,MAAA,SAAS,EAAIT,KAAK,CAACY,SAFhC;AAGa,MAAA,QAAQ,EAAIZ,KAAK,CAACa,QAH/B;AAIa,MAAA,QAAQ,EAAIb,KAAK,CAACc;AAJ/B;AAAA;AAAA;AAAA;AAAA,YAHH,EAYKd,KAAK,CAACO,eAAN,KAAyB,IAAzB,IAAiCP,KAAK,CAACO,eAAN,CAAsBQ,WAAtB,KAAqC,IAAtE,IAA+Ef,KAAK,CAACO,eAAN,CAAsBQ,WAAtB,CAAkCC,GAAlC,CAAsC,CAACC,MAAD,EAASC,KAAT,KAAiB;AAEjI;AAEA,0BAAO,QAAC,SAAD;AAAW,QAAA,IAAI,EAAE,IAAjB;AAAuB,QAAA,MAAM,EAAED;AAA/B,SAA4CC,KAA5C;AAAA;AAAA;AAAA;AAAA,cAAP;AAEH,KAN6E,CAZpF;AAAA;AAAA;AAAA;AAAA;AAAA,UAFA;AA8BC,CAxHD;;GAAMnB,kB;;KAAAA,kB;AA2HN,eAAeA,kBAAf","sourcesContent":["import React,{useState,useEffect} from 'react';\nimport classes from './NoticeBoxContainer.module.css';\nimport NoticeBox from './NoticeBox';\nimport NoticeBoardToolBar from './NoticeBoardToolBar';\nimport {getnoticebyId,getdashboardnotice} from '../../../../CommonApps/AllAPICalls';\n//getuser, getnotice,\n\n\n\nfunction containsObject(obj, list) {\n    var i;\n    for (i = 0; i < list.length; i++) {\n        if (list[i] === obj) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n\n\n\n\n\nconst NoticeBoxContainer =(props)=>{\n\n\n  console.log(\"NoticeBox Container rendering. . .\");\n\n  const [noticeIds, getNoticeIds]=useState([]);\t\n  const [noticeData, getNoticeData]= useState([]);\n\n  const [dashboardNotice, getDashboardNotice]=useState(null);\n\n\n\n   useState(()=>{\n\n   getdashboardnotice({getDashboardNotice});\n\n   },[props.courseData]);\n\n\n  console.log(\"dash notice: \", dashboardNotice);\n\n/*\nuseEffect(()=>{\n\n\n   //getnotice({getNoticeData});\n        let noticeIdArray=[];\n\tlet propsCourseData = props.courseData;\n\t   propsCourseData.forEach((course, index)=>{\n                       //console.log(\"noticeobjects\",course.noticeobjects[0])\n                       course.noticeobjects.forEach((noticeId, indexI)=>{  \n\t\t\t      // console.log('noticeId: ', noticeId)\n                             if ( noticeIdArray.indexOf(noticeId) < 0){noticeIdArray.push(noticeId)}\n\n\t\t       })\n\t\t                                                    \n\n\n\n\t          }\n\t    );   \n        \n\n    getNoticeIds(noticeIds=>noticeIdArray);\t\n\n return ()=>{\n  getNoticeIds(noticeIds=>[]);\n\n }\n\n\n},[ props.courseData]);\n\n\n\n\nuseEffect(()=>{\n\n   noticeIds.forEach((noticeid, index)=>{\n\n      getnoticebyId({noticeid, getNoticeData});\n\n   });\n\n  return ()=>{\n           getNoticeData(noticeData=>[]);\n       }\n\n},[noticeIds]);\n\n\n*/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nreturn (\n\n<div className={classes.noticeBoxContainer}>\n\n\n   <NoticeBoardToolBar closeNoticeBoard={props.closeNoticeBoard} \n\t               courseData = {props.courseData}\n\t               socketObj = {props.socketObj}\n\t               userData = {props.userData}\n\t               rerender = {props.rerender}\n\t/>\n\n\n\n   { props.dashboardNotice !==null && props.dashboardNotice.dashnotices !==null &&  props.dashboardNotice.dashnotices.map((notice, index)=>{\n\n          //let isRead = containsObject(notice, props.userData.noticeids)\n\n          return <NoticeBox read={true} Notice={notice} key={index}/>\n\n      })\n   }\n\n\n\n\n</div>\n\n);\n\n}\n\n\nexport default NoticeBoxContainer;\n"]},"metadata":{},"sourceType":"module"}