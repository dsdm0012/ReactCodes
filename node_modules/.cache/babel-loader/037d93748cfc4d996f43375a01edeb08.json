{"ast":null,"code":"var _jsxFileName = \"/home/bibhu/EDRdevelopment/DevBranch/edresearchweb/src/allAppsStudent/Messages/VATChat/ChatWindow/ChatWindowTest.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport classes from \"./ChatWindow.module.css\";\nimport ChatUserInfoTopBar from \"./ChatUserInfoTopBar\";\nimport ChatScreen from \"./ChatScreen\";\nimport ChatInput from \"./ChatInput\";\nimport { w3cwebsocket as W3CWebSocket } from 'websocket';\nimport { Picker } from \"emoji-mart\";\nimport \"emoji-mart/css/emoji-mart.css\";\nimport Login from '../../../../CommonApps/Login';\nimport axiosInstance from '../../../../axios';\nimport { MdSend } from 'react-icons/md';\nimport { postchatcomment, getchatcomments } from '../../../../CommonApps/AllAPICalls';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socketURL = 'ws://127.0.0.1:8000/ws/chat/class/';\n\nfunction reconnectingSocket(socketURL) {\n  let client;\n  let isConnected = false;\n  let reconnectOnClose = true;\n  let messageListeners = [];\n  let stateChangeListeners = [];\n\n  function on(fn) {\n    messageListeners.push(fn);\n  }\n\n  function off(fn) {\n    messageListeners = messageListeners.filter(l => l !== fn);\n  }\n\n  function start() {\n    client = new WebSocket(socketURL);\n\n    client.onopen = () => {\n      isConnected = true;\n      stateChangeListeners.forEach(fn => fn(true));\n    };\n\n    const close = client.close;\n\n    client.close = () => {\n      reconnectOnClose = false;\n      close.call(client);\n    };\n\n    client.onmessage = event => {\n      messageListeners.forEach(fn => fn(event.data));\n    };\n\n    client.onerror = e => console.error(e);\n\n    client.onclose = () => {\n      isConnected = false;\n      stateChangeListeners.forEach(fn => fn(false));\n\n      if (!reconnectOnClose) {\n        console.log('ws closed by app');\n        return;\n      }\n\n      console.log('ws closed by server');\n      setTimeout(start, 3000);\n    };\n  }\n\n  start();\n  return {\n    on,\n    off,\n    // onStateChange,\n    close: () => client.close(),\n    getClient: () => client,\n    isConnected: () => isConnected\n  };\n}\n\nconst client = reconnectingSocket(socketURL);\n\nfunction useMessages() {\n  _s();\n\n  const [messages, setMessages] = useState([]);\n  useEffect(() => {\n    function handleMessage(message) {\n      setMessages([...messages, message]);\n    }\n\n    client.on(handleMessage);\n    return () => client.off(handleMessage);\n  }, [messages, setMessages]);\n  return messages;\n}\n\n_s(useMessages, \"RyA59LRbn9goj/9N7rELX+NWNVI=\");\n\nconst ChatWindow = props => {\n  _s2();\n\n  console.log(\"chat window test\");\n  let roomname = 'class';\n  const [state, setState] = useState({\n    messages: [],\n    value: ''\n  });\n  const [commentObj, setChatCommentObj] = useState([{}]);\n  const [message, setMessage] = useState('');\n  const messages = useMessages();\n  const [isConnected, setIsConnected] = useState(false); //client.isConnected());\n\n  function sendMessage(e) {\n    e.preventDefault();\n    client.getClient().send(message);\n    setMessage('');\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.chatWindow,\n    children: [/*#__PURE__*/_jsxDEV(ChatUserInfoTopBar, {\n      clickedUserId: props.clickedUserId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(ChatScreen, {\n      messages: state.messages,\n      commentObj: commentObj\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.chatInput,\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        className: classes.addCommentForm,\n        onSubmit: sendMessage,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.chatInput,\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            className: classes.inputTextBox,\n            value: message,\n            onChange: e => setMessage(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 23\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: classes.submit_button,\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: [/*#__PURE__*/_jsxDEV(MdSend, {\n              className: classes.sendButtonIcon\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 80\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 77\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 18\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 6\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 184,\n    columnNumber: 1\n  }, this);\n};\n\n_s2(ChatWindow, \"mO55N3MVdLZ6Pns12AikyZb1yWI=\", false, function () {\n  return [useMessages];\n});\n\n_c = ChatWindow;\nexport default ChatWindow;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatWindow\");","map":{"version":3,"sources":["/home/bibhu/EDRdevelopment/DevBranch/edresearchweb/src/allAppsStudent/Messages/VATChat/ChatWindow/ChatWindowTest.js"],"names":["React","useState","useEffect","useRef","classes","ChatUserInfoTopBar","ChatScreen","ChatInput","w3cwebsocket","W3CWebSocket","Picker","Login","axiosInstance","MdSend","postchatcomment","getchatcomments","socketURL","reconnectingSocket","client","isConnected","reconnectOnClose","messageListeners","stateChangeListeners","on","fn","push","off","filter","l","start","WebSocket","onopen","forEach","close","call","onmessage","event","data","onerror","e","console","error","onclose","log","setTimeout","getClient","useMessages","messages","setMessages","handleMessage","message","ChatWindow","props","roomname","state","setState","value","commentObj","setChatCommentObj","setMessage","setIsConnected","sendMessage","preventDefault","send","chatWindow","clickedUserId","chatInput","addCommentForm","inputTextBox","target","submit_button","sendButtonIcon"],"mappings":"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","sourcesContent":["import React,{useState,useEffect,useRef} from \"react\";\nimport classes from \"./ChatWindow.module.css\"\nimport ChatUserInfoTopBar from \"./ChatUserInfoTopBar\";\nimport ChatScreen from \"./ChatScreen\";\nimport ChatInput from \"./ChatInput\";\nimport {w3cwebsocket as W3CWebSocket } from 'websocket';\nimport { Picker } from \"emoji-mart\";\nimport \"emoji-mart/css/emoji-mart.css\";\nimport Login from '../../../../CommonApps/Login';\nimport axiosInstance from '../../../../axios';\nimport {MdSend} from 'react-icons/md';\nimport {postchatcomment,getchatcomments} from '../../../../CommonApps/AllAPICalls';\n\nconst socketURL= 'ws://127.0.0.1:8000/ws/chat/class/'\n\n\n\n\n\nfunction reconnectingSocket(socketURL) {\n  let client;\n  let isConnected = false;\n  let reconnectOnClose = true;\n  let messageListeners = [];\n  let stateChangeListeners = [];\n\n  function on(fn) {\n    messageListeners.push(fn);\n  }\n\n  function off(fn) {\n    messageListeners = messageListeners.filter(l => l !== fn);\n  }\n\n\n  function start() {\n    client = new WebSocket(socketURL);\n\n    client.onopen = () => {\n      isConnected = true;\n      stateChangeListeners.forEach(fn => fn(true));\n    }\n\n    const close = client.close;\n\n    client.close = () => {\n      reconnectOnClose = false;\n      close.call(client);\n    }\n\n   client.onmessage = (event) => {\n      messageListeners.forEach(fn => fn(event.data));\n    }\n\n   client.onerror = (e) => console.error(e);\n\n   client.onclose = () => {\n\n      isConnected = false;\n      stateChangeListeners.forEach(fn => fn(false));\n\n      if (!reconnectOnClose) {\n        console.log('ws closed by app');\n        return;\n      }\n\n      console.log('ws closed by server');\n\n      setTimeout(start, 3000);\n    }\n\n\n    }\n\n   start();\n\nreturn {\n    on,\n    off,\n   // onStateChange,\n    close: () => client.close(),\n    getClient: () => client,\n    isConnected: () => isConnected,\n  };\n\n\n\n\n}\n\n\nconst client = reconnectingSocket(socketURL);\n\n\nfunction useMessages() {\n  const [messages, setMessages] = useState([]);\n\n  useEffect(() => {\n    function handleMessage(message) {\n      setMessages([...messages, message]);\n    }\n    client.on(handleMessage);\n    return () => client.off(handleMessage);\n  }, [messages, setMessages]);\n\n  return messages;\n}\n\n\n\n\n\n\n\n\n\n\nconst ChatWindow = (props) =>{\n\n\n\n\n\n\n  console.log(\"chat window test\");\n\n\n   let roomname='class'\n\n    const [state, setState] = useState({messages: [],value: '',});\n    const [commentObj,setChatCommentObj]=useState([{}]);\n\n\n\n\n\n\n\n\n   const [message, setMessage] = useState('');\n   const messages = useMessages();\n   const [isConnected, setIsConnected] = useState(false);//client.isConnected());\n\n\n   \t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n function sendMessage(e) {\n    e.preventDefault();\n    client.getClient().send(message);\n    setMessage('');\n  }\n\n\n\n\n\n\n\n\nreturn(\n\n<div className={classes.chatWindow}>\n\n<ChatUserInfoTopBar clickedUserId={props.clickedUserId} />\n\n<ChatScreen messages={state.messages}  commentObj={commentObj}/>\n\t\n<div className={classes.chatInput}>\n\n\n\n\n\n     <form className={classes.addCommentForm} onSubmit={sendMessage}>\n\n\n                  <div className={classes.chatInput} >\n\n                      <input className={classes.inputTextBox} value={message} onChange={e => setMessage(e.target.value)} />\n\n\n\n                  </div>\n\n                 \n                 <button type=\"submit\"  className= {classes.submit_button} ><b><MdSend className={classes.sendButtonIcon}/> </b> </button>\n                  \n     </form>\n\n\n</div>\n\n\n\n\t\n</div>\n\n);\n\n}\n\nexport default ChatWindow;\n"]},"metadata":{},"sourceType":"module"}