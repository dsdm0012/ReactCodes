{"ast":null,"code":"/**\n * Expose `Backoff`.\n */\nvar Backoff =\n/** @class */\nfunction () {\n  /**\n   * Construct a {@link Backoff}.\n   * @param {object} options\n   * @property {number} min - Initial timeout in milliseconds [100]\n   * @property {number} max - Max timeout [10000]\n   * @property {boolean} jitter - Apply jitter [0]\n   * @property {number} factor - Multiplication factor for Backoff operation [2]\n   */\n  function Backoff(options) {\n    Object.defineProperties(this, {\n      _min: {\n        value: options.min || 100\n      },\n      _max: {\n        value: options.max || 10000\n      },\n      _jitter: {\n        value: options.jitter > 0 && options.jitter <= 1 ? options.jitter : 0\n      },\n      _factor: {\n        value: options.factor || 2\n      },\n      _attempts: {\n        value: 0,\n        writable: true\n      },\n      _duration: {\n        enumerable: false,\n        get: function () {\n          var ms = this._min * Math.pow(this._factor, this._attempts);\n\n          if (this._jitter) {\n            var rand = Math.random();\n            var deviation = Math.floor(rand * this._jitter * ms);\n            ms = (Math.floor(rand * 10) & 1) === 0 ? ms - deviation : ms + deviation;\n          }\n\n          return Math.min(ms, this._max) | 0;\n        }\n      },\n      _timeoutID: {\n        value: null,\n        writable: true\n      }\n    });\n  }\n  /**\n  * Start the backoff operation.\n  * @param {function} fn - Function to call\n  * @return {void}\n  * @api public\n  */\n\n\n  Backoff.prototype.backoff = function (fn) {\n    var _this = this;\n\n    var duration = this._duration;\n\n    if (this._timeoutID) {\n      clearTimeout(this._timeoutID);\n      this._timeoutID = null;\n    }\n\n    this._timeoutID = setTimeout(function () {\n      _this._attempts++;\n      fn();\n    }, duration);\n  };\n  /**\n  * Reset the number of attempts and clear the timer.\n  *\n  * @return {void}\n  * @api public\n  */\n\n\n  Backoff.prototype.reset = function () {\n    this._attempts = 0;\n\n    if (this._timeoutID) {\n      clearTimeout(this._timeoutID);\n      this._timeoutID = null;\n    }\n  };\n\n  return Backoff;\n}();\n\nmodule.exports = Backoff;","map":{"version":3,"sources":["../../lib/util/backoff.js"],"names":[],"mappings":"AACA;;AAEG;AAEH,IAAA,OAAA;AAAA;AAAA,YAAA;AACE;;;;;;;AAOG;AACH,WAAA,OAAA,CAAY,OAAZ,EAAmB;AACjB,IAAA,MAAM,CAAC,gBAAP,CAAwB,IAAxB,EAA8B;AAC5B,MAAA,IAAI,EAAE;AACJ,QAAA,KAAK,EAAE,OAAO,CAAC,GAAR,IAAe;AADlB,OADsB;AAI5B,MAAA,IAAI,EAAE;AACJ,QAAA,KAAK,EAAE,OAAO,CAAC,GAAR,IAAe;AADlB,OAJsB;AAO5B,MAAA,OAAO,EAAE;AACP,QAAA,KAAK,EAAE,OAAO,CAAC,MAAR,GAAiB,CAAjB,IAAsB,OAAO,CAAC,MAAR,IAAkB,CAAxC,GAA4C,OAAO,CAAC,MAApD,GAA6D;AAD7D,OAPmB;AAU5B,MAAA,OAAO,EAAE;AACP,QAAA,KAAK,EAAE,OAAO,CAAC,MAAR,IAAkB;AADlB,OAVmB;AAa5B,MAAA,SAAS,EAAE;AACT,QAAA,KAAK,EAAE,CADE;AAET,QAAA,QAAQ,EAAE;AAFD,OAbiB;AAiB5B,MAAA,SAAS,EAAE;AACT,QAAA,UAAU,EAAE,KADH;AAET,QAAA,GAAG,EAAA,YAAA;AACD,cAAI,EAAE,GAAG,KAAK,IAAL,GAAY,IAAI,CAAC,GAAL,CAAS,KAAK,OAAd,EAAuB,KAAK,SAA5B,CAArB;;AACA,cAAI,KAAK,OAAT,EAAkB;AAChB,gBAAM,IAAI,GAAI,IAAI,CAAC,MAAL,EAAd;AACA,gBAAM,SAAS,GAAG,IAAI,CAAC,KAAL,CAAW,IAAI,GAAG,KAAK,OAAZ,GAAsB,EAAjC,CAAlB;AACA,YAAA,EAAE,GAAG,CAAC,IAAI,CAAC,KAAL,CAAW,IAAI,GAAG,EAAlB,IAAwB,CAAzB,MAAgC,CAAhC,GAAqC,EAAE,GAAG,SAA1C,GAAsD,EAAE,GAAG,SAAhE;AACD;;AACD,iBAAO,IAAI,CAAC,GAAL,CAAS,EAAT,EAAa,KAAK,IAAlB,IAA0B,CAAjC;AACD;AAVQ,OAjBiB;AA6B5B,MAAA,UAAU,EAAE;AACV,QAAA,KAAK,EAAE,IADG;AAEV,QAAA,QAAQ,EAAE;AAFA;AA7BgB,KAA9B;AAkCD;AAED;;;;;AAKE;;;AACF,EAAA,OAAA,CAAA,SAAA,CAAA,OAAA,GAAA,UAAQ,EAAR,EAAU;AAAV,QAAA,KAAA,GAAA,IAAA;;AACE,QAAI,QAAQ,GAAG,KAAK,SAApB;;AACA,QAAI,KAAK,UAAT,EAAqB;AACnB,MAAA,YAAY,CAAC,KAAK,UAAN,CAAZ;AACA,WAAK,UAAL,GAAkB,IAAlB;AACD;;AACD,SAAK,UAAL,GAAkB,UAAU,CAAC,YAAA;AAC3B,MAAA,KAAI,CAAC,SAAL;AACA,MAAA,EAAE;AACH,KAH2B,EAGzB,QAHyB,CAA5B;AAID,GAVD;AAYA;;;;;AAKE;;;AACF,EAAA,OAAA,CAAA,SAAA,CAAA,KAAA,GAAA,YAAA;AACE,SAAK,SAAL,GAAiB,CAAjB;;AACA,QAAI,KAAK,UAAT,EAAqB;AACnB,MAAA,YAAY,CAAC,KAAK,UAAN,CAAZ;AACA,WAAK,UAAL,GAAkB,IAAlB;AACD;AACF,GAND;;AAOF,SAAA,OAAA;AAAC,CA7ED,EAAA;;AA+EA,MAAM,CAAC,OAAP,GAAiB,OAAjB","sourceRoot":"","sourcesContent":["/**\n * Expose `Backoff`.\n */\nvar Backoff = /** @class */ (function () {\n    /**\n     * Construct a {@link Backoff}.\n     * @param {object} options\n     * @property {number} min - Initial timeout in milliseconds [100]\n     * @property {number} max - Max timeout [10000]\n     * @property {boolean} jitter - Apply jitter [0]\n     * @property {number} factor - Multiplication factor for Backoff operation [2]\n     */\n    function Backoff(options) {\n        Object.defineProperties(this, {\n            _min: {\n                value: options.min || 100\n            },\n            _max: {\n                value: options.max || 10000\n            },\n            _jitter: {\n                value: options.jitter > 0 && options.jitter <= 1 ? options.jitter : 0\n            },\n            _factor: {\n                value: options.factor || 2\n            },\n            _attempts: {\n                value: 0,\n                writable: true\n            },\n            _duration: {\n                enumerable: false,\n                get: function () {\n                    var ms = this._min * Math.pow(this._factor, this._attempts);\n                    if (this._jitter) {\n                        var rand = Math.random();\n                        var deviation = Math.floor(rand * this._jitter * ms);\n                        ms = (Math.floor(rand * 10) & 1) === 0 ? ms - deviation : ms + deviation;\n                    }\n                    return Math.min(ms, this._max) | 0;\n                }\n            },\n            _timeoutID: {\n                value: null,\n                writable: true\n            }\n        });\n    }\n    /**\n    * Start the backoff operation.\n    * @param {function} fn - Function to call\n    * @return {void}\n    * @api public\n    */\n    Backoff.prototype.backoff = function (fn) {\n        var _this = this;\n        var duration = this._duration;\n        if (this._timeoutID) {\n            clearTimeout(this._timeoutID);\n            this._timeoutID = null;\n        }\n        this._timeoutID = setTimeout(function () {\n            _this._attempts++;\n            fn();\n        }, duration);\n    };\n    /**\n    * Reset the number of attempts and clear the timer.\n    *\n    * @return {void}\n    * @api public\n    */\n    Backoff.prototype.reset = function () {\n        this._attempts = 0;\n        if (this._timeoutID) {\n            clearTimeout(this._timeoutID);\n            this._timeoutID = null;\n        }\n    };\n    return Backoff;\n}());\nmodule.exports = Backoff;\n//# sourceMappingURL=backoff.js.map"]},"metadata":{},"sourceType":"script"}