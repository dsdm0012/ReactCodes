{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar _a = require('../../webrtc/util'),\n    guessBrowser = _a.guessBrowser,\n    isIOSChrome = _a.isIOSChrome;\n\nvar detectSilentVideo = require('../../util/detectsilentvideo');\n\nvar mixinLocalMediaTrack = require('./localmediatrack');\n\nvar VideoTrack = require('./videotrack');\n\nvar isUserMediaTrack = require('../../util').isUserMediaTrack;\n\nvar LocalMediaVideoTrack = mixinLocalMediaTrack(VideoTrack);\n/**\n * A {@link LocalVideoTrack} is a {@link VideoTrack} representing video that\n * your {@link LocalParticipant} can publish to a {@link Room}. It can be\n * enabled and disabled with {@link LocalVideoTrack#enable} and\n * {@link LocalVideoTrack#disable} or stopped completely with\n * {@link LocalVideoTrack#stop}.\n * @extends VideoTrack\n * @property {Track.ID} id - The {@link LocalVideoTrack}'s ID\n * @property {boolean} isStopped - Whether or not the {@link LocalVideoTrack} is\n *   stopped\n * @emits LocalVideoTrack#disabled\n * @emits LocalVideoTrack#enabled\n * @emits LocalVideoTrack#started\n * @emits LocalVideoTrack#stopped\n */\n\nvar LocalVideoTrack =\n/** @class */\nfunction (_super) {\n  __extends(LocalVideoTrack, _super);\n  /**\n   * Construct a {@link LocalVideoTrack} from a MediaStreamTrack.\n   * @param {MediaStreamTrack} mediaStreamTrack - The underlying MediaStreamTrack\n   * @param {LocalTrackOptions} [options] - {@link LocalTrack} options\n   */\n\n\n  function LocalVideoTrack(mediaStreamTrack, options) {\n    var _this = this;\n\n    options = Object.assign({\n      workaroundSilentLocalVideo: (guessBrowser() === 'safari' || isIOSChrome()) && isUserMediaTrack(mediaStreamTrack) && typeof document !== 'undefined' && typeof document.createElement === 'function'\n    }, options);\n    _this = _super.call(this, mediaStreamTrack, options) || this;\n    Object.defineProperties(_this, {\n      _workaroundSilentLocalVideo: {\n        value: options.workaroundSilentLocalVideo ? workaroundSilentLocalVideo : null\n      },\n      _workaroundSilentLocalVideoCleanup: {\n        value: null,\n        writable: true\n      }\n    }); // NOTE(mmalavalli): In iOS Safari, we work around a bug where local video\n    // MediaStreamTracks are silent (even though they are enabled, live and unmuted)\n    // after accepting/rejecting a phone call.\n\n    if (_this._workaroundSilentLocalVideo) {\n      _this._workaroundSilentLocalVideoCleanup = _this._workaroundSilentLocalVideo(_this, document);\n    }\n\n    return _this;\n  }\n\n  LocalVideoTrack.prototype.toString = function () {\n    return \"[LocalVideoTrack #\" + this._instanceId + \": \" + this.id + \"]\";\n  };\n  /**\n   * @private\n   */\n\n\n  LocalVideoTrack.prototype._checkIfCanCaptureFrames = function () {\n    return _super.prototype._checkIfCanCaptureFrames.call(this, this._trackSender.isPublishing);\n  };\n  /**\n   * @private\n   */\n\n\n  LocalVideoTrack.prototype._end = function () {\n    return _super.prototype._end.apply(this, arguments);\n  };\n  /**\n   * @private\n   */\n\n\n  LocalVideoTrack.prototype._setSenderMediaStreamTrack = function (useProcessed) {\n    var _this = this;\n\n    var unprocessedTrack = this.mediaStreamTrack;\n    var mediaStreamTrack = useProcessed ? this.processedTrack : unprocessedTrack;\n    return this._trackSender.setMediaStreamTrack(mediaStreamTrack).catch(function (error) {\n      return _this._log.warn('setMediaStreamTrack failed on LocalVideoTrack RTCRtpSender', {\n        error: error,\n        mediaStreamTrack: mediaStreamTrack\n      });\n    }).then(function () {\n      _this._unprocessedTrack = useProcessed ? unprocessedTrack : null;\n    });\n  };\n  /**\n   * Add a {@link VideoProcessor} to allow for custom processing of video frames belonging to a VideoTrack.\n   * Only Chrome supports this as of now. Calling this API from a non-supported browser will result in a log warning.\n   * @param {VideoProcessor} processor - The {@link VideoProcessor} to use.\n   * @returns {this}\n   * @example\n   * class GrayScaleProcessor {\n   *   constructor(percentage) {\n   *     this.percentage = percentage;\n   *   }\n   *   processFrame(inputFrameBuffer, outputFrameBuffer) {\n   *     const context = outputFrameBuffer.getContext('2d');\n   *     context.filter = `grayscale(${this.percentage}%)`;\n   *     context.drawImage(inputFrameBuffer, 0, 0, inputFrameBuffer.width, inputFrameBuffer.height);\n   *   }\n   * }\n   *\n   * const localVideoTrack = Array.from(room.localParticipant.videoTracks.values())[0].track;\n   * localVideoTrack.addProcessor(new GrayScaleProcessor(100));\n   */\n\n\n  LocalVideoTrack.prototype.addProcessor = function () {\n    this._log.debug('Adding VideoProcessor to the LocalVideoTrack');\n\n    var result = _super.prototype.addProcessor.apply(this, arguments);\n\n    if (!this.processedTrack) {\n      return this._log.warn('Unable to add a VideoProcessor to the LocalVideoTrack');\n    }\n\n    this._log.debug('Updating LocalVideoTrack\\'s MediaStreamTrack with the processed MediaStreamTrack', this.processedTrack);\n\n    this._setSenderMediaStreamTrack(true);\n\n    return result;\n  };\n  /**\n   * Remove the previously added {@link VideoProcessor} using `addProcessor` API.\n   * @param {VideoProcessor} processor - The {@link VideoProcessor} to remove.\n   * @returns {this}\n   * @example\n   * class GrayScaleProcessor {\n   *   constructor(percentage) {\n   *     this.percentage = percentage;\n   *   }\n   *   processFrame(inputFrameBuffer, outputFrameBuffer) {\n   *     const context = outputFrameBuffer.getContext('2d');\n   *     context.filter = `grayscale(${this.percentage}%)`;\n   *     context.drawImage(inputFrameBuffer, 0, 0, inputFrameBuffer.width, inputFrameBuffer.height);\n   *   }\n   * }\n   *\n   * const localVideoTrack = Array.from(room.localParticipant.videoTracks.values())[0].track;\n   * const grayScaleProcessor = new GrayScaleProcessor(100);\n   * localVideoTrack.addProcessor(grayScaleProcessor);\n   *\n   * document.getElementById('remove-button').onclick = () => localVideoTrack.removeProcessor(grayScaleProcessor);\n   */\n\n\n  LocalVideoTrack.prototype.removeProcessor = function () {\n    var _this = this;\n\n    this._log.debug('Removing VideoProcessor from the LocalVideoTrack');\n\n    var result = _super.prototype.removeProcessor.apply(this, arguments);\n\n    this._log.debug('Updating LocalVideoTrack\\'s MediaStreamTrack with the original MediaStreamTrack');\n\n    this._setSenderMediaStreamTrack().then(function () {\n      return _this._updateElementsMediaStreamTrack();\n    });\n\n    return result;\n  };\n  /**\n   * Disable the {@link LocalVideoTrack}. This is effectively \"pause\".\n   * If a {@link VideoProcessor} is added, then `processedTrack` is disabled as well.\n   * @returns {this}\n   * @fires VideoTrack#disabled\n   */\n\n\n  LocalVideoTrack.prototype.disable = function () {\n    var result = _super.prototype.disable.apply(this, arguments);\n\n    if (this.processedTrack) {\n      this.processedTrack.enabled = false;\n    }\n\n    return result;\n  };\n  /**\n   * Enable the {@link LocalVideoTrack}. This is effectively \"unpause\".\n   * If a {@link VideoProcessor} is added, then `processedTrack` is enabled as well.\n   * @returns {this}\n   * @fires VideoTrack#enabled\n  */\n\n  /**\n  * Enable or disable the {@link LocalVideoTrack}. This is effectively \"unpause\"\n  * or \"pause\". If a {@link VideoProcessor} is added,\n  * then `processedTrack` is enabled or disabled as well.\n  * @param {boolean} [enabled] - Specify false to pause the\n  *   {@link LocalVideoTrack}\n  * @returns {this}\n  * @fires VideoTrack#disabled\n  * @fires VideoTrack#enabled\n  */\n\n\n  LocalVideoTrack.prototype.enable = function (enabled) {\n    if (enabled === void 0) {\n      enabled = true;\n    }\n\n    var result = _super.prototype.enable.apply(this, arguments);\n\n    if (this.processedTrack) {\n      this.processedTrack.enabled = enabled;\n\n      if (enabled) {\n        this._captureFrames();\n\n        this._log.debug('Updating LocalVideoTrack\\'s MediaStreamTrack with the processed MediaStreamTrack', this.processedTrack);\n\n        this._setSenderMediaStreamTrack(true);\n      }\n    }\n\n    return result;\n  };\n  /**\n   * Restart the {@link LocalVideoTrack}. This stops the existing MediaStreamTrack\n   * and creates a new MediaStreamTrack. If the {@link LocalVideoTrack} is being published\n   * to a {@link Room}, then all the {@link RemoteParticipant}s will start receiving media\n   * from the newly created MediaStreamTrack. You can access the new MediaStreamTrack via\n   * the <code>mediaStreamTrack</code> property. If you want to listen to events on\n   * the MediaStreamTrack directly, please do so in the \"started\" event handler. Also,\n   * the {@link LocalVideoTrack}'s ID is no longer guaranteed to be the same as the\n   * underlying MediaStreamTrack's ID.\n   * @param {MediaTrackConstraints} [constraints] - The optional <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints\" target=\"_blank\">MediaTrackConstraints</a>\n   *   for restarting the {@link LocalVideoTrack}; If not specified, then the current MediaTrackConstraints\n   *   will be used; If <code>{}</code> (empty object) is specified, then the default MediaTrackConstraints\n   *   will be used\n   * @returns {Promise<void>} Rejects with a TypeError if the {@link LocalVideoTrack} was not created\n   *   using an one of <code>createLocalVideoTrack</code>, <code>createLocalTracks</code> or <code>connect</code>;\n   *   Also rejects with the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia#Exceptions\" target=\"_blank\">DOMException</a>\n   *   raised by <code>getUserMedia</code> when it fails\n   * @fires LocalVideoTrack#stopped\n   * @fires LocalVideoTrack#started\n   * @example\n   * const { connect, createLocalVideoTrack } = require('twilio-video');\n   *\n   * // Create a LocalVideoTrack that captures video from the front-facing camera.\n   * createLocalVideoTrack({ facingMode: 'user' }).then(function(localVideoTrack) {\n   *   return connect('token', {\n   *     name: 'my-cool-room',\n   *     tracks: [localVideoTrack]\n   *   });\n   * }).then(function(room) {\n   *   // Restart the LocalVideoTrack to capture video from the back-facing camera.\n   *   const localVideoTrack = Array.from(room.localParticipant.videoTracks.values())[0].track;\n   *   return localVideoTrack.restart({ facingMode: 'environment' });\n   * });\n   */\n\n\n  LocalVideoTrack.prototype.restart = function () {\n    var _this = this;\n\n    if (this._workaroundSilentLocalVideoCleanup) {\n      this._workaroundSilentLocalVideoCleanup();\n\n      this._workaroundSilentLocalVideoCleanup = null;\n    }\n\n    var promise = _super.prototype.restart.apply(this, arguments);\n\n    if (this.processor) {\n      promise.then(function () {\n        _this._restartProcessor();\n      });\n    }\n\n    if (this._workaroundSilentLocalVideo) {\n      promise.finally(function () {\n        _this._workaroundSilentLocalVideoCleanup = _this._workaroundSilentLocalVideo(_this, document);\n      });\n    }\n\n    return promise;\n  };\n  /**\n   * Calls stop on the underlying MediaStreamTrack. If you choose to stop a\n   * {@link LocalVideoTrack}, you should unpublish it after stopping.\n   * @returns {this}\n   * @fires LocalVideoTrack#stopped\n   */\n\n\n  LocalVideoTrack.prototype.stop = function () {\n    if (this._workaroundSilentLocalVideoCleanup) {\n      this._workaroundSilentLocalVideoCleanup();\n\n      this._workaroundSilentLocalVideoCleanup = null;\n    }\n\n    return _super.prototype.stop.apply(this, arguments);\n  };\n\n  return LocalVideoTrack;\n}(LocalMediaVideoTrack);\n/**\n * Work around a bug where local video MediaStreamTracks are silent (even though\n * they are enabled, live and unmuted) after accepting/rejecting a phone call.\n * @private\n * @param {LocalVideoTrack} localVideoTrack\n * @param {HTMLDocument} doc\n * @returns {function} Cleans up listeners attached by the workaround\n */\n\n\nfunction workaroundSilentLocalVideo(localVideoTrack, doc) {\n  var log = localVideoTrack._log;\n  var el = localVideoTrack._dummyEl,\n      mediaStreamTrack = localVideoTrack.mediaStreamTrack;\n\n  function onUnmute() {\n    if (!localVideoTrack.isEnabled) {\n      return;\n    }\n\n    log.info('Unmuted, checking silence'); // The dummy element is paused, so play it and then detect silence.\n\n    el.play().then(function () {\n      return detectSilentVideo(el, doc);\n    }).then(function (isSilent) {\n      if (!isSilent) {\n        log.info('Non-silent frames detected, so no need to restart');\n        return;\n      }\n\n      log.warn('Silence detected, restarting'); // NOTE(mmalavalli): If we try and restart a silent MediaStreamTrack\n      // without stopping it first, then a NotReadableError is raised. Hence,\n      // we stop the MediaStreamTrack here.\n\n      localVideoTrack._stop(); // Restart the LocalVideoTrack.\n      // eslint-disable-next-line consistent-return\n\n\n      return localVideoTrack._restart();\n    }).catch(function (error) {\n      log.warn('Failed to detect silence and restart:', error);\n    }).finally(function () {\n      // If silent frames were not detected, then pause the dummy element again.\n      el = localVideoTrack._dummyEl;\n\n      if (!el.paused) {\n        el.pause();\n      } // Reset the unmute handler.\n\n\n      mediaStreamTrack.removeEventListener('unmute', onUnmute);\n      mediaStreamTrack = localVideoTrack.mediaStreamTrack;\n      mediaStreamTrack.addEventListener('unmute', onUnmute);\n    });\n  } // Set the unmute handler.\n\n\n  mediaStreamTrack.addEventListener('unmute', onUnmute);\n  return function () {\n    mediaStreamTrack.removeEventListener('unmute', onUnmute);\n  };\n}\n/**\n * The {@link LocalVideoTrack} was disabled, i.e. \"muted\".\n * @param {LocalVideoTrack} track - The {@link LocalVideoTrack} that was\n *   disabled\n * @event LocalVideoTrack#disabled\n */\n\n/**\n * The {@link LocalVideoTrack} was enabled, i.e. \"unmuted\".\n * @param {LocalVideoTrack} track - The {@link LocalVideoTrack} that was enabled\n * @event LocalVideoTrack#enabled\n */\n\n/**\n * The {@link LocalVideoTrack} started. This means there is enough video data\n * to begin playback.\n * @param {LocalVideoTrack} track - The {@link LocalVideoTrack} that started\n * @event LocalVideoTrack#started\n */\n\n/**\n * The {@link LocalVideoTrack} stopped, either because {@link LocalVideoTrack#stop}\n * or {@link LocalVideoTrack#restart} was called or because the underlying\n * MediaStreamTrack ended.\n * @param {LocalVideoTrack} track - The {@link LocalVideoTrack} that stopped\n * @event LocalVideoTrack#stopped\n */\n\n\nmodule.exports = LocalVideoTrack;","map":null,"metadata":{},"sourceType":"script"}