{"ast":null,"code":"var _jsxFileName = \"/home/bibhu/EDRdevelopment/DevBranch/edresearchweb/src/App.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Route, Switch } from 'react-router-dom'; //import logo from './logo.svg';\n\nimport './App.css';\nimport Header from './components/Header/Header';\nimport SideNavBar from './components/SideNavBar/SideNavBar';\nimport SideToolBar from './components/SideNavBar/SideToolBar';\nimport UserProfile from './MainApps/Account/UserProfile/UserProfile';\nimport Settings from './MainApps/Account/Settings/Settings';\nimport Courses from './MainApps/Account/Courses/Courses'; //Import Applications\n\nimport General from './MainApps/Dashboard/General/General';\nimport Subject from './MainApps/Dashboard/Subject/Subject';\nimport News from './MainApps/Dashboard/News/News';\nimport VATChat from './MainApps/Messages/VATChat/VATChat';\nimport EMail from './MainApps/Messages/EMail/EMail';\nimport Tickets from './MainApps/Messages/Tickets/Tickets';\nimport Overview from './MainApps/Class/Overview/Overview';\nimport Detail from './MainApps/Class/Detail/Detail';\nimport Specifics from './MainApps/Class/Specifics/Specifics';\nimport Login from './CommonApps/Login';\nimport axiosInstance from './axios';\nimport { getcoursesbyCourseId, getuser, getcoursesbyglobalCodeArray, getcoursesbyCourseIdArray, getcoursesbyCourseIdSimpleArray, Appenn } from './CommonApps/AllAPICalls';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Appen = ({\n  courseId,\n  allCourses\n}) => {\n  console.log(\"courseId: \", courseId);\n  allCourses.push({\n    \"bibhu\": 'hello baby'\n  });\n};\n\n_c = Appen;\n\nconst DashCor = () => {\n  _s();\n\n  const [dashboardCourses, getDashboardCourses] = useState([]);\n  return dashboardCourses;\n};\n\n_s(DashCor, \"ra1jnqhBHLsayl4oIQjCLE5VFPQ=\");\n\n_c2 = DashCor;\n\nfunction App() {\n  _s2();\n\n  console.log(\"Page reredering-----------------\");\n  const [rerender, setRerender] = useState(false);\n\n  const rerenderHandler = () => {\n    setRerender(!rerender);\n  };\n\n  const [sideNavBarWidth, setWidth] = useState('var(--sideNavBarWidth)');\n  const [contract, setContract] = useState(true);\n\n  const expandHandler = () => {\n    contract && setWidth('var(--sideNavBarWidthOnContract)');\n    !contract && setWidth('var(--sideNavBarWidth)');\n    setContract(!contract);\n  };\n\n  const [dashboardMounted, setDashboardMounted] = useState(false);\n  const [messagesMounted, setMessagesMounted] = useState(false);\n  const [classMounted, setClassMounted] = useState(false);\n  const [tasksMounted, setTasksMounted] = useState(false);\n  const [booksMounted, setBooksMounted] = useState(false);\n  const [examMounted, setExamMounted] = useState(false);\n  const [classmatesMounted, setClassmatesMounted] = useState(false);\n  const [teacherMounted, setTeacherMounted] = useState(false);\n  const [prepareMounted, setProgressMounted] = useState(false);\n  const [analyticsMounted, setAnalticsMounted] = useState(false);\n  const [achievementsMounted, setAchievementsMounted] = useState(false);\n  const [goalsMounted, setGoalsMounted] = useState(false);\n  const [calenderMounted, setCalenderMounted] = useState(false);\n  const [diaryMounted, setDiaryMounted] = useState(false);\n  const [helpcenterMounted, setHelpCenterMounted] = useState(false);\n  const [selectedCourse, getCourseData] = useState([]); //const [courseData, getCourseData] = useState([]);\n\n  let selectedCourseId = localStorage.getItem('preferredCourseId');\n  /*\t\n  useEffect(()=>{\n    console.log(\"useEffect-1\");\t   \n    let courseId=selectedCourseId;\n   \t   \n    getcoursesbyCourseId({courseId,getCourseData});\n    return ()=>{\n       getCourseData(selectedCourse=>[]);\n    }\n  },[selectedCourseId, rerender]);\n  */\n\n  const [data, setData] = useState({\n    \"dashboardcourses\": []\n  });\n  /*  \t\n  useEffect(()=>{\n  console.log(\"useEffect-2\");   \n       getuser({setData});\n   },[rerender])\n  */\n  //const [dashboardCourses, getDashboardCourses] = useState([]);\n\n  /* \n   useEffect(()=>{\n   \t     \n     console.log(\"useEffect-3\");\n      let courseIds = [10];//data.dashboardcourses;        \n     let allCourses=[];\t  \n      \n     courseIds.map((courseId, index)=>{\n         if(courseId !==0){\n              //getcoursesbyCourseIdArray({courseId, getDashboardCourses});\n              //getcoursesbyCourseIdSimpleArray({courseId, dashboardCourses});\n              //getDashboardCourses([\"Jai\"]);\n  axiosInstance.get(`course/object/${courseId}/`).then((res) => {\n                      getDashboardCourses([\"Hai Jai\"]);\n              })  \n   \n         }\n     });\n    \n     //getDashboardCourses(dashboardCourses=>allCourses);\n      return ()=>{\n  // console.log(\"clear fucntion called\");    \n         //getDashboardCourses(dashboardCourses=>[]);\n     }\n  },[data.dashboardcourses, rerender ]);    \n  */\n\n  useEffect(() => {\n    console.log(\"useEffect-Test\");\n    let courseId = 10;\n    const AllCourses = [];\n    axiosInstance.get(`course/object/${courseId}/`).then(res => {\n      getDashboardCourses(res.data);\n    });\n  }, []);\n  console.log(\"dashboard courses: \", dashboardCourses);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"edrapp\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 225,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(App, \"STkqQ6fd1hNtvCtXjW/DlDYquxg=\");\n\n_c3 = App;\nexport default App;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Appen\");\n$RefreshReg$(_c2, \"DashCor\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"sources":["/home/bibhu/EDRdevelopment/DevBranch/edresearchweb/src/App.js"],"names":["React","useState","useEffect","useCallback","Route","Switch","Header","SideNavBar","SideToolBar","UserProfile","Settings","Courses","General","Subject","News","VATChat","EMail","Tickets","Overview","Detail","Specifics","Login","axiosInstance","getcoursesbyCourseId","getuser","getcoursesbyglobalCodeArray","getcoursesbyCourseIdArray","getcoursesbyCourseIdSimpleArray","Appenn","Appen","courseId","allCourses","console","log","push","DashCor","dashboardCourses","getDashboardCourses","App","rerender","setRerender","rerenderHandler","sideNavBarWidth","setWidth","contract","setContract","expandHandler","dashboardMounted","setDashboardMounted","messagesMounted","setMessagesMounted","classMounted","setClassMounted","tasksMounted","setTasksMounted","booksMounted","setBooksMounted","examMounted","setExamMounted","classmatesMounted","setClassmatesMounted","teacherMounted","setTeacherMounted","prepareMounted","setProgressMounted","analyticsMounted","setAnalticsMounted","achievementsMounted","setAchievementsMounted","goalsMounted","setGoalsMounted","calenderMounted","setCalenderMounted","diaryMounted","setDiaryMounted","helpcenterMounted","setHelpCenterMounted","selectedCourse","getCourseData","selectedCourseId","localStorage","getItem","data","setData","AllCourses","get","then","res"],"mappings":"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","sourcesContent":["import React,{useState,useEffect,useCallback} from 'react';\nimport {Route,Switch} from 'react-router-dom';\n//import logo from './logo.svg';\n\nimport  './App.css';\nimport Header from './components/Header/Header';\n\nimport SideNavBar from './components/SideNavBar/SideNavBar';\nimport SideToolBar from './components/SideNavBar/SideToolBar';\n\nimport UserProfile from './MainApps/Account/UserProfile/UserProfile';\nimport Settings from './MainApps/Account/Settings/Settings';\nimport Courses from './MainApps/Account/Courses/Courses';\n\n\n//Import Applications\nimport General from './MainApps/Dashboard/General/General';\nimport Subject from './MainApps/Dashboard/Subject/Subject';\nimport News from './MainApps/Dashboard/News/News';\n\n\n\n\nimport VATChat from './MainApps/Messages/VATChat/VATChat';\nimport EMail from './MainApps/Messages/EMail/EMail';\nimport Tickets from './MainApps/Messages/Tickets/Tickets';\n\n\nimport Overview from './MainApps/Class/Overview/Overview';\nimport Detail from './MainApps/Class/Detail/Detail';\nimport Specifics from './MainApps/Class/Specifics/Specifics';\n\n\nimport Login from './CommonApps/Login';\nimport axiosInstance from './axios';\n\nimport {getcoursesbyCourseId, getuser, getcoursesbyglobalCodeArray, getcoursesbyCourseIdArray, getcoursesbyCourseIdSimpleArray, Appenn} from './CommonApps/AllAPICalls';\n\n\n\n\n\n\n\n\n\n\n\n\n  const Appen=({courseId, allCourses})=>{\n\n    console.log(\"courseId: \", courseId);\t  \n    allCourses.push({\"bibhu\": 'hello baby'});\n\n\n }\n\n\n\n\n\n\n const DashCor=()=>{\n   const [dashboardCourses, getDashboardCourses] = useState([]);\n\n   return dashboardCourses;\n  }\n\n\n\n\n\n\n\nfunction App() {\n\n  \n    console.log(\"Page reredering-----------------\");\n\n    const [rerender,setRerender] = useState(false);\n\n    const rerenderHandler=()=>{\n      setRerender(!rerender);\n    }\n   \n\n\n    const [sideNavBarWidth, setWidth] = useState('var(--sideNavBarWidth)');\n    const [contract,setContract] = useState(true);\n\n\n\n    const expandHandler=()=>{\n\n        contract && setWidth('var(--sideNavBarWidthOnContract)');\n\n       !contract && setWidth('var(--sideNavBarWidth)');\n\n       setContract(!contract);\n    }\n\n\n\n\n\n\n   const [dashboardMounted, setDashboardMounted] = useState(false);\n   const [messagesMounted, setMessagesMounted] = useState(false);\n   const [classMounted, setClassMounted] = useState(false);\n   const [tasksMounted, setTasksMounted] = useState(false);\t\n   const [booksMounted, setBooksMounted] = useState(false);\n   const [examMounted, setExamMounted] = useState(false);\t\n   const [classmatesMounted, setClassmatesMounted] = useState(false);\n   const [teacherMounted, setTeacherMounted] = useState(false);\n   const [prepareMounted, setProgressMounted] = useState(false);\n   const [analyticsMounted, setAnalticsMounted] = useState(false);\t\n   const [achievementsMounted, setAchievementsMounted] = useState(false);                \n   const [goalsMounted, setGoalsMounted] = useState(false);\n   const [calenderMounted, setCalenderMounted] = useState(false);\n   const [diaryMounted, setDiaryMounted] = useState(false);\n   const [helpcenterMounted, setHelpCenterMounted] = useState(false);\n\n   const [selectedCourse, getCourseData] = useState([]);\n\n    //const [courseData, getCourseData] = useState([]);\n\n\n    let selectedCourseId = localStorage.getItem('preferredCourseId')\n\n    /*\t\n    useEffect(()=>{\n      console.log(\"useEffect-1\");\t   \n      let courseId=selectedCourseId;\n     \t   \n      getcoursesbyCourseId({courseId,getCourseData});\n      return ()=>{\n         getCourseData(selectedCourse=>[]);\n      }\n    },[selectedCourseId, rerender]);\n    */\n    \n   \n\n\n   const [data,setData]=useState({\n   \"dashboardcourses\": []\n   });\n\n   /*  \t\n   useEffect(()=>{\n\tconsole.log(\"useEffect-2\");   \n        getuser({setData});\n    },[rerender])\n   */\n\n\n  //const [dashboardCourses, getDashboardCourses] = useState([]);\n\n\n\n    /* \n     useEffect(()=>{\n     \t     \n       console.log(\"useEffect-3\");\n\n       let courseIds = [10];//data.dashboardcourses;        \n       let allCourses=[];\t  \n        \n       courseIds.map((courseId, index)=>{\n           if(courseId !==0){\n                //getcoursesbyCourseIdArray({courseId, getDashboardCourses});\n                //getcoursesbyCourseIdSimpleArray({courseId, dashboardCourses});\n                //getDashboardCourses([\"Jai\"]);\n\t\taxiosInstance.get(`course/object/${courseId}/`).then((res) => {\n                        getDashboardCourses([\"Hai Jai\"]);\n                })  \n\t\t   \n           }\n       });\n      \n       //getDashboardCourses(dashboardCourses=>allCourses);\n\n       return ()=>{\n\n\t  // console.log(\"clear fucntion called\");    \n           //getDashboardCourses(dashboardCourses=>[]);\n       }\n    },[data.dashboardcourses, rerender ]);    \n    */\n\n\n\n\n\n   useEffect(() => {\n     console.log(\"useEffect-Test\");\t   \n     let courseId=10;\n     const AllCourses=[];\n     \t   \n     axiosInstance.get(`course/object/${courseId}/`).then((res) => {\n                      getDashboardCourses(res.data); \n\n                    })\n\n\n\n\n\n   }, []);\n\n\n\n\n\n\n\n\n\n    console.log(\"dashboard courses: \", dashboardCourses);\n\n\n\n\n  return (\n    <div className=\"edrapp\">\n\n    \n\t  {/* \n    \n    <Header onPress={expandHandler}  selectedCourse={selectedCourse} userData={data} dashboardCourses={dashboardCourses}/> \n   \n    \n\n    <SideToolBar toolBarWidth={sideNavBarWidth}/>\n \n    \n    <SideNavBar sideNavBarWidth={sideNavBarWidth} \n\tdashboardMounted={dashboardMounted}  \n\tmessagesMounted={messagesMounted} \n        \n        classMounted = {classMounted} \n        tasksMounted = {tasksMounted} \n        booksMounted = {booksMounted} \n        examMounted = {examMounted} \n        classmatesMounted = {classmatesMounted} \n        teacherMounted = {teacherMounted} \n        prepareMounted = {prepareMounted} \n        analyticsMounted ={analyticsMounted} \n        achievementsMounted = {achievementsMounted} \n        goalsMounted = {goalsMounted} \n        calenderMounted = {calenderMounted} \n        diaryMounted = {diaryMounted} \n        helpcenterMounted = {helpcenterMounted} \n      />\n    \n    \n\n \n    <Switch>\n\n\n\t        \t  \n\n      <Route exact path='/account/userprofile' >\n      <UserProfile sideNavBarWidth={sideNavBarWidth} selectedCourse={selectedCourse}/>\n      </Route>\n\n      <Route exact path='/account/settings' >\n        <Settings sideNavBarWidth={sideNavBarWidth} selectedCourse={selectedCourse}/>\n      </Route>\n\n      <Route exact path='/account/courses' >\n        <Courses sideNavBarWidth={sideNavBarWidth} selectedCourse={selectedCourse}/>\n      </Route>\n       \n \n      <Route exact path='/dashboard/general' >\n        <General sideNavBarWidth={sideNavBarWidth} \n\t    passMountInfo={setDashboardMounted} \n\t    selectedCourse={selectedCourse} \n\t    onPress={rerenderHandler}\n\t    dashboardCourses={dashboardCourses}\n\t/>\n      </Route>\n\n     <Route exact path='/dashboard/subject' >\n        <Subject sideNavBarWidth={sideNavBarWidth} passMountInfo={setDashboardMounted}  selectedCourse={selectedCourse}/>\n      </Route>\n\n      <Route exact path='/dashboard/news' >\n        <News sideNavBarWidth={sideNavBarWidth} passMountInfo={setDashboardMounted}  selectedCourse={selectedCourse}/>\n      </Route>\n\n\n\n\t \n      <Route exact path='/messages/chat' >\n        <VATChat sideNavBarWidth={sideNavBarWidth} passMountInfo={setMessagesMounted}  selectedCourse={selectedCourse}/>\n      </Route>\n        \n\n      <Route exact path='/messages/email' >\n        <EMail sideNavBarWidth={sideNavBarWidth} passMountInfo={setMessagesMounted}  selectedCourse={selectedCourse}/>\n      </Route>\n\n      \n\n      <Route exact path='/messages/tickets' >\n        <Tickets sideNavBarWidth={sideNavBarWidth} passMountInfo={setMessagesMounted}  selectedCourse={selectedCourse}/>\n      </Route>\n\t \n\n      <Route exact path='/class/overview' >\n        <Overview sideNavBarWidth={sideNavBarWidth} passMountInfo={setClassMounted}  selectedCourse={selectedCourse}/>\n      </Route>\n\n      <Route exact path='/class/detail' >\n        <Detail sideNavBarWidth={sideNavBarWidth} passMountInfo={setClassMounted}  selectedCourse={selectedCourse}/>\n      </Route>\n\n      <Route exact path='/class/specifics' >\n        <Specifics sideNavBarWidth={sideNavBarWidth} passMountInfo={setClassMounted}  selectedCourse={selectedCourse}/>\n      </Route>\n      \n    \n\n    </Switch>\t  \n    \n    */}\n    </div>\n\n  );\n\n\n\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}