{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar average = require('./average');\n\nvar SenderOrReceiverReport = require('./senderorreceiverreport');\n\nvar sum = require('./sum');\n/**\n * @interface ReceiverSummary\n * @property {number} bitrate\n * @property {number} fractionLost - 0–1\n * @property {number} [jitter] - s (undefined for video tracks in Chrome)\n */\n\n/**\n * @extends SenderOrReceiverReport\n * @property {number} deltaPacketsLost\n * @property {number} deltaPacketsReceived\n * @property {number} [fractionLost] - 0–1 (undefined in Firefox)\n * @property {number} [jitter] - s (undefined for video tracks in Chrome)\n * @property {number} phonyPacketsLost - 0–1\n */\n\n\nvar ReceiverReport =\n/** @class */\nfunction (_super) {\n  __extends(ReceiverReport, _super);\n  /**\n   * @param {StatsId} id\n   * @param {TrackId} trackId\n   * @param {number} bitrate - bps\n   * @param {number} deltaPacketsLost\n   * @param {number} deltaPacketsReceived\n   * @param {number} [fractionLost] - 0–1 (undefined in Firefox)\n   * @param {number} [jitter] - s (undefined for video tracks in Chrome)\n   */\n\n\n  function ReceiverReport(id, trackId, bitrate, deltaPacketsLost, deltaPacketsReceived, fractionLost, jitter) {\n    var _this = _super.call(this, id, trackId, bitrate) || this;\n\n    var phonyFractionLost = deltaPacketsReceived > 0 ? deltaPacketsLost / deltaPacketsReceived : 0;\n    Object.defineProperties(_this, {\n      deltaPacketsLost: {\n        enumerable: true,\n        value: deltaPacketsLost\n      },\n      deltaPacketsReceived: {\n        enumerable: true,\n        value: deltaPacketsReceived\n      },\n      fractionLost: {\n        enumerable: true,\n        value: fractionLost\n      },\n      jitter: {\n        enumerable: true,\n        value: jitter\n      },\n      phonyFractionLost: {\n        enumerable: true,\n        value: phonyFractionLost\n      }\n    });\n    return _this;\n  }\n  /**\n   * Create a {@link ReceiverReport}.\n   * @param {string} trackId\n   * @param {RTCStats} olderStats\n   * @param {RTCStats} newerStats\n   * @returns {ReceiverReport}\n   */\n\n\n  ReceiverReport.of = function (trackId, olderStats, newerStats) {\n    if (olderStats.id !== newerStats.id) {\n      throw new Error('RTCStats IDs must match');\n    }\n\n    var secondsElapsed = (newerStats.timestamp - olderStats.timestamp) / 1000;\n    var deltaBytesReceived = newerStats.bytesReceived - olderStats.bytesReceived;\n    var bitrate = secondsElapsed > 0 ? deltaBytesReceived / secondsElapsed * 8 : 0;\n    var deltaPacketsLost = Math.max(newerStats.packetsLost - olderStats.packetsLost, 0);\n    var deltaPacketsReceived = newerStats.packetsReceived - olderStats.packetsReceived;\n    var fractionLost = newerStats.fractionLost,\n        jitter = newerStats.jitter;\n    return new ReceiverReport(olderStats.id, trackId, bitrate, deltaPacketsLost, deltaPacketsReceived, fractionLost, jitter);\n  };\n  /**\n   * Summarize {@link ReceiverReport}s by summing and averaging their values.\n   * @param {Array<ReceiverReport>} reports\n   * @returns {ReceiverSummary}\n   */\n\n\n  ReceiverReport.summarize = function (reports) {\n    var summaries = reports.map(function (report) {\n      return report.summarize();\n    });\n    var bitrate = sum(summaries.map(function (summary) {\n      return summary.bitrate;\n    }));\n    var fractionLost = average(summaries.map(function (summary) {\n      return summary.fractionLost;\n    }));\n    var jitter = average(summaries.map(function (summary) {\n      return summary.jitter;\n    }));\n    return {\n      bitrate: bitrate,\n      fractionLost: fractionLost,\n      jitter: jitter\n    };\n  };\n  /**\n   * Summarize the {@link ReceiveReport}.\n   * @returns {ReceiverSummary}\n   */\n\n\n  ReceiverReport.prototype.summarize = function () {\n    return {\n      bitrate: this.bitrate,\n      fractionLost: typeof this.fractionLost === 'number' ? this.fractionLost : this.phonyFractionLost,\n      jitter: this.jitter\n    };\n  };\n\n  return ReceiverReport;\n}(SenderOrReceiverReport);\n\nmodule.exports = ReceiverReport;","map":null,"metadata":{},"sourceType":"script"}